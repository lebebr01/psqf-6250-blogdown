<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PSQF 6250</title>
    <link>https://psqf6250.brandonlebeau.org/</link>
      <atom:link href="https://psqf6250.brandonlebeau.org/index.xml" rel="self" type="application/rss+xml" />
    <description>PSQF 6250</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 25 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://psqf6250.brandonlebeau.org/media/blue-balloon.jpg</url>
      <title>PSQF 6250</title>
      <link>https://psqf6250.brandonlebeau.org/</link>
    </image>
    
    <item>
      <title>Graphics</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/graphics/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/graphics/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;We are going to start by exploring graphics with R using the &lt;code&gt;midwest&lt;/code&gt; data. To access this data, run the following commands:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we were interested in exploring the question: How does population density influence the percentage of the population with at least a college degree? Let’s explore these data closer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;midwest&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 437 × 28
##      PID county  state  area poptotal popdensity popwhite popblack popamerindian
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;         &amp;lt;int&amp;gt;
##  1   561 ADAMS   IL    0.052    66090      1271.    63917     1702            98
##  2   562 ALEXAN… IL    0.014    10626       759      7054     3496            19
##  3   563 BOND    IL    0.022    14991       681.    14477      429            35
##  4   564 BOONE   IL    0.017    30806      1812.    29344      127            46
##  5   565 BROWN   IL    0.018     5836       324.     5264      547            14
##  6   566 BUREAU  IL    0.05     35688       714.    35157       50            65
##  7   567 CALHOUN IL    0.017     5322       313.     5298        1             8
##  8   568 CARROLL IL    0.027    16805       622.    16519      111            30
##  9   569 CASS    IL    0.024    13437       560.    13384       16             8
## 10   570 CHAMPA… IL    0.058   173025      2983.   146506    16559           331
## # … with 427 more rows, and 19 more variables: popasian &amp;lt;int&amp;gt;, popother &amp;lt;int&amp;gt;,
## #   percwhite &amp;lt;dbl&amp;gt;, percblack &amp;lt;dbl&amp;gt;, percamerindan &amp;lt;dbl&amp;gt;, percasian &amp;lt;dbl&amp;gt;,
## #   percother &amp;lt;dbl&amp;gt;, popadults &amp;lt;int&amp;gt;, perchsd &amp;lt;dbl&amp;gt;, percollege &amp;lt;dbl&amp;gt;,
## #   percprof &amp;lt;dbl&amp;gt;, poppovertyknown &amp;lt;int&amp;gt;, percpovertyknown &amp;lt;dbl&amp;gt;,
## #   percbelowpoverty &amp;lt;dbl&amp;gt;, percchildbelowpovert &amp;lt;dbl&amp;gt;, percadultpoverty &amp;lt;dbl&amp;gt;,
## #   percelderlypoverty &amp;lt;dbl&amp;gt;, inmetro &amp;lt;int&amp;gt;, category &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will bring up the first 10 rows of the data (hiding the additional 8,592) rows. A first common step to explore our research question is to plot the data. To do this we are going to use the R package, &lt;code&gt;ggplot2&lt;/code&gt;, which was installed when running the &lt;code&gt;install.packages&lt;/code&gt; command above. You can explore the &lt;code&gt;midwest&lt;/code&gt; data by calling up the help file as well with &lt;code&gt;?midwest&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;create-a-ggplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a ggplot&lt;/h2&gt;
&lt;p&gt;To plot these two variables from the &lt;code&gt;midwest&lt;/code&gt; data, we will use the function &lt;code&gt;ggplot&lt;/code&gt; and &lt;code&gt;geom_point&lt;/code&gt; to add a layer of points. We will treat &lt;code&gt;popdensity&lt;/code&gt; as the x variable and &lt;code&gt;percollege&lt;/code&gt; as the y variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/plot1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;examples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Try plotting &lt;code&gt;popdensity&lt;/code&gt; by &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Try plotting &lt;code&gt;county&lt;/code&gt; by &lt;code&gt;state&lt;/code&gt;. Does this plot work?&lt;/li&gt;
&lt;li&gt;Bonus: Try just using the &lt;code&gt;ggplot(data = midwest)&lt;/code&gt; from above. What do you get? Does this make sense?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: You should be able to modify the structure of the code above to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;add-aesthetics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Aesthetics&lt;/h2&gt;
&lt;p&gt;Aesthetics are a way to explore more complex interactions within the data. Particularly, from the above example, lets add in the state variable to the plot via an aesthetic.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege, color = state))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/aesthetic-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we simply colored the points by the state they belong in. Does there appear to be a trend?&lt;/p&gt;
&lt;div id=&#34;examples-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using the same aesthetic structure as above, instead of using colors, make the shape of the points different for each state.&lt;/li&gt;
&lt;li&gt;Instead of color, use &lt;code&gt;alpha&lt;/code&gt; instead. What does this do to the plot?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;global-aesthetics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Global Aesthetics&lt;/h2&gt;
&lt;p&gt;Above, we specified a variable to an aesthetic, which is a common use of aesthetics. However, the aesthetics can also be assigned globally. Here are two examples using the first scatterplot created.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege), color = &amp;#39;pink&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/global_aes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege), shape = 15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/global_aes2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These two plots changed the aesthetics for all of the points. Notice, the suttle difference between the code for these plots and that for the plot above. The placement of the aesthetic is crucial, if it is within the parentheses for &lt;code&gt;aes()&lt;/code&gt; then it should be assigned a variable. If it is outside, as in the last two examples, it will define the aesthetic for all the data.&lt;/p&gt;
&lt;div id=&#34;examples-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Try the following command: &lt;code&gt;colors()&lt;/code&gt;. This will print a vector of all the color names within R, try a few to find your favorites.&lt;/li&gt;
&lt;li&gt;What happens if you use the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) + 
  geom_point(mapping = aes(x = popdensity, y = percollege, color = &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is the problem?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;facets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Facets&lt;/h2&gt;
&lt;p&gt;Instead of defining an aesthetic to change the color or shape of points by a third variable, we can also plot each groups data in a single plot and combine them. The process is easy with &lt;code&gt;ggplot2&lt;/code&gt; by using facets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege)) + 
  facet_grid(. ~ state)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/facets-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;facet_wrap&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege)) + 
  facet_wrap(~ state)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/facet_wrap-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;examples-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Can you facet with a continuous variable? Try it!&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;geoms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Geoms&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; uses a grammar of graphics which makes it easy to switch different plot types (called geoms) once you are comfortable with the basic syntax. For example, how does the following plot differ from the scatterplot first generated above? What is similar?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_smooth(mapping = aes(x = popdensity, y = percollege))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/smooth-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also do this plot by states&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_smooth(mapping = aes(x = popdensity, y = percollege, linetype = state), 
              se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/smooth_states-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What about the code above gave me the different lines for each state? Note, I also removed the standard error shading from the plot as well.&lt;/p&gt;
&lt;div id=&#34;examples-4&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;It is possible to combine geoms, which we will do next, but try it first. Try to recreate this plot.
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/combine-1.png&#34; width=&#34;672&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-multiple-geoms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combining multiple geoms&lt;/h2&gt;
&lt;p&gt;Combining more than one geom into a single plot is relatively straightforward, but a few considerations are important. Essentially to do the task, we just simply need to combine the two geoms we have used:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(aes(x = popdensity, y = percollege, color = state)) +
  geom_smooth(mapping = aes(x = popdensity, y = percollege, color = state), 
              se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/combine_geoms-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A couple points about combining geoms, first, the order matters. In the above example, we called &lt;code&gt;geom_point&lt;/code&gt; first, then &lt;code&gt;geom_smooth&lt;/code&gt;. When plotting these data, the points will then be plotted first followed by the lines. Try flipping the order of the two geoms to see how the plot differs.&lt;/p&gt;
&lt;p&gt;We can also simplify this code to not duplicate typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() +
  geom_smooth(se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/two_geoms-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;examples-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Can you recreate the following figure?
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/differ_aes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-geom-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other geom examples&lt;/h2&gt;
&lt;p&gt;There are many other geoms available to use. To see them all, visit &lt;a href=&#34;http://docs.ggplot2.org/current/index.html&#34; class=&#34;uri&#34;&gt;http://docs.ggplot2.org/current/index.html&lt;/a&gt; which gives examples of all the possibilities. This is a handy resource that I keep going back to.&lt;/p&gt;
&lt;div id=&#34;geoms-for-single-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Geoms for single variables&lt;/h3&gt;
&lt;p&gt;The introduction to plotting has been with two variables, but lets take a step back and focus on one variable with a bar chart.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/bar-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also easily add aesthetics this base plot as shown before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar(aes(fill = factor(inmetro)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/bar_fill-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A few additions can help interpretation of this plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar(aes(fill = factor(inmetro)), position = &amp;#39;fill&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/bar_fill2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar(aes(fill = factor(inmetro)), position = &amp;#39;dodge&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to do a histrogram of a quantitative variable:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity)) + 
  geom_histogram()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/histogram-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can adjust the binwidth directly:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity)) + 
  geom_histogram(binwidth = 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/binwidth-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-6&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;With more than two groups, histograms are difficult to interpret due to overlap. Instead, use the &lt;code&gt;geom_density&lt;/code&gt; to create a density plot for &lt;code&gt;popdensity&lt;/code&gt; for each state. The final plot should look similar to this:
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/density-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;geom_boxplot&lt;/code&gt;, create boxplots with &lt;code&gt;popdensity&lt;/code&gt; as the y variable and &lt;code&gt;state&lt;/code&gt; as the x variable. Bonus: facet this plot by the variable &lt;code&gt;inmetro&lt;/code&gt;.
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/boxplot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-customization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Customization&lt;/h2&gt;
&lt;p&gt;There are many many ways to adjust the look of the plot, I will discuss a few that are common.&lt;/p&gt;
&lt;div id=&#34;change-axes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Change axes&lt;/h3&gt;
&lt;p&gt;Axes are something that are commonly altered, particularly to give them a good name and also to alter the values shown on the axes. These are generally done with &lt;code&gt;scale_x_*&lt;/code&gt; and &lt;code&gt;scale_y_*&lt;/code&gt; where &lt;code&gt;*&lt;/code&gt; is a filler based on the type of variable on the axes.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/axes_labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To change the legend title, the &lt;code&gt;scale_color_discrete&lt;/code&gt; command can be used to adjust the color aesthetic and the variable is discrete.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/aes_labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;we can also alter the breaks showing on the x-axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;, breaks = seq(0, 80000, 20000)) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/breaks_x-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;zoom-in-on-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Zoom in on plot&lt;/h2&gt;
&lt;p&gt;You’ll notice that there are outliers in this scatterplot due to larger population density values for some counties. It may be of interest to zoom in on the plot. The plot can be zoomed in by using the &lt;code&gt;coord_cartesian&lt;/code&gt; command as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;) + 
  coord_cartesian(xlim = c(0, 15000))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/zoom-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note: This can also be achieved using the &lt;code&gt;xlim&lt;/code&gt; argument to &lt;code&gt;scale_x_continuous&lt;/code&gt; above, however this will cause some points to not be plotted. In this case it would not be a huge deal, however, if we plotted the smooth lines from before you can see the difference.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  geom_smooth(se = FALSE) +
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;) + 
  coord_cartesian(xlim = c(0, 15000))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/zoom2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  geom_smooth(se = FALSE) +
  scale_x_continuous(&amp;quot;Population Density&amp;quot;, limits = c(0, 15000)) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 16 rows containing non-finite values (stat_smooth).&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 16 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics_files/figure-html/zoom3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Basics</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/r-basics/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/r-basics/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;In an attempt to get you “doing things” in R quickly, I’ve omitted a lot of discussion surrounding internal R workings. R is an object oriented language, this is much different than many other software languages.&lt;/p&gt;
&lt;div id=&#34;r-works-as-a-calculator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R works as a calculator&lt;/h2&gt;
&lt;p&gt;R can be used as a calculator to do any type of addition, subtraction, multiplication, or division (among other things).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1 + 2 - 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;5 * 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2/1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sqrt(4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2^2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Being an object oriented system, values can directly saved within an object to be used later. As an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1 + 3
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can then be used later in other calculations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x * 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This simplistic example is a bit too simple to show all the benefits of this approach, but will become more apparent when we start reading in data and doing more complicated data munging type tasks.&lt;/p&gt;
&lt;div id=&#34;naming-conventions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Naming conventions&lt;/h3&gt;
&lt;p&gt;This is a topic in which you will not get a single answer, but rather a different answer for everyone you ask. I prefer something called &lt;strong&gt;snake_case&lt;/strong&gt; using underscores to separate words in an object. Others use &lt;strong&gt;titleCase&lt;/strong&gt; as a way to distinguish words others yet use &lt;strong&gt;period.to.separate&lt;/strong&gt; words in object names.&lt;/p&gt;
&lt;p&gt;The most important thing is to be consistent. Pick a convention that works for you and stick with it through out. Avoiding this &lt;strong&gt;Mixed.TypeOf_conventions&lt;/strong&gt; at all costs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-is-case-sensitive&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R is case sensitive&lt;/h2&gt;
&lt;p&gt;This can cause problems and make debugging a bit more difficult. Be careful with typos and with case. Here is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;case_sensitive &amp;lt;- 10
Case_sensitive&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in eval(expr, envir, enclos) : object &amp;#39;Case_sensitive&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;We have already been using functions when working through creating graphics with R. A function consists of at least two parts, the &lt;em&gt;function name&lt;/em&gt; and the &lt;em&gt;arguments&lt;/em&gt; as follows: &lt;code&gt;function_name(arg1 = num, arg2 = num)&lt;/code&gt;. The arguments are always inside of parentheses, take on some value, and are always named. To call a function, use the &lt;code&gt;function_name&lt;/code&gt; followed by parentheses with the arguments inside the parentheses. For example, using the &lt;code&gt;rnorm&lt;/code&gt; function to generate values from a random normal distribution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rnorm(n = 10, mean = 0, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
##  [7]  0.4874291  0.7383247  0.5757814 -0.3053884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice I called the arguments by name directly, this is good practice, however, this code will generate the same values (the values are the same because I’m using &lt;code&gt;set.seed&lt;/code&gt; here):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rnorm(10, 0, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
##  [7]  0.4874291  0.7383247  0.5757814 -0.3053884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key when arguments are not called via their names is the order of the arguments. Look at &lt;code&gt;?rnorm&lt;/code&gt; to see that the first three arguments are indeed &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, and &lt;code&gt;sd&lt;/code&gt;. When you name arguments, they can be specified in any order (generally bad practice).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rnorm(sd = 1, n = 10, mean = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
##  [7]  0.4874291  0.7383247  0.5757814 -0.3053884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can save this result to an object to be used later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
norm_values &amp;lt;- rnorm(n = 10, mean = 0, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the result is no longer printed to the screen, but rather is saved to the object &lt;code&gt;norm_values&lt;/code&gt;. To see the result, you could just type &lt;code&gt;norm_values&lt;/code&gt; in the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;errors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Errors&lt;/h2&gt;
&lt;p&gt;Lastly, I want to discuss errors. Errors are going to happen. Even the best programmers encounter errors that they did not anticipate and debugging needs to happen. If you encounter an error I recommend doing the following few things first:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;?function_name&lt;/code&gt; to explore the details of the function. The examples at the bottom of every R help page can be especially helpful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If this does not help, copy and paste the error and search on the internet. Chances are someone else has had this error and has asked how to fix it. This is how I fix most errors I am unable to figure out with the R help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If these two steps still do not help, feel free to email me, but take the time to do steps 1 and 2. If you do email me, please include the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The error message directly given from R&lt;/li&gt;
&lt;li&gt;A reproducible example of the code. The reproducible example is one in which I can run the code directly with no modifications. Without this, it is much more difficult if not impossible for me to help without asking for more information.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://psqf6250.brandonlebeau.org/content/00-getting-started/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/content/00-getting-started/</guid>
      <description>&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Review the &lt;a href=&#34;https://psqf6250.brandonlebeau.org/syllabus/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;syllabus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review the schedule&lt;/li&gt;
&lt;li&gt;Install R (or use the RStudio Cloud link) - &lt;a href=&#34;https://notebooks.hpc.uiowa.edu/psqf62500exw/hub/home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optionally, install RSTudio&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;weekly-videos&#34;&gt;Weekly Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Course Overview
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/LiaaXMzxTOw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://youtu.be/LiaaXMzxTOw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LiaaXMzxTOw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Course Logistics&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=def9f5f8-1c93-4fcc-bbe1-ae21005a4c47&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;captions=false&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://psqf6250.brandonlebeau.org/content/01-week1/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/content/01-week1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This week will introduce you to Rmarkdown documents, markdown syntax, and discussion of installing R/RStudio.&lt;/p&gt;
&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;
&lt;p&gt;After completing this module, students will be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define reproducible research&lt;/li&gt;
&lt;li&gt;Demonstrate code and markdown chunks&lt;/li&gt;
&lt;li&gt;Create a reproducible document template&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;activities&#34;&gt;Activities&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read R for Data Science Textbook - &lt;a href=&#34;https://r4ds.had.co.nz/r-markdown.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chapter 27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optional reading, Reproducible Research in Education - &lt;a href=&#34;https://iro.uiowa.edu/permalink/01IOWA_INST/1dlne5o/alma9984002060102771&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeBeau, Ellison &amp;amp; Aloe, in press&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/basic-syntax/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Basic Markdown Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/extended-syntax/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Extended Markdown Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;weekly-videos&#34;&gt;Weekly Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to Reproducible Research&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=7709a583-bf08-47af-b99a-467dd3d3f166&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Documents (part 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=bc76ea6f-9a08-45db-888c-a2b1f1c8414a&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Documents (part 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=9b38cca1-66d7-4ec6-ad39-ce721fa2ed5d&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lebebr01/psqf_6250/blob/master/Syntax/R/v2/rrdoc.Rmd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raw syntax for reproducible document&lt;/a&gt; (Rmd file)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assignments&#34;&gt;Assignments&lt;/h2&gt;
&lt;p&gt;None this week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2 extensions</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;ggplot2&lt;/em&gt; package has a robust ecosystem of many other packages that extend the functionality of &lt;em&gt;ggplot2&lt;/em&gt;. This week, we are going to explore some of these packages in more detail, highlighting a few packages that give you additional ways to create stunning visualizations. You can see all of the extensions packages in the following &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34;&gt;&lt;em&gt;ggplot2&lt;/em&gt; extension website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to spend some time with the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ggrepel.slowkow.com/&#34;&gt;&lt;em&gt;ggrepel&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggforce.data-imaginist.com/&#34;&gt;&lt;em&gt;ggforce&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/&#34;&gt;&lt;em&gt;patchwork&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also plan to discuss, &lt;a href=&#34;https://gganimate.com/&#34;&gt;&lt;em&gt;gganimate&lt;/em&gt;&lt;/a&gt;, but we are going to come back to this later in the course when talking about interactive graphics.&lt;/p&gt;
&lt;p&gt;All of these packages are on CRAN and you can install with the following command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(c(&amp;quot;ggrepel&amp;quot;, &amp;quot;ggforce&amp;quot;, &amp;quot;patchwork&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;ggrepel&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;ggrepel&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Let’s start by exploring the &lt;em&gt;ggrepel&lt;/em&gt; package. This package is particularly useful when working with text labels and provides some algorithms to help with text label placement automatically. One challenge when placing text labels in a figure is that they often overlap and they also often are placed on top of the data too. &lt;em&gt;ggrepel&lt;/em&gt; helps to solve this problem.&lt;/p&gt;
&lt;p&gt;To show a motivating example, we are going to use data in this section based on penguins. To do this, we first need to install this data package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;palmerpenguins&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data include three different species of penguins originally collected by Dr. Kristen Gorman at the Palmer Station in Antarctica. There are a total of 344 penguins collected from 3 islands in Antarctica and include information about the species, which island, penguin measurements, and the sex of the penguin. More information about the data including artwork about the species and penguin measurements are on this &lt;a href=&#34;https://github.com/allisonhorst/palmerpenguins&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the penguin &lt;a href=&#34;https://github.com/allisonhorst/palmerpenguins/blob/master/man/figures/lter_penguins.png&#34;&gt;species&lt;/a&gt; and what the &lt;a href=&#34;https://github.com/allisonhorst/palmerpenguins/blob/master/man/figures/culmen_depth.png&#34;&gt;measurements mean&lt;/a&gt;, “artwork by &lt;span class=&#34;citation&#34;&gt;@allison_horst&lt;/span&gt;”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(palmerpenguins)
library(ggplot2)

penguins&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 8
##    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
##    &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;
##  1 Adelie  Torgersen           39.1          18.7               181        3750
##  2 Adelie  Torgersen           39.5          17.4               186        3800
##  3 Adelie  Torgersen           40.3          18                 195        3250
##  4 Adelie  Torgersen           NA            NA                  NA          NA
##  5 Adelie  Torgersen           36.7          19.3               193        3450
##  6 Adelie  Torgersen           39.3          20.6               190        3650
##  7 Adelie  Torgersen           38.9          17.8               181        3625
##  8 Adelie  Torgersen           39.2          19.6               195        4675
##  9 Adelie  Torgersen           34.1          18.1               193        3475
## 10 Adelie  Torgersen           42            20.2               190        4250
## # … with 334 more rows, and 2 more variables: sex &amp;lt;fct&amp;gt;, year &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we wanted to explore the bill length and flipper length with a scatter plot. We can do that with &lt;em&gt;ggplot2&lt;/em&gt; using the &lt;code&gt;geom_point()&lt;/code&gt; function. I’m also using the &lt;code&gt;theme_set()&lt;/code&gt; function to set the theme to be &lt;code&gt;theme_bw()&lt;/code&gt; for the remainder of the notebook. I’ve also altered the theme settings by increasing the base font size from 12 to 16 so hopefully it is a bit easier to read the figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme_set(theme_bw(base_size = 16))

ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/length-depth-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Suppose we wished to add the species to this figure. More specifically, we want to add the species information to the points in the figure to label which points below to each penguin species. There are a few ways we could do this, we could do this by color, shape, or both.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/penguin-color-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another potential option would be to add the text labels directly to the figure and not use color. Adding text to a figure is typically done with the &lt;code&gt;geom_text()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(shape = species)) + 
  geom_text(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/text-labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice how the text labels overlap and the word is centered with the data point? This makes the plot unusable. We could fiddle with some settings to the &lt;code&gt;geom_text()&lt;/code&gt; function, but the &lt;em&gt;ggrepel&lt;/em&gt; package helps to fix this issue for us without having to guess and test. The primary difference in the code below is to use &lt;code&gt;geom_text_repel()&lt;/code&gt; instead of &lt;code&gt;geom_text()&lt;/code&gt;. Note, I shrunk the data point slightly in the following figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggrepel)

ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/ggrepel-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This isn’t actually better, but you can see the points were moved away. The issue here is that there are too many text labels to show in a single plot. I’m going to plot only 30 points, 10 from each species.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
set.seed(100)

penguins %&amp;gt;% 
  group_by(species) %&amp;gt;% 
  sample_n(10) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/ggrepel-one-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To see exactly what was done, I’m going to generate the same figure using &lt;code&gt;geom_text()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(100)

penguins %&amp;gt;% 
  group_by(species) %&amp;gt;% 
  sample_n(10) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/text-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;geom_label_repel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;geom_label_repel()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;ggrepel&lt;/em&gt; package only has two functions, the first we saw, &lt;code&gt;geom_text_repel()&lt;/code&gt;. The second is &lt;code&gt;geom_label_repel()&lt;/code&gt;. This works the same as &lt;code&gt;geom_text_repel()&lt;/code&gt;, but creates a box around the text attribute.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(100)

penguins %&amp;gt;% 
  group_by(species) %&amp;gt;% 
  sample_n(10) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_label_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/label-repel-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ggforce&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;em&gt;ggforce&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;ggforce&lt;/em&gt; package has a few powerful additions. One of these helps to solve the problem of too many text labels when using the entire penguin data and is the problem I’d like to start with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/ggrepel-toomany-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Way too many text labels and for this example, there would be too many duplicate text labels. Since there are only three species, other ways of showing the text and groups would be helpful. &lt;em&gt;ggforce&lt;/em&gt; helps with this problem using a series of functions that enclose data within different shapes. These functions are &lt;code&gt;geom_mark_rect()&lt;/code&gt;, &lt;code&gt;geom_mark_circle()&lt;/code&gt;, &lt;code&gt;geom_mark_ellipse()&lt;/code&gt;, and &lt;code&gt;geom_mark_hull()&lt;/code&gt; for rectangle, circle, ellipse, and hulls respectively. For an example, let’s try &lt;code&gt;geom_mark_ellipse()&lt;/code&gt; instead of the text labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggforce)
library(tidyr)

penguins %&amp;gt;%
  drop_na(flipper_length_mm, bill_length_mm) %&amp;gt;%
ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_mark_ellipse(aes(fill = species)) +
  geom_point(size = 3, aes(shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/ggforce-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To take this one step further, we can add a text label to this figure by setting a label aesthetic to &lt;code&gt;geom_mark_ellipse()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  drop_na(flipper_length_mm, bill_length_mm) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_mark_ellipse(aes(fill = species, label = species)) +
  geom_point(size = 3, aes(shape = species)) + 
  scale_x_continuous(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  scale_y_continuous(&amp;quot;Penguin Bill Length (in mm)&amp;quot;, 
                     limits = c(25, 70))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/ggforce-label-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another cool feature of &lt;em&gt;ggforce&lt;/em&gt; is the ability to use something called facet zoom. Essentially, this will create a zoomed in element of a portion of your figure. For example, suppose we wanted to zoom in on the Gentoo penguins to explore their relationship between bill length and flipper length. This creates a picture in picture plotting effect.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species, color = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;) + 
  facet_zoom(x = species == &amp;#39;Gentoo&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/facet-zoom-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;patchwork&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;patchwork&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;patchwork&lt;/em&gt; package is particularly helpful to combine multiple &lt;em&gt;ggplot2&lt;/em&gt; figures into a single figure, but you don’t want to facet. This can be useful to show multiple different relationships of attributes and combine these into a single figure element to include in a document to share.&lt;/p&gt;
&lt;p&gt;To combine figure elements, basic math notation is used, including &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, or &lt;code&gt;|&lt;/code&gt;. There are other operators as well, but these are the primary ones we will explore and will also use parentheses to group plots together.&lt;/p&gt;
&lt;p&gt;First, let’s create a few plots that we may want to combine.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)

p1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork-plots-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2 &amp;lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_depth_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Depth (in mm)&amp;quot;)
p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we will start by using the &lt;code&gt;+&lt;/code&gt; operator to combine plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(patchwork)

p1 + p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork-combine-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the plots are combined directly as generated. In the above example, we’d likely want to only have one legend instead of two. We can do this by modifying the first figure to remove the legend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;) + 
  theme(legend.position = &amp;#39;none&amp;#39;)

p1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/no-legend-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 + p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/combine-nolegend-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;/&lt;/code&gt; operator to stack plots into multiple rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 / p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork-ontop-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator has one issue with it, it tries to keep things in a square grid, similar to how &lt;code&gt;facet_wrap()&lt;/code&gt; works. For more advanced layout, the &lt;code&gt;|&lt;/code&gt; operator separates columns whereas we saw above that the &lt;code&gt;/&lt;/code&gt; operator will stack plots. Combined with parentheses, you can get more advanced layouts. First, let’s add one more figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 &amp;lt;- ggplot(drop_na(penguins, sex), 
             aes(x = sex, y = body_mass_g)) + 
  geom_violin(aes(fill = species), draw_quantiles = c(0.1, .5, 0.9)) + 
  xlab(&amp;quot;Penguin Sex&amp;quot;) + 
  ylab(&amp;quot;Penguin Body Mass (in g)&amp;quot;) + 
  theme(legend.position = &amp;#39;none&amp;#39;)

p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patch-box-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 | (p1 / p2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork-combined-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note, without parentheses, the figures may not turn out as you want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 | p2 / p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork-error-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(p1 + p2) / p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/ggplot2_extensions_files/figure-html/patchwork-correct-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://psqf6250.brandonlebeau.org/content/02-week2/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/content/02-week2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This week will explore data visualization using ggplot2 in R.&lt;/p&gt;
&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;
&lt;p&gt;After completing this module, students will be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classify different figure types by their usage&lt;/li&gt;
&lt;li&gt;Interpret different figure types&lt;/li&gt;
&lt;li&gt;Evaluate if the figure is appropriate for a given research question&lt;/li&gt;
&lt;li&gt;Create new figures&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;activities&#34;&gt;Activities&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read R for Data Science Textbook - &lt;a href=&#34;https://r4ds.had.co.nz/introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chapters 1 &amp;ndash; 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;weekly-videos&#34;&gt;Weekly Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to Graphics with R&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=7b28ead3-bf45-4dc5-9a53-b3136b352bb1&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Adding Aesthetics&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=e7e34813-e60f-4565-a9bd-b524aad6667a&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;More geoms&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1742de3c-1324-4807-88cf-d482da9f51a4&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Plot Customization&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3a7f5303-6a16-4413-887b-7270684cb598&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;R Basics&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=5bb9fae9-197f-4ac0-b42f-5f79a4d902a3&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;r-syntax&#34;&gt;R Syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graphics Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://psqf6250.brandonlebeau.org/rcode/r-basics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assignments&#34;&gt;Assignments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uiowa.instructure.com/courses/183068/quizzes/307658&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quiz 1&lt;/a&gt; - Due January 30th, 2022&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Graphics Tips</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/graphics-tips/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/graphics-tips/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;div id=&#34;graphics-basics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Graphics Basics&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;What is the story you want to tell?&lt;/li&gt;
&lt;li&gt;Is the figure misleading?&lt;/li&gt;
&lt;li&gt;Could other figure types be more effective?&lt;/li&gt;
&lt;li&gt;Does the figure show variation?&lt;/li&gt;
&lt;li&gt;Is the figure self-contained?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;misleading-graphs&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Misleading Graphs&lt;/h1&gt;
&lt;p&gt;Data visualization is hard and it is easy to mislead, intentionally or unintentionally.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/mislead-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;better-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Better Approach&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/better-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Axis Labels&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Axis labels are often placed on the x-axis, but for long labels this can be less effective.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/Axis-labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Axis Labels 2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Often, the labels are rotated. Works, but is ugly and difficult to read in my opinion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/labels-rotate-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Axis Labels 3&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The solution, flip x and y axis using &lt;code&gt;coord_flip()&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/flip-axes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;showing-variation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Showing Variation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Figures depicting statistics, should show variation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/mean-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;showing-variation-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Showing Variation 2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There are multiple values for each major category, the mean is useful, but simplifies too much and could mislead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/2021/graphics-tips_files/figure-html/violin-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://psqf6250.brandonlebeau.org/content/03-week3/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/content/03-week3/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The following week the course will continue discussing data visualization using ggplot2 by exploring a handful of useful extension packages that allows new functionality to be implemented. In addition to the new extension packages, some graphical creation tips will be shared.&lt;/p&gt;
&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;
&lt;p&gt;After completing this module, students will be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engage with the ggplot2 extension packages&lt;/li&gt;
&lt;li&gt;Create new figures using the ggplot2 extension packages&lt;/li&gt;
&lt;li&gt;Evaluate and implement appropriate data visualization standards&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;activities&#34;&gt;Activities&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fundamentals of Data Visualization - &lt;a href=&#34;https://clauswilke.com/dataviz/proportional-ink.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chapters 17 &amp;ndash; 26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;weekly-videos&#34;&gt;Weekly Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ggrepel&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=0743a168-dd6e-4f9a-aa28-ac3000188697&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;ggforce&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=97eb6cbd-ff10-4905-97f6-ac30001ca5a7&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;patchwork&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=9cd7cdaf-dc31-4d60-9b9d-ac30001fed89&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;Graphics Tips&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://uicapture.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=8acace65-abcc-4c5a-ad86-ac330112ba2b&amp;autoplay=false&amp;offerviewer=true&amp;showtitle=true&amp;showbrand=false&amp;start=0&amp;interactivity=all&#34; height=&#34;405&#34; width=&#34;720&#34; style=&#34;border: 1px solid #464646;&#34; allowfullscreen allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;r-syntax&#34;&gt;R Syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot2 extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graphics Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assignments&#34;&gt;Assignments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Quiz 2 - To come &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>R Scripts</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/r_scripts/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/r_scripts/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;I want to talk very briefly about R scripts. You may have been using these already within your workflow for this course, but these are best practice instead of simply running code in the console. Creating R scripts are a crucial step to ensure the data analyses are reproducible, the script will act as a log of all the things that are done to the data to go from data import to any outputs (model results, tables, figures, etc.).&lt;/p&gt;
&lt;p&gt;To create an R script with RStudio, the short cut is CTRL/CMD + SHIFT + N. You can also create a new script by going to File &amp;gt; New File &amp;gt; R Script. Both of these commands will open up a blank script window.&lt;/p&gt;
&lt;p&gt;In this script window, I would recommend loading any R packages first at the top of the file. Then proceed with the analysis. Commands can be sent to the console using CRTL/CMD + ENTER. By default RStudio will run any commands that span more than one line with a single CRTL/CMD + ENTER call.&lt;/p&gt;
&lt;p&gt;For more details about R Scripts, the R for Data Science text has detail with screenshots in &lt;a href=&#34;http://r4ds.had.co.nz/workflow-scripts.html&#34;&gt;Chapter 6&lt;/a&gt;. I recommend trying to create a simple script and sending these commands from the script to the console to be run with R.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quiz 1</title>
      <link>https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz1/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz1/</guid>
      <description>&lt;p&gt;Quiz 1 can be taken on ICON, due January 30th, 2021. The quiz covers content from &lt;a href=&#34;https://psqf6250.brandonlebeau.org/content/01-week1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Week 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://uiowa.instructure.com/courses/183068/quizzes/307658&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quiz 1 Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
