[{"authors":["admin"],"categories":null,"content":"\nThis course aims to give students an in depth exploration of using R for data science and statistical analysis. The course is hands on where students will spend time practicing what they learn with real data to explore real problems. Students will gain experience cleaning, manipulating, visualizing, describing, exploring, and analyzing data from various perspectives. Students will also explore the benefits of reproducible analyses using R markdown documents to weave statistical code with text. Additional topics such as version control, markdown, and bootstrap will be discussed. This course will not teach you exactly what to do for every analysis, rather will attempt to give you tools to accomplish general data tasks and practice answering questions with data.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://psqf6250.brandonlebeau.org/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"This course aims to give students an in depth exploration of using R for data science and statistical analysis. The course is hands on where students will spend time practicing what they learn with real data to explore real problems.","tags":null,"title":"","type":"authors"},{"authors":["brandon"],"categories":null,"content":"\nI\u0026rsquo;m interested in computational methods, longitudinal data, and statistical software development with R. You can see more about my interests on my website: https://brandonlebeau.org/.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"a6b366d06474d85d9f788b8d18e8310d","permalink":"https://psqf6250.brandonlebeau.org/authors/brandon/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/brandon/","section":"authors","summary":"I\u0026rsquo;m interested in computational methods, longitudinal data, and statistical software development with R. You can see more about my interests on my website: https://brandonlebeau.org/.","tags":null,"title":"","type":"authors"},{"authors":null,"categories":null,"content":"Links directly to R code topics\n Reproducible Document Graphics Syntax R Basics ggplot2 Extensions Graphics Tips Data Manipulation R Scripts Exploratory Data Analysis R Project - RStudio Data Import Data Restructuring Joining Data Factors Working with Character Strings Model Introduction Building on Linear Models Advanced Modeling Topics Model Assumptions Miscellaneous Modeling Topics Reproducible Tables Interactive Graphics User Created Functions  ","date":1642032000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1642032000,"objectID":"2b0562cceadd5b9e8843464c13310145","permalink":"https://psqf6250.brandonlebeau.org/rcode/","publishdate":"2022-01-13T00:00:00Z","relpermalink":"/rcode/","section":"rcode","summary":"R Course Syntax","tags":null,"title":"R Syntax","type":"book"},{"authors":null,"categories":null,"content":"A list of the data used within the course.\n UFO Data EDU01 LongitudinalEx ECLS_6250  Data Description   ECLS_6250_school  Data Description    ","date":1613606400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1613606400,"objectID":"77c2d2ba0979ac9954ceb502de85c1ce","permalink":"https://psqf6250.brandonlebeau.org/data/","publishdate":"2021-02-18T00:00:00Z","relpermalink":"/data/","section":"data","summary":"Data for the course","tags":null,"title":"Data","type":"book"},{"authors":null,"categories":null,"content":"The course content will be organized by weeks. Each week will contain some text to:\n discuss the goals of the week the content to be covered relevant R syntax/notebook files pre-recorded videos.  Each week may also contain some information about assignments and links directly to those.\n","date":1611532800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611532800,"objectID":"d5be68294f12f9cfecf81ad87009adc6","permalink":"https://psqf6250.brandonlebeau.org/content/","publishdate":"2021-01-25T00:00:00Z","relpermalink":"/content/","section":"content","summary":"Course Content","tags":null,"title":"Content","type":"book"},{"authors":null,"categories":null,"content":"Here you can view all of the course assignments for the semester. This will include the hands on assignments and the quizzes. The quizzes will provide a link to ICON to complete.\n","date":1610064000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610064000,"objectID":"5d370553e45c580541e007200292c8d8","permalink":"https://psqf6250.brandonlebeau.org/assignments/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/assignments/","section":"assignments","summary":"Course Requirements","tags":null,"title":"Course Requirements","type":"book"},{"authors":null,"categories":null,"content":"The course schedule for the semester. There will be a single page for each week of the course. These weeks will include all materials, highlight the course objectives for that week, include pre-recorded video lectures, include links to any assignments/quizzes that can be completed, lecture notes, and other external readings.\nOverview of Weekly Content  Week 1 - Rmarkdown / Reproducible Documents Week 2 - Graphics with ggplot2 Week 3 - Graphics with ggplot2 extensions  ","date":1610064000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610064000,"objectID":"ee8dfa775d2ca48042bf50fe0819e70c","permalink":"https://psqf6250.brandonlebeau.org/schedule/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/schedule/","section":"schedule","summary":"Course schedule","tags":null,"title":"Schedule","type":"book"},{"authors":null,"categories":null,"content":"This page contains the syllabus for the course. This syllabus is an attempt early in the semester to plan for the course. This syllabus is subject to change at the Instructors discretion.\nCourse Information PSQF 6250: Computer Packages for Statistical Analysis - Spring 2022\nInstructor Information  Brandon LeBeau, Ph.D. E-mail: brandon-lebeau at uiowa.edu Virtual Office Hours (Zoom): Thurs 1 pm to 2 pm or by appointment  See ICON for office hours zoom link   Department: Psychological and Quantitative Foundations, 361 LC  DEO: Dr. Foley Nicpon, 361 LC}    Course Quote Data does not give up their secrets easily. They must be tortured to confess. \u0026ndash; Jeff Hooper, Bell Labs\nCourse Description This course aims to give students an in depth exploration of using R for data science and statistical analysis. The course is hands on where students will spend time practicing what they learn with real data to explore real problems. Students will gain experience cleaning, manipulating, visualizing, describing, exploring, and analyzing data from various perspectives. Students will also explore the benefits of reproducible analyses using R markdown documents to weave statistical code with text. Additional topics such as version control, markdown, and Monte Carlo simulation will be discussed. This course will not teach you exactly what to do for every analysis, rather will attempt to give you tools to accomplish general data tasks and practice answering questions with data.\nCourse Objectives By the end of the course, students should be comfortable doing the following with R:\n data visualization data manipulation data joining descriptive analysis fitting linear models reproducible data analysis  Textbook No required textbook for purchase. There will be numerous online resources that will be used for the course. These are listed below and are posted on the ICON site. Note: You can click the links below and it will take you directly to the source on ICON.\nR  R for Data Science R Markdown: The Definitive Guide  Markdown  Markdown Cheatsheet R Markdown Cheatsheet  git  git - the simple guide or git cheatsheet  Course Requirements  Online Quizzes (50 pts): Online quizzes through ICON will be given roughly every week. These will test basic knowledge of statistical programs covered in the course. Each quiz will be worth 5 points with 10 total quizzes. Quizzes will generally be due on Sunday evenings. Assignments (50 pts): Homework assignments will be used to give hands on experience with the software. These homework assignments will give you an opportunity to answer questions with data, interpret results, and receive feedback on them. Each assignment will be worth 20 points with 5 total assignments. Students are able to work in groups of up to 3 for the course assignments. If students work in groups, all students will receive the same grade. Homework, including the R source code and written responses, will be submitted electronically on ICON. Final Project Proposal (5 pts): This is a short, one page, proposal for the type of project you hope to complete. The goal of the final project proposal is to give you a chance to think about the final project earlier in the semester to get started on it. More details on what is intended in this proposal will be shared on the course website. Final Project (25 pts): The final project gives you an opportunity to use data you are interested in to answer a question of interest. You will be expected to use descriptive statistics, fit a statistical model, and create at least one figure. More specific details will be shared on the course website.  Grades   Grading: Final grades will be based on the following weighting scheme:\n Quizzes: 50 points (5 points each \u0026ndash; 10 quizzes) Assignments: 50 points (10 points each \u0026ndash; 5 assignments) Final Project Proposal: 5 pts Final Project: 25 pts    Percentage Breakdown: Guidelines are given below, plus and minus grades will be given as well. If you wish to be graded on an S/U basis, please send me an email before the last day of classes (May 8, 2022).\n  A: 90% or better\n  B: 80% up to 90%\n  C: 70% up to 80%\n  D: 60% up to 70%\n  Course and University Policies  Absences: Absences happen. Therefore, I ask you to be as transparent as possible with me. I promise to be compassionate and understanding. If at any point in the semester you are having difficulties, please reach out to me and I will do my best to be accommodating and provide support, which could include an extension on course deadlines as necessary. Announcements and Communication: Any announcements regarding the course will be communicated via e-mail so please check it daily. Course materials will be posted to ICON. Go to icon.uiowa.edu for access to the ICON site. Adaptations and Modifications: Please inform me during the first two weeks if you require special adaptations or modifications to any assignment or due dates because of special circumstances such as learning disabilities, religious observances, or other appropriate needs. Contesting a Grade: To contest a grade, please send me an e-mail detailing your reason within 48 hours of receiving the grade. This allows both of us time to think, reflect, and discuss the matter without taking class time from other students. When contesting a grade, provide a copy of the graded assignment. Academic Misconduct: Plagiarism and cheating may result in grade reduction and/or serious penalties. Unless you are otherwise instructed, your work should be entirely your own. Please take care in writing your final project. You should always be writing in your own words, citing others' ideas, and quoting text as appropriate. This link provides the College of Education policy on student academic misconduct (plagiarism and cheating) https://education.uiowa.edu/coe-policies/student-academic-misconduct. Free Speech and Expression: The University of Iowa supports and upholds the First Amendment protection of freedom of speech and the principles of academic and artistic freedom. We are committed to open inquiry, vigorous debate, and creative expression inside and outside of the classroom. Visit the Free Speech at Iowa website for more information on the university’s policies on free speech and academic freedom. Accommodations for Students with Disabilities: The University is committed to providing an educational experience that is accessible to all students. If a student has a diagnosed disability or other disabling condition that may impact the student’s ability to complete the course requirements as stated in the syllabus, the student may seek accommodations through Student Disability Services (SDS). SDS is responsible for making Letters of Accommodation (LOA) available to the student. The student must provide a LOA to the instructor as early in the semester as possible, but requests not made at least two weeks prior to the scheduled activity for which an accommodation is sought may not be accommodated. The LOA will specify what reasonable course accommodations the student is eligible for and those the instructor should provide. Additional information can be found on the SDS website. Absences for Religious Holy Days: The University is prepared to make reasonable accommodations for students whose religious holy days coincide with their classroom assignments, test schedules, and classroom attendance expectations. Students must notify their instructors in writing of any such Religious Holy Day conflicts or absences within the first few days of the semester or session, and no later than the third week of the semester. If the conflict or absence will occur within the first three weeks of the semester, the student should notify the instructor as soon as possible. See Operations Manual 8.2 Absences for Religious Holy Days for additional information. Classroom Expectations: Students are expected to comply with University policies regarding appropriate classroom behavior as outlined in the Code of Student Life. While students have the right to express themselves and participate freely in class, it is expected that students will behave with the same level of courtesy and respect in the virtual class setting (whether asynchronous or synchronous) as they would in an in-person classroom. Failure to follow behavior expectations as outlined in the Code of Student Life may be addressed by the instructor and may also result in discipline under the Code of Student Life policies governing E.5 Disruptive Behavior or E.6 Failure to Comply with University Directive. Non-Discrimination Statement: The University of Iowa prohibits discrimination in employment, educational programs, and activities on the basis of race, creed, color, religion, national origin, age, sex, pregnancy, disability, genetic information, status as a U.S. veteran, service in the U.S. military, sexual orientation, gender identity, associational preferences, or any other classification that deprives the person of consideration as an individual. The university also affirms its commitment to providing equal opportunities and equal access to university facilities. For additional information on nondiscrimination policies, contact the Director, Office of Institutional Equity, the University of Iowa, 202 Jessup Hall, Iowa City, IA 52242-1316, 319-335-0705, oie-ui@uiowa.edu. Students may share their pronouns and chosen/preferred names in MyUI, which is accessible to instructors and advisors. Sexual Harassment/Sexual Misconduct and Supportive Measures: The University of Iowa prohibits all forms of sexual harassment, sexual misconduct, and related retaliation. The Policy on Sexual Harassment and Sexual Misconduct governs actions by students, faculty, staff and visitors. Incidents of sexual harassment or sexual misconduct can be reported to the Title IX and Gender Equity Office or to the Department of Public Safety. Students impacted by sexual harassment or sexual misconduct may be eligible for academic supportive measures and can learn more by contacting the Title IX and Gender Equity Office. Information about confidential resources can be found here. Watch the video for an explanation of these resources. Mental Health: Students are encouraged to be mindful of their mental health and seek help as a preventive measure or if feeling overwhelmed and/or struggling to meet course expectations. Students are encouraged to talk to their instructor for assistance with specific class-related concerns. For additional support and counseling, students are encouraged to contact University Counseling Service (UCS). Information about UCS, including resources and how to schedule an appointment, can be found at http://counseling.uiowa.edu. Find out more about UI mental health services at: http://mentalhealth.uiowa.edu. Basic Needs and Support for Students: Student Care \u0026amp; Assistance provides assistance to University of Iowa students experiencing a variety of crisis and emergency situations, including but not limited to medical issues, family emergencies, unexpected challenges, and sourcing basic needs such as food and shelter. More information on the resources related to basic needs can be found at: https://basicneeds.uiowa.edu/resources/. Students are encouraged to contact Student Care \u0026amp; Assistance in the Office of the Dean of Students (Room 135 IMU, dos-assistance@uiowa.edu or 319-335-1162) for support and assistance with resources.  ","date":1610064000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610064000,"objectID":"5538b9800f06ab7b29edaa22ab7e63cb","permalink":"https://psqf6250.brandonlebeau.org/syllabus/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/syllabus/","section":"syllabus","summary":"Course syllabus","tags":null,"title":"Syllabus","type":"book"},{"authors":null,"categories":null,"content":"Note: No penalty for late submissions, all assignments due by May 8th, 2022.\n Assignment 1 - Due around February 13th. Assignment 2 - Due around February 28th. Assignment 3 - Due around March 27th. Assignment 4 - Due around April 10th.  ","date":1610064000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610064000,"objectID":"148b0563112c2a9006e85ec08153b0ce","permalink":"https://psqf6250.brandonlebeau.org/assignments/assignment/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/assignments/assignment/","section":"assignments","summary":"Course Assignments","tags":null,"title":"Assignments","type":"book"},{"authors":null,"categories":null,"content":"Below are the course quizzes.\n Quiz 1 - Due January 30th Quiz 2 - Due February 6th Quiz 3 - Due February 20th Quiz 4 - Due March 13th Quiz 5 - Due March 28th Quiz 6 - Due April 10th  ","date":1610064000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610064000,"objectID":"9ee2f1578158bc73334dba690602f1a2","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/assignments/quizzes/","section":"assignments","summary":"Course Quizzes","tags":null,"title":"Quizzes","type":"book"},{"authors":null,"categories":null,"content":"The course project are detailed in the following pages, one for the project proposal and another for the final project requirements.\n Project Proposal Course Project  ","date":1610064000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610064000,"objectID":"99f302b9e9cee92740f853ade9eda986","permalink":"https://psqf6250.brandonlebeau.org/assignments/project/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/assignments/project/","section":"assignments","summary":"Course Project","tags":null,"title":"Project","type":"book"},{"authors":null,"categories":null,"content":"   We are going to start by exploring graphics with R using the midwest data. To access this data, run the following commands:\ninstall.packages(\u0026quot;tidyverse\u0026quot;) library(tidyverse) Suppose we were interested in exploring the question: How does population density influence the percentage of the population with at least a college degree? Let’s explore these data closer.\nmidwest ## # A tibble: 437 × 28 ## PID county state area poptotal popdensity popwhite popblack popamerindian ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 561 ADAMS IL 0.052 66090 1271. 63917 1702 98 ## 2 562 ALEXAN… IL 0.014 10626 759 7054 3496 19 ## 3 563 BOND IL 0.022 14991 681. 14477 429 35 ## 4 564 BOONE IL 0.017 30806 1812. 29344 127 46 ## 5 565 BROWN IL 0.018 5836 324. 5264 547 14 ## 6 566 BUREAU IL 0.05 35688 714. 35157 50 65 ## 7 567 CALHOUN IL 0.017 5322 313. 5298 1 8 ## 8 568 CARROLL IL 0.027 16805 622. 16519 111 30 ## 9 569 CASS IL 0.024 13437 560. 13384 16 8 ## 10 570 CHAMPA… IL 0.058 173025 2983. 146506 16559 331 ## # … with 427 more rows, and 19 more variables: popasian \u0026lt;int\u0026gt;, popother \u0026lt;int\u0026gt;, ## # percwhite \u0026lt;dbl\u0026gt;, percblack \u0026lt;dbl\u0026gt;, percamerindan \u0026lt;dbl\u0026gt;, percasian \u0026lt;dbl\u0026gt;, ## # percother \u0026lt;dbl\u0026gt;, popadults \u0026lt;int\u0026gt;, perchsd \u0026lt;dbl\u0026gt;, percollege \u0026lt;dbl\u0026gt;, ## # percprof \u0026lt;dbl\u0026gt;, poppovertyknown \u0026lt;int\u0026gt;, percpovertyknown \u0026lt;dbl\u0026gt;, ## # percbelowpoverty \u0026lt;dbl\u0026gt;, percchildbelowpovert \u0026lt;dbl\u0026gt;, percadultpoverty \u0026lt;dbl\u0026gt;, ## # percelderlypoverty \u0026lt;dbl\u0026gt;, inmetro \u0026lt;int\u0026gt;, category \u0026lt;chr\u0026gt; This will bring up the first 10 rows of the data (hiding the additional 8,592) rows. A first common step to explore our research question is to plot the data. To do this we are going to use the R package, ggplot2, which was installed when running the install.packages command above. You can explore the midwest data by calling up the help file as well with ?midwest.\nCreate a ggplot To plot these two variables from the midwest data, we will use the function ggplot and geom_point to add a layer of points. We will treat popdensity as the x variable and percollege as the y variable.\nggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege)) Examples Try plotting popdensity by state. Try plotting county by state. Does this plot work? Bonus: Try just using the ggplot(data = midwest) from above. What do you get? Does this make sense?  Note: You should be able to modify the structure of the code above to do this.\n  Add Aesthetics Aesthetics are a way to explore more complex interactions within the data. Particularly, from the above example, lets add in the state variable to the plot via an aesthetic.\nggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege, color = state)) As you can see, we simply colored the points by the state they belong in. Does there appear to be a trend?\nExamples Using the same aesthetic structure as above, instead of using colors, make the shape of the points different for each state. Instead of color, use alpha instead. What does this do to the plot?    Global Aesthetics Above, we specified a variable to an aesthetic, which is a common use of aesthetics. However, the aesthetics can also be assigned globally. Here are two examples using the first scatterplot created.\nggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege), color = \u0026#39;pink\u0026#39;) ggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege), shape = 15) These two plots changed the aesthetics for all of the points. Notice, the suttle difference between the code for these plots and that for the plot above. The placement of the aesthetic is crucial, if it is within the parentheses for aes() then it should be assigned a variable. If it is outside, as in the last two examples, it will define the aesthetic for all the data.\nExamples Try the following command: colors(). This will print a vector of all the color names within R, try a few to find your favorites. What happens if you use the following code:  ggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege, color = \u0026#39;green\u0026#39;)) What is the problem?\n  Facets Instead of defining an aesthetic to change the color or shape of points by a third variable, we can also plot each groups data in a single plot and combine them. The process is easy with ggplot2 by using facets.\nggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege)) + facet_grid(. ~ state) You can also use facet_wrap.\nggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege)) + facet_wrap(~ state) Examples Can you facet with a continuous variable? Try it!    Geoms ggplot2 uses a grammar of graphics which makes it easy to switch different plot types (called geoms) once you are comfortable with the basic syntax. For example, how does the following plot differ from the scatterplot first generated above? What is similar?\nggplot(data = midwest) + geom_smooth(mapping = aes(x = popdensity, y = percollege)) We can also do this plot by states\nggplot(data = midwest) + geom_smooth(mapping = aes(x = popdensity, y = percollege, linetype = state), se = FALSE) What about the code above gave me the different lines for each state? Note, I also removed the standard error shading from the plot as well.\nExamples It is possible to combine geoms, which we will do next, but try it first. Try to recreate this plot.     Combining multiple geoms Combining more than one geom into a single plot is relatively straightforward, but a few considerations are important. Essentially to do the task, we just simply need to combine the two geoms we have used:\nggplot(data = midwest) + geom_point(aes(x = popdensity, y = percollege, color = state)) + geom_smooth(mapping = aes(x = popdensity, y = percollege, color = state), se = FALSE) A couple points about combining geoms, first, the order matters. In the above example, we called geom_point first, then geom_smooth. When plotting these data, the points will then be plotted first followed by the lines. Try flipping the order of the two geoms to see how the plot differs.\nWe can also simplify this code to not duplicate typing:\nggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + geom_smooth(se = FALSE) Examples Can you recreate the following figure?     Other geom examples There are many other geoms available to use. To see them all, visit https://ggplot2.tidyverse.org/reference/index.html which gives examples of all the possibilities. This is a handy resource that I keep going back to.\nGeoms for single variables The introduction to plotting has been with two variables, but lets take a step back and focus on one variable with a bar chart.\nggplot(data = midwest, mapping = aes(x = state)) + geom_bar() You can also easily add aesthetics this base plot as shown before.\nggplot(data = midwest, mapping = aes(x = state)) + geom_bar(aes(fill = factor(inmetro))) A few additions can help interpretation of this plot:\nggplot(data = midwest, mapping = aes(x = state)) + geom_bar(aes(fill = factor(inmetro)), position = \u0026#39;fill\u0026#39;) ggplot(data = midwest, mapping = aes(x = state)) + geom_bar(aes(fill = factor(inmetro)), position = \u0026#39;dodge\u0026#39;) It is also possible to do a histrogram of a quantitative variable:\nggplot(data = midwest, mapping = aes(x = popdensity)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. You can adjust the binwidth directly:\nggplot(data = midwest, mapping = aes(x = popdensity)) + geom_histogram(binwidth = 1000)  Examples With more than two groups, histograms are difficult to interpret due to overlap. Instead, use the geom_density to create a density plot for popdensity for each state. The final plot should look similar to this:  Using geom_boxplot, create boxplots with popdensity as the y variable and state as the x variable. Bonus: facet this plot by the variable inmetro.     Plot Customization There are many many ways to adjust the look of the plot, I will discuss a few that are common.\nChange axes Axes are something that are commonly altered, particularly to give them a good name and also to alter the values shown on the axes. These are generally done with scale_x_* and scale_y_* where * is a filler based on the type of variable on the axes.\nFor example:\nggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + scale_x_continuous(\u0026quot;Population Density\u0026quot;) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) To change the legend title, the scale_color_discrete command can be used to adjust the color aesthetic and the variable is discrete.\nggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + scale_x_continuous(\u0026quot;Population Density\u0026quot;) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) + scale_color_discrete(\u0026quot;State\u0026quot;) we can also alter the breaks showing on the x-axis.\nggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + scale_x_continuous(\u0026quot;Population Density\u0026quot;, breaks = seq(0, 80000, 20000)) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) + scale_color_discrete(\u0026quot;State\u0026quot;)   Zoom in on plot You’ll notice that there are outliers in this scatterplot due to larger population density values for some counties. It may be of interest to zoom in on the plot. The plot can be zoomed in by using the coord_cartesian command as follows.\nggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + scale_x_continuous(\u0026quot;Population Density\u0026quot;) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) + scale_color_discrete(\u0026quot;State\u0026quot;) + coord_cartesian(xlim = c(0, 15000)) Note: This can also be achieved using the xlim argument to scale_x_continuous above, however this will cause some points to not be plotted. In this case it would not be a huge deal, however, if we plotted the smooth lines from before you can see the difference.\nggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + geom_smooth(se = FALSE) + scale_x_continuous(\u0026quot;Population Density\u0026quot;) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) + scale_color_discrete(\u0026quot;State\u0026quot;) + coord_cartesian(xlim = c(0, 15000)) ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) + geom_point() + geom_smooth(se = FALSE) + scale_x_continuous(\u0026quot;Population Density\u0026quot;, limits = c(0, 15000)) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) + scale_color_discrete(\u0026quot;State\u0026quot;) ## Warning: Removed 16 rows containing non-finite values (stat_smooth). ## Warning: Removed 16 rows containing missing values (geom_point).  ","date":1612137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612137600,"objectID":"5cd35ce41d8b7dd43e2b3a7c1a480ee0","permalink":"https://psqf6250.brandonlebeau.org/rcode/graphics/","publishdate":"2021-02-01T00:00:00Z","relpermalink":"/rcode/graphics/","section":"rcode","summary":"using ggplot2","tags":null,"title":"Graphics","type":"book"},{"authors":null,"categories":null,"content":"   In an attempt to get you “doing things” in R quickly, I’ve omitted a lot of discussion surrounding internal R workings. R is an object oriented language, this is much different than many other software languages.\nR works as a calculator R can be used as a calculator to do any type of addition, subtraction, multiplication, or division (among other things).\n1 + 2 - 3 ## [1] 0 5 * 7 ## [1] 35 2/1 ## [1] 2 sqrt(4) ## [1] 2 2^2 ## [1] 4 Being an object oriented system, values can directly saved within an object to be used later. As an example:\nx \u0026lt;- 1 + 3 x ## [1] 4 This can then be used later in other calculations:\nx * 3 ## [1] 12 This simplistic example is a bit too simple to show all the benefits of this approach, but will become more apparent when we start reading in data and doing more complicated data munging type tasks.\nNaming conventions This is a topic in which you will not get a single answer, but rather a different answer for everyone you ask. I prefer something called snake_case using underscores to separate words in an object. Others use titleCase as a way to distinguish words others yet use period.to.separate words in object names.\nThe most important thing is to be consistent. Pick a convention that works for you and stick with it through out. Avoiding this Mixed.TypeOf_conventions at all costs.\n  R is case sensitive This can cause problems and make debugging a bit more difficult. Be careful with typos and with case. Here is an example:\ncase_sensitive \u0026lt;- 10 Case_sensitive ## Error in eval(expr, envir, enclos) : object \u0026#39;Case_sensitive\u0026#39; not found  Functions We have already been using functions when working through creating graphics with R. A function consists of at least two parts, the function name and the arguments as follows: function_name(arg1 = num, arg2 = num). The arguments are always inside of parentheses, take on some value, and are always named. To call a function, use the function_name followed by parentheses with the arguments inside the parentheses. For example, using the rnorm function to generate values from a random normal distribution:\nset.seed(1) rnorm(n = 10, mean = 0, sd = 1) ## [1] -0.6264538 0.1836433 -0.8356286 1.5952808 0.3295078 -0.8204684 ## [7] 0.4874291 0.7383247 0.5757814 -0.3053884 Notice I called the arguments by name directly, this is good practice, however, this code will generate the same values (the values are the same because I’m using set.seed here):\nset.seed(1) rnorm(10, 0, 1) ## [1] -0.6264538 0.1836433 -0.8356286 1.5952808 0.3295078 -0.8204684 ## [7] 0.4874291 0.7383247 0.5757814 -0.3053884 The key when arguments are not called via their names is the order of the arguments. Look at ?rnorm to see that the first three arguments are indeed n, mean, and sd. When you name arguments, they can be specified in any order (generally bad practice).\nset.seed(1) rnorm(sd = 1, n = 10, mean = 0) ## [1] -0.6264538 0.1836433 -0.8356286 1.5952808 0.3295078 -0.8204684 ## [7] 0.4874291 0.7383247 0.5757814 -0.3053884 You can save this result to an object to be used later.\nset.seed(1) norm_values \u0026lt;- rnorm(n = 10, mean = 0, sd = 1) Notice the result is no longer printed to the screen, but rather is saved to the object norm_values. To see the result, you could just type norm_values in the console.\n Errors Lastly, I want to discuss errors. Errors are going to happen. Even the best programmers encounter errors that they did not anticipate and debugging needs to happen. If you encounter an error I recommend doing the following few things first:\nUse ?function_name to explore the details of the function. The examples at the bottom of every R help page can be especially helpful.\n If this does not help, copy and paste the error and search on the internet. Chances are someone else has had this error and has asked how to fix it. This is how I fix most errors I am unable to figure out with the R help.\n If these two steps still do not help, feel free to email me, but take the time to do steps 1 and 2. If you do email me, please include the following things:\n The error message directly given from R A reproducible example of the code. The reproducible example is one in which I can run the code directly with no modifications. Without this, it is much more difficult if not impossible for me to help without asking for more information.    ","date":1612137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612137600,"objectID":"98d43ea826bd8e4faa445fd73e95bb1b","permalink":"https://psqf6250.brandonlebeau.org/rcode/r-basics/","publishdate":"2021-02-01T00:00:00Z","relpermalink":"/rcode/r-basics/","section":"rcode","summary":"R Basics","tags":null,"title":"R Basics","type":"book"},{"authors":null,"categories":null,"content":"Getting Started  Review the syllabus Review the schedule Install R (or use the RStudio Cloud link) - RStudio Cloud Optionally, install RSTudio  Weekly Videos  Course Overview    Course Logistics   ","date":1611532800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611532800,"objectID":"1573444049fbe3c4964b394aa4c5174c","permalink":"https://psqf6250.brandonlebeau.org/content/00-getting-started/","publishdate":"2021-01-25T00:00:00Z","relpermalink":"/content/00-getting-started/","section":"content","summary":"Getting Started","tags":null,"title":"Welcome","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will introduce you to Rmarkdown documents, markdown syntax, and discussion of installing R/RStudio.\nObjectives After completing this module, students will be able to:\n Define reproducible research Demonstrate code and markdown chunks Create a reproducible document template  Activities  Read R for Data Science Textbook - chapter 27 Optional reading, Reproducible Research in Education - LeBeau, Ellison \u0026amp; Aloe, in press Basic Markdown Guide Extended Markdown Syntax  Weekly Videos  Introduction to Reproducible Research    Dynamic Documents (part 1)    Dynamic Documents (part 2)   Syntax  Raw syntax for reproducible document (Rmd file)  Assignments None this week.\n","date":1611532800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611532800,"objectID":"d1fbf25a3d7006b7a626817f4e8207b2","permalink":"https://psqf6250.brandonlebeau.org/content/01-week1/","publishdate":"2021-01-25T00:00:00Z","relpermalink":"/content/01-week1/","section":"content","summary":"Reproducible Research","tags":null,"title":"Week 1","type":"book"},{"authors":null,"categories":null,"content":"   The ggplot2 package has a robust ecosystem of many other packages that extend the functionality of ggplot2. This week, we are going to explore some of these packages in more detail, highlighting a few packages that give you additional ways to create stunning visualizations. You can see all of the extensions packages in the following ggplot2 extension website.\nWe are going to spend some time with the following packages:\n ggrepel ggforce patchwork  I also plan to discuss, gganimate, but we are going to come back to this later in the course when talking about interactive graphics.\nAll of these packages are on CRAN and you can install with the following command:\ninstall.packages(c(\u0026quot;ggrepel\u0026quot;, \u0026quot;ggforce\u0026quot;, \u0026quot;patchwork\u0026quot;)) ggrepel Let’s start by exploring the ggrepel package. This package is particularly useful when working with text labels and provides some algorithms to help with text label placement automatically. One challenge when placing text labels in a figure is that they often overlap and they also often are placed on top of the data too. ggrepel helps to solve this problem.\nTo show a motivating example, we are going to use data in this section based on penguins. To do this, we first need to install this data package.\ninstall.packages(\u0026quot;palmerpenguins\u0026quot;) The data include three different species of penguins originally collected by Dr. Kristen Gorman at the Palmer Station in Antarctica. There are a total of 344 penguins collected from 3 islands in Antarctica and include information about the species, which island, penguin measurements, and the sex of the penguin. More information about the data including artwork about the species and penguin measurements are on this page.\nHere are the penguin species and what the measurements mean, “artwork by @allison_horst”.\nlibrary(palmerpenguins) library(ggplot2) penguins ## # A tibble: 344 × 8 ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 Adelie Torgersen 39.1 18.7 181 3750 ## 2 Adelie Torgersen 39.5 17.4 186 3800 ## 3 Adelie Torgersen 40.3 18 195 3250 ## 4 Adelie Torgersen NA NA NA NA ## 5 Adelie Torgersen 36.7 19.3 193 3450 ## 6 Adelie Torgersen 39.3 20.6 190 3650 ## 7 Adelie Torgersen 38.9 17.8 181 3625 ## 8 Adelie Torgersen 39.2 19.6 195 4675 ## 9 Adelie Torgersen 34.1 18.1 193 3475 ## 10 Adelie Torgersen 42 20.2 190 4250 ## # … with 334 more rows, and 2 more variables: sex \u0026lt;fct\u0026gt;, year \u0026lt;int\u0026gt; Suppose we wanted to explore the bill length and flipper length with a scatter plot. We can do that with ggplot2 using the geom_point() function. I’m also using the theme_set() function to set the theme to be theme_bw() for the remainder of the notebook. I’ve also altered the theme settings by increasing the base font size from 12 to 16 so hopefully it is a bit easier to read the figure.\ntheme_set(theme_bw(base_size = 16)) ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 4) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) Suppose we wished to add the species to this figure. More specifically, we want to add the species information to the points in the figure to label which points below to each penguin species. There are a few ways we could do this, we could do this by color, shape, or both.\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 4, aes(color = species, shape = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) Another potential option would be to add the text labels directly to the figure and not use color. Adding text to a figure is typically done with the geom_text() function.\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 4, aes(shape = species)) + geom_text(aes(label = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) Notice how the text labels overlap and the word is centered with the data point? This makes the plot unusable. We could fiddle with some settings to the geom_text() function, but the ggrepel package helps to fix this issue for us without having to guess and test. The primary difference in the code below is to use geom_text_repel() instead of geom_text(). Note, I shrunk the data point slightly in the following figure.\nlibrary(ggrepel) ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 3, aes(shape = species)) + geom_text_repel(aes(label = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) This isn’t actually better, but you can see the points were moved away. The issue here is that there are too many text labels to show in a single plot. I’m going to plot only 30 points, 10 from each species.\nlibrary(dplyr) set.seed(100) penguins %\u0026gt;% group_by(species) %\u0026gt;% sample_n(10) %\u0026gt;% ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 3, aes(shape = species)) + geom_text_repel(aes(label = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) To see exactly what was done, I’m going to generate the same figure using geom_text().\nset.seed(100) penguins %\u0026gt;% group_by(species) %\u0026gt;% sample_n(10) %\u0026gt;% ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 3, aes(shape = species)) + geom_text(aes(label = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) geom_label_repel() The ggrepel package only has two functions, the first we saw, geom_text_repel(). The second is geom_label_repel(). This works the same as geom_text_repel(), but creates a box around the text attribute.\nset.seed(100) penguins %\u0026gt;% group_by(species) %\u0026gt;% sample_n(10) %\u0026gt;% ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 3, aes(shape = species)) + geom_label_repel(aes(label = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;)  ggforce The ggforce package has a few powerful additions. One of these helps to solve the problem of too many text labels when using the entire penguin data and is the problem I’d like to start with.\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 3, aes(shape = species)) + geom_text_repel(aes(label = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) Way too many text labels and for this example, there would be too many duplicate text labels. Since there are only three species, other ways of showing the text and groups would be helpful. ggforce helps with this problem using a series of functions that enclose data within different shapes. These functions are geom_mark_rect(), geom_mark_circle(), geom_mark_ellipse(), and geom_mark_hull() for rectangle, circle, ellipse, and hulls respectively. For an example, let’s try geom_mark_ellipse() instead of the text labels.\nlibrary(ggforce) library(tidyr) penguins %\u0026gt;% drop_na(flipper_length_mm, bill_length_mm) %\u0026gt;% ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + geom_mark_ellipse(aes(fill = species)) + geom_point(size = 3, aes(shape = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) To take this one step further, we can add a text label to this figure by setting a label aesthetic to geom_mark_ellipse().\npenguins %\u0026gt;% drop_na(flipper_length_mm, bill_length_mm) %\u0026gt;% ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + geom_mark_ellipse(aes(fill = species, label = species)) + geom_point(size = 3, aes(shape = species)) + scale_x_continuous(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + scale_y_continuous(\u0026quot;Penguin Bill Length (in mm)\u0026quot;, limits = c(25, 70)) Another cool feature of ggforce is the ability to use something called facet zoom. Essentially, this will create a zoomed in element of a portion of your figure. For example, suppose we wanted to zoom in on the Gentoo penguins to explore their relationship between bill length and flipper length. This creates a picture in picture plotting effect.\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 3, aes(shape = species, color = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) + facet_zoom(x = species == \u0026#39;Gentoo\u0026#39;)   patchwork The patchwork package is particularly helpful to combine multiple ggplot2 figures into a single figure, but you don’t want to facet. This can be useful to show multiple different relationships of attributes and combine these into a single figure element to include in a document to share.\nTo combine figure elements, basic math notation is used, including +, /, or |. There are other operators as well, but these are the primary ones we will explore and will also use parentheses to group plots together.\nFirst, let’s create a few plots that we may want to combine.\np1 \u0026lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 4, aes(color = species, shape = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) p1  p2 \u0026lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_depth_mm)) + geom_point(size = 4, aes(color = species, shape = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Depth (in mm)\u0026quot;) p2 Now, we will start by using the + operator to combine plots.\nlibrary(patchwork) p1 + p2 As you can see, the plots are combined directly as generated. In the above example, we’d likely want to only have one legend instead of two. We can do this by modifying the first figure to remove the legend.\np1 \u0026lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + geom_point(size = 4, aes(color = species, shape = species)) + xlab(\u0026quot;Penguin Flipper Length (in mm)\u0026quot;) + ylab(\u0026quot;Penguin Bill Length (in mm)\u0026quot;) + theme(legend.position = \u0026#39;none\u0026#39;) p1  p1 + p2 We can use the / operator to stack plots into multiple rows.\np1 / p2 The + operator has one issue with it, it tries to keep things in a square grid, similar to how facet_wrap() works. For more advanced layout, the | operator separates columns whereas we saw above that the / operator will stack plots. Combined with parentheses, you can get more advanced layouts. First, let’s add one more figure.\np3 \u0026lt;- ggplot(drop_na(penguins, sex), aes(x = sex, y = body_mass_g)) + geom_violin(aes(fill = species), draw_quantiles = c(0.1, .5, 0.9)) + xlab(\u0026quot;Penguin Sex\u0026quot;) + ylab(\u0026quot;Penguin Body Mass (in g)\u0026quot;) + theme(legend.position = \u0026#39;none\u0026#39;) p3 p3 | (p1 / p2) Note, without parentheses, the figures may not turn out as you want.\np1 | p2 / p3 (p1 + p2) / p3  ","date":1612310400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612310400,"objectID":"6ca2e667791f64c28f5edf60988df181","permalink":"https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions/","publishdate":"2021-02-03T00:00:00Z","relpermalink":"/rcode/ggplot2_extensions/","section":"rcode","summary":"ggplot2 extensions","tags":null,"title":"ggplot2 extensions","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will explore data visualization using ggplot2 in R.\nObjectives After completing this module, students will be able to:\n Classify different figure types by their usage Interpret different figure types Evaluate if the figure is appropriate for a given research question Create new figures  Activities  Read R for Data Science Textbook - chapters 1 \u0026ndash; 4  Weekly Videos  Introduction to Graphics with R    Adding Aesthetics    More geoms    Plot Customization    R Basics   R Syntax  Graphics Syntax R Basics  Assignments  Quiz 1 - Due January 30th, 2022  ","date":1612137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612137600,"objectID":"52d024887264e25c0a808c70b28505ad","permalink":"https://psqf6250.brandonlebeau.org/content/02-week2/","publishdate":"2021-02-01T00:00:00Z","relpermalink":"/content/02-week2/","section":"content","summary":"Graphics with R","tags":null,"title":"Week 2","type":"book"},{"authors":null,"categories":null,"content":"   Graphics Basics What is the story you want to tell? Is the figure misleading? Could other figure types be more effective? Does the figure show variation? Is the figure self-contained?   Misleading Graphs Data visualization is hard and it is easy to mislead, intentionally or unintentionally.\n Better Approach  Axis Labels  Axis labels are often placed on the x-axis, but for long labels this can be less effective.   Axis Labels 2  Often, the labels are rotated. Works, but is ugly and difficult to read in my opinion.   Axis Labels 3  The solution, flip x and y axis using coord_flip()!   Showing Variation  Figures depicting statistics, should show variation.   Showing Variation 2  There are multiple values for each major category, the mean is useful, but simplifies too much and could mislead.   ","date":1612310400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612310400,"objectID":"dc1a0cf78c6a546bd632853fc62d4f3a","permalink":"https://psqf6250.brandonlebeau.org/rcode/graphics-tips/","publishdate":"2021-02-03T00:00:00Z","relpermalink":"/rcode/graphics-tips/","section":"rcode","summary":"Graphics Tips","tags":null,"title":"Graphics Tips","type":"book"},{"authors":null,"categories":null,"content":"Introduction The following week the course will continue discussing data visualization using ggplot2 by exploring a handful of useful extension packages that allows new functionality to be implemented. In addition to the new extension packages, some graphical creation tips will be shared.\nObjectives After completing this module, students will be able to:\n Engage with the ggplot2 extension packages Create new figures using the ggplot2 extension packages Evaluate and implement appropriate data visualization standards  Activities  Fundamentals of Data Visualization - chapters 17 \u0026ndash; 26  Weekly Videos  ggrepel    ggforce    patchwork    Graphics Tips   R Syntax  ggplot2 extensions Graphics Tips  Assignments  Quiz 2 - To come \u0026hellip;  ","date":1612310400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612310400,"objectID":"a45a23bf966f2b7c885958051528505d","permalink":"https://psqf6250.brandonlebeau.org/content/03-week3/","publishdate":"2021-02-03T00:00:00Z","relpermalink":"/content/03-week3/","section":"content","summary":"ggplot2 Extension Packages","tags":null,"title":"Week 3","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week the course will turn to skills that are often not covered much in a statistics course, working with data to create new variables, arrange data, select columns, or filter data. These will make use of the dplyr package from the tidyverse to explore verbs to manipulate data.\nObjectives After completing this module, students will be able to:\n Explore benefits of script based analyses Create new data attributes Evaluate dplyr code for data manipulation  Activities  R for Data Science - chapters 5 \u0026ndash; 6  Weekly Videos  Data Munging Introduction    Arranging Data    Selecting Columns of Data    Add Variables to Data    Summarise Data    Chaining Commands Together    R Scripts   R Syntax  ggplot2 extensions R Basics  Assignments  Assignment 1 - Due around February 13th  ","date":1643673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643673600,"objectID":"e315f03cac4ec7010fcc961beef42232","permalink":"https://psqf6250.brandonlebeau.org/content/04-week4/","publishdate":"2022-02-01T00:00:00Z","relpermalink":"/content/04-week4/","section":"content","summary":"Data Munging/Manipulation","tags":null,"title":"Week 4","type":"book"},{"authors":null,"categories":null,"content":"   Data munging (i.e. data transformations, variable creation, filtering) is a common task that is often overlooked in traditional statistics textbooks and courses. Even though it is omitted, the task of cleaning and organizing the data (coming in week 5 of the course)\nData from the fivethirtyeight package is used in this set of notes to show the use of the dplyr verbs for data munging. This package can be installed with the following command:\ninstall.packages(\u0026quot;fivethirtyeight\u0026quot;) To get started with this set of notes, you will need the following packages loaded:\nlibrary(fivethirtyeight) library(tidyverse) We are going to explore the congress_age data set in more detail. Take a few minutes to familiarize yourself with the data.\nView(congress_age) ?congress_age congress_age ## # A tibble: 18,635 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 18,625 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; Using dplyr for data munging The dplyr package uses verbs for common data manipulation tasks. These include:\n filter() arrange() select() mutate() summarise()  The great aspect of these verbs are that they all take a similar data structure, the first argument is always the data, the other arguments are unquoted column names. These functions also always return a data frame in which the rows are observations and the columns are variables.\n Examples with filter() The filter function selects rows that match a specified condition(s). For example, suppose we wanted to select only the rows in the data that are a part of the 80th congress. The following code will do this action:\nfilter(congress_age, congress == 80) ## # A tibble: 555 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 545 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; Notice from above two things, first, the function returned a new data frame. Therefore, if this subsetted data is to be saved, we need to save it to an object, for example, as follows:\ncongress_80 \u0026lt;- filter(congress_age, congress == 80) Notice now that the data were not automatically printed, instead it was saved into the object called congress_80. If you wish to preview the data and save it to an object in a single step, you need to wrap the command above in parentheses. Take a second to try this yourself.\nSecondly, notice from the above commands that equality in R is done with == not just a single =. The single = is used for named arguments, therefore when testing for equality you need to be sure to use ==, this is a common frustration and source of bugs when getting started with R.\nSelecting values based on a character vector are similar to numeric values. For example, suppose we wanted to select only those rows pertaining to those from the senate. The following code will do that:\nsenate \u0026lt;- filter(congress_age, chamber == \u0026#39;senate\u0026#39;) Combining Logical Operations The filter function becomes much more useful with more complex operations. For example, suppose we were interested in selecting the rows that belong to the 80th senate.\nfilter(congress_age, congress == 80, chamber == \u0026#39;senate\u0026#39;) ## # A tibble: 102 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 senate C000133 Arthur \u0026lt;NA\u0026gt; Capper \u0026lt;NA\u0026gt; 1865-07-14 ## 2 80 senate G000418 Theodore Francis Green \u0026lt;NA\u0026gt; 1867-10-02 ## 3 80 senate M000499 Kenneth Douglas McKellar \u0026lt;NA\u0026gt; 1869-01-29 ## 4 80 senate R000112 Clyde Martin Reed \u0026lt;NA\u0026gt; 1871-10-19 ## 5 80 senate M000895 Edward Hall Moore \u0026lt;NA\u0026gt; 1871-11-19 ## 6 80 senate O000146 John Holmes Overton \u0026lt;NA\u0026gt; 1875-09-17 ## 7 80 senate M001108 James Edward Murray \u0026lt;NA\u0026gt; 1876-05-03 ## 8 80 senate M000308 Patrick Anthony McCarran \u0026lt;NA\u0026gt; 1876-08-08 ## 9 80 senate T000165 Elmer \u0026lt;NA\u0026gt; Thomas \u0026lt;NA\u0026gt; 1876-09-08 ## 10 80 senate W000021 Robert Ferdinand Wagner \u0026lt;NA\u0026gt; 1877-06-08 ## # … with 92 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; By default, the filter function uses AND when combining multiple arguments. Therefore, the above command returned only the 102 rows belonging to senators from the 80th congress. The figure on section 5.2.2 of R for Data Science shows all the possible boolean operators.\nUsing an example of the OR operator using | to select the 80th and 81st congress:\nfilter(congress_age, congress == 80 | congress == 81) ## # A tibble: 1,112 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 1,102 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; Note that to do the OR operator, you need to name the variable twice. When selecting multiple values in the same variable, a handy shortcut is %in%. The same command can be run with the following shorthand: handy shortcut is %in%. The same command can be run with the following shorthard\nfilter(congress_age, congress %in% c(80, 81)) ## # A tibble: 1,112 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 1,102 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt;  Not Operator Another useful operator that deserves a bit more discussion is the not operator, !. For example, suppose we wanted to omit the 80th congress:\nfilter(congress_age, congress != 80) ## # A tibble: 18,080 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 81 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 2 81 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 3 81 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 4 81 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 5 81 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 6 81 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 7 81 house B000545 Schuyler Otis Bland \u0026lt;NA\u0026gt; 1872-05-04 ## 8 81 house K000138 John Hosea Kerr \u0026lt;NA\u0026gt; 1873-12-31 ## 9 81 house C000932 Robert \u0026lt;NA\u0026gt; Crosser \u0026lt;NA\u0026gt; 1874-06-07 ## 10 81 house K000039 John \u0026lt;NA\u0026gt; Kee \u0026lt;NA\u0026gt; 1874-08-22 ## # … with 18,070 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; It is also possible to do not with an AND operator as follows:\nfilter(congress_age, congress == 80 \u0026amp; !chamber == \u0026#39;senate\u0026#39;) ## # A tibble: 453 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 443 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; Exercises Using the congress data, select the rows belonging to the democrats (party = D) from the senate of the 100th congress. Select all congress members who are older than 80 years old.    Note on Missing Data Missing data within R are represented with NA which stands for not available.\nThere are no missing data in the congress data, however, by default the filter function will not return any missing values. In order to select missing data, you need to use the is.na function.\nExercise Given the following simple vector, run one filter that selects all values greater than 100. Write a second filter command that selects all the rows greater than 100 and also the NA value.  df \u0026lt;- tibble(x = c(200, 30, NA, 45, 212))    Examples with arrange() The arrange function is used for ordering rows in the data. For example, suppose we wanted to order the rows in the congress data by the state the members of congress lived in. This can be done using the arrange function as follows:\narrange(congress_age, state) ## # A tibble: 18,635 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 2 81 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 3 82 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 4 83 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 5 84 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 6 85 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 7 86 house R000282 Ralph Julian Rivers \u0026lt;NA\u0026gt; 1903-05-23 ## 8 86 senate G000508 Ernest \u0026lt;NA\u0026gt; Gruening \u0026lt;NA\u0026gt; 1887-02-06 ## 9 86 senate B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 10 87 house R000282 Ralph Julian Rivers \u0026lt;NA\u0026gt; 1903-05-23 ## # … with 18,625 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; Similar to the filter function, additional arguments can be added to add more layers to the ordering. For example, if we were interested in ordering the rows by state and then by party affiliation.\narrange(congress_age, state, party) ## # A tibble: 18,635 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 2 81 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 3 82 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 4 83 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 5 84 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 6 85 house B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 7 86 house R000282 Ralph Julian Rivers \u0026lt;NA\u0026gt; 1903-05-23 ## 8 86 senate G000508 Ernest \u0026lt;NA\u0026gt; Gruening \u0026lt;NA\u0026gt; 1887-02-06 ## 9 86 senate B000201 Edward Lewis Bartlett \u0026lt;NA\u0026gt; 1904-04-20 ## 10 87 house R000282 Ralph Julian Rivers \u0026lt;NA\u0026gt; 1903-05-23 ## # … with 18,625 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; More variables can easily be added to the arrange function. Notice from the above two commands that the ordering of the rows is in ascending order, if descending order is desired, the desc function. For example, to order the data starting with the latest congress first:\narrange(congress_age, desc(congress)) ## # A tibble: 18,635 × 13 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 113 house H000067 Ralph M. Hall \u0026lt;NA\u0026gt; 1923-05-03 ## 2 113 house D000355 John D. Dingell \u0026lt;NA\u0026gt; 1926-07-08 ## 3 113 house C000714 John \u0026lt;NA\u0026gt; Conyers Jr. 1929-05-16 ## 4 113 house S000480 Louise McIntosh Slaughter \u0026lt;NA\u0026gt; 1929-08-14 ## 5 113 house R000053 Charles B. Rangel \u0026lt;NA\u0026gt; 1930-06-11 ## 6 113 house J000174 Sam Robert Johnson \u0026lt;NA\u0026gt; 1930-10-11 ## 7 113 house Y000031 C. W. Bill Young \u0026lt;NA\u0026gt; 1930-12-16 ## 8 113 house C000556 Howard \u0026lt;NA\u0026gt; Coble \u0026lt;NA\u0026gt; 1931-03-18 ## 9 113 house L000263 Sander M. Levin \u0026lt;NA\u0026gt; 1931-09-06 ## 10 113 house Y000033 Don E. Young \u0026lt;NA\u0026gt; 1933-06-09 ## # … with 18,625 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt;  Examples with select() The select function is used to select columns (i.e. variables) from the data but keep all the rows. For example, maybe we only needed the congress number, the chamber, the party affiliation, and the age of the members of congress. We can reduce the data to just these variables using select.\nselect(congress_age, congress, chamber, party, age) ## # A tibble: 18,635 × 4 ## congress chamber party age ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 80 house D 85.9 ## 2 80 house D 83.2 ## 3 80 house D 80.7 ## 4 80 house R 78.8 ## 5 80 house R 78.3 ## 6 80 house R 78 ## 7 80 house R 77.9 ## 8 80 house D 76.8 ## 9 80 house R 76 ## 10 80 house R 75.8 ## # … with 18,625 more rows Similar to the arrange functions, the variables that you wish to keep are separated by commas and come after the data argument.\nFor more complex selection, the dplyr package has additional functions that are helpful for variable selection. These include: - starts_with() - ends_with() - contains() - matches() - num_range()\nThese helper functions can be useful for selecting many variables that match a specific pattern. For example, suppose we were interested in selecting all the name variables, this can be accomplished using the contains function as follows:\nselect(congress_age, contains(\u0026#39;name\u0026#39;)) ## # A tibble: 18,635 × 3 ## firstname middlename lastname ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Joseph Jefferson Mansfield ## 2 Robert Lee Doughton ## 3 Adolph Joachim Sabath ## 4 Charles Aubrey Eaton ## 5 William \u0026lt;NA\u0026gt; Lewis ## 6 James A. Gallagher ## 7 Richard Joseph Welch ## 8 Sol \u0026lt;NA\u0026gt; Bloom ## 9 Merlin \u0026lt;NA\u0026gt; Hull ## 10 Charles Laceille Gifford ## # … with 18,625 more rows Another useful shorthand to select multiple columns in succession is the : operator. For example, suppose we wanted to select all the variables between congress and bithday.\nselect(congress_age, congress:birthday) ## # A tibble: 18,635 × 8 ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 18,625 more rows Rename variables The select function does allow you to rename variables, however, using the select function to rename variables is not usually advised as you may end up missing a variable that you wish to keep during the renaming operation. Instead, using the rename function is better practice.\nrename(congress_age, first_name = firstname, last_name = lastname) ## # A tibble: 18,635 × 13 ## congress chamber bioguide first_name middlename last_name suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 18,625 more rows, and 5 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt; By default, the rename function will not save changes to the object, if you wish to save the name differences (very likely), be sure to save this new step to an object.\nExercises Using the dplyr helper functions, select all the variables that start with the letter ‘c’. Rename the first three variables in the congress data to ‘x1’, ‘x2’, ‘x3’. After renaming the first three variables, use this new data (ensure you saved the previous step to an object) to select these three variables with the num_range function.     Examples with mutate() mutate is a useful verb that allows you to add new columns to the existing data set. Actions done with mutate include adding a column of means, counts, or other transformations of existing variables. Suppose for example, we wished to convert the party affiliation of the members of congress into a dummy (indicator) variable. This may be useful to more easily compute a proportion or count for instance.\nThis can be done with the mutate function. Below, I’m first going to use select to reduce the number of columns to make it easier to see the operation.\ncongress_red \u0026lt;- select(congress_age, congress, chamber, state, party) mutate(congress_red, democrat = ifelse(party == \u0026#39;D\u0026#39;, 1, 0), num_democrat = sum(democrat) ) ## # A tibble: 18,635 × 6 ## congress chamber state party democrat num_democrat ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 80 house TX D 1 10290 ## 2 80 house NC D 1 10290 ## 3 80 house IL D 1 10290 ## 4 80 house NJ R 0 10290 ## 5 80 house KY R 0 10290 ## 6 80 house PA R 0 10290 ## 7 80 house CA R 0 10290 ## 8 80 house NY D 1 10290 ## 9 80 house WI R 0 10290 ## 10 80 house MA R 0 10290 ## # … with 18,625 more rows You’ll notice that the number of rows in the data are the same (18635) as it was previously, but now the two new columns have been added to the data. One converted the party affiliation to a series of 0/1 values and the other variable counted up the number of democrats elected since the 80th congress. Notice how this last variable is simply repeated for all values in the data. The operation done here is not too exciting, however, we will learn another utility later that allows us to group the data to calculate different values for each group.\nLastly, from the output above, notice that I was able to reference a variable that I created previously in the mutate command. This is unique to the dplyr package and allows you to create a single mutate command to add many variables, even those that depend on prior calculations. Obviously, if you need to reference a calculation in another calculation, they need to be done in the proper order.\nCreation Functions There are many useful operators to use when creating additional variables. The R for Data Science text has many examples shown in section 5.5.1. In general useful operators include addition, subtraction, multiplication, division, descriptive statistics (we will talk more about these in week 4), ranks, logical comparisons, and many more. The exercises will have you explore some of these operations in more detail.\nExercises Using the diamonds data, use ?diamonds for more information on the data, use the mutate function to calculate the price per carat. Hint, this operation would involve standardizing the price variable so that all are comparable at 1 carat. Calculate the rank of the original price variable and the new price variable calculated above using the min_rank function. Are there differences in the ranking of the prices? Hint, it may be useful to test if the two ranks are equal to explore this.     Examples with summarise() summarise is very similar to the mutate function, except instead of adding additional columns to the data, it collapses data down to a single row. For instance, doing the same operation as the example with mutate above:\ncongress_2 \u0026lt;- mutate(congress_age, democrat = ifelse(party == \u0026#39;D\u0026#39;, 1, 0) ) summarise(congress_2, num_democrat = sum(democrat) ) ## # A tibble: 1 × 1 ## num_democrat ## \u0026lt;dbl\u0026gt; ## 1 10290 Notice now, instead of repeating the same value for all the rows as with mutate, summarise collapsed the data into a single numeric summary. Normally this is not a very interesting data activity, however, used in tandem with another function, group_by, interesting summary statistics can be calculated.\nSuppose we were interested in calculating the number of democrats in each congress. This can be achieved with similar code to above, but first by grouping the data as follows:\ncongress_grp \u0026lt;- group_by(congress_2, congress) summarise(congress_grp, num_democrat = sum(democrat), total = n(), prop_democrat = num_democrat / total ) ## # A tibble: 34 × 4 ## congress num_democrat total prop_democrat ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 80 247 555 0.445 ## 2 81 330 557 0.592 ## 3 82 292 555 0.526 ## 4 83 274 557 0.492 ## 5 84 288 544 0.529 ## 6 85 295 547 0.539 ## 7 86 356 554 0.643 ## 8 87 339 559 0.606 ## 9 88 332 552 0.601 ## 10 89 371 548 0.677 ## # … with 24 more rows Notice above, the use of the group_by function to group the data first by congress. Then this new grouped data is passed to the summarise command. As you can see from the output, the operations performed with the summarise function are done for each unique level of the congress variable. You could now easily plot these to see the trend in proportion of democrats has changed over time.\nlibrary(ggplot2) num_dem \u0026lt;- summarise(congress_grp, num_democrat = sum(democrat), total = n(), prop_democrat = num_democrat / total ) ggplot(num_dem, aes(x = congress, y = prop_democrat)) + geom_line() Exercises Suppose we wanted to calculate the number and proportion of republicans instead of democrats, assuming these are the only two parties, edit the summarise command above to calculate these values. Suppose instead of using sum(democrat) above, we used mean(democrat), what does this value return? Why does it return this value?   Extending group_by() in other places The group_by function is also useful with the mutate function and works in a similar way as summarise above. For example, if we wanted to keep the values calculated above in the original data, we could use mutate instead of summarise. This would look like the following:\nmutate(congress_grp, num_democrat = sum(democrat), total = n(), prop_democrat = num_democrat / total ) ## # A tibble: 18,635 × 17 ## # Groups: congress [34] ## congress chamber bioguide firstname middlename lastname suffix birthday ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; ## 1 80 house M000112 Joseph Jefferson Mansfield \u0026lt;NA\u0026gt; 1861-02-09 ## 2 80 house D000448 Robert Lee Doughton \u0026lt;NA\u0026gt; 1863-11-07 ## 3 80 house S000001 Adolph Joachim Sabath \u0026lt;NA\u0026gt; 1866-04-04 ## 4 80 house E000023 Charles Aubrey Eaton \u0026lt;NA\u0026gt; 1868-03-29 ## 5 80 house L000296 William \u0026lt;NA\u0026gt; Lewis \u0026lt;NA\u0026gt; 1868-09-22 ## 6 80 house G000017 James A. Gallagher \u0026lt;NA\u0026gt; 1869-01-16 ## 7 80 house W000265 Richard Joseph Welch \u0026lt;NA\u0026gt; 1869-02-13 ## 8 80 house B000565 Sol \u0026lt;NA\u0026gt; Bloom \u0026lt;NA\u0026gt; 1870-03-09 ## 9 80 house H000943 Merlin \u0026lt;NA\u0026gt; Hull \u0026lt;NA\u0026gt; 1870-12-18 ## 10 80 house G000169 Charles Laceille Gifford \u0026lt;NA\u0026gt; 1871-03-15 ## # … with 18,625 more rows, and 9 more variables: state \u0026lt;chr\u0026gt;, party \u0026lt;chr\u0026gt;, ## # incumbent \u0026lt;lgl\u0026gt;, termstart \u0026lt;date\u0026gt;, age \u0026lt;dbl\u0026gt;, democrat \u0026lt;dbl\u0026gt;, ## # num_democrat \u0026lt;dbl\u0026gt;, total \u0026lt;int\u0026gt;, prop_democrat \u0026lt;dbl\u0026gt;  Useful summary functions There are many useful summary functions, many of which we will explore in more detail in week 4 of the course during exploratory data analysis (EDA). However, I want to show a few here with the summarise function to ease you in. Suppose for instance we were interested in the knowing the youngest and oldest member of congress for each congress. There are actually two ways of doing this, one is using the min and max functions on the grouped data.\nsummarise(congress_grp, youngest = min(age), oldest = max(age) ) ## # A tibble: 34 × 3 ## congress youngest oldest ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 80 25.9 85.9 ## 2 81 27.2 85.2 ## 3 82 27.9 87.2 ## 4 83 26.7 85.3 ## 5 84 28.5 87.3 ## 6 85 30.5 89.3 ## 7 86 31 91.3 ## 8 87 28.9 86 ## 9 88 29 85.3 ## 10 89 25 87.3 ## # … with 24 more rows This could also be done by using the first and last functions after arranging the data:\nsummarise(arrange(congress_grp, age), youngest = first(age), oldest = last(age) ) ## # A tibble: 34 × 3 ## congress youngest oldest ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 80 25.9 85.9 ## 2 81 27.2 85.2 ## 3 82 27.9 87.2 ## 4 83 26.7 85.3 ## 5 84 28.5 87.3 ## 6 85 30.5 89.3 ## 7 86 31 91.3 ## 8 87 28.9 86 ## 9 88 29 85.3 ## 10 89 25 87.3 ## # … with 24 more rows This goes to show that there are commonly many different ways to calculate descriptive statistics. I would argue two strong virtues when writing code is to make it as clear, expressive, and ensure accuracy. Speed and grace in writing code can come later.\nExercises For each congress, calculate a summary using the following command: n_distinct(state). What does this value return? What happens when you use a logical expression within a sum function call? For example, what do you get in a summarise when you do: sum(age \u0026gt; 75)? What happens when you try to use sum or mean on the variable incumbent?     Chaining together multiple operations Now that you have seen all of the basic dplyr data manipulation verbs, it is useful to chain these together to create more complex operations. So far, I have shown you how to do it by saving intermediate steps, for example, saving the grouped data after using the group_by function. In many instances, these intermediate steps are not useful to us. In these cases you can chain operations together.\nSuppose we are interested in calculating the proportion of democrats for each chamber of congress, but only since the 100th congress? There are two ways to do this, the difficult to read and the easier to read. I first shown the difficult to read.\nsummarise( group_by( mutate( filter( congress_age, congress \u0026gt;= 100 ), democrat = ifelse(party == \u0026#39;D\u0026#39;, 1, 0) ), congress, chamber ), num_democrat = sum(democrat), total = n(), prop_democrat = num_democrat / total ) ## `summarise()` has grouped output by \u0026#39;congress\u0026#39;. You can override using the ## `.groups` argument. ## # A tibble: 28 × 5 ## # Groups: congress [14] ## congress chamber num_democrat total prop_democrat ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 100 house 263 443 0.594 ## 2 100 senate 55 101 0.545 ## 3 101 house 266 445 0.598 ## 4 101 senate 56 101 0.554 ## 5 102 house 272 443 0.614 ## 6 102 senate 59 104 0.567 ## 7 103 house 261 443 0.589 ## 8 103 senate 58 105 0.552 ## 9 104 house 206 441 0.467 ## 10 104 senate 47 103 0.456 ## # … with 18 more rows How difficult do you find the code above to read? This is valid R code, but the first operation done is nested in the middle (it is the filter function that is run first). This makes for difficult code to debug and write in my opinion. In my opinion, the better way to write code is through the pipe operator, %\u0026gt;%. The same code above can be achieved with the following much easier to read code:\ncongress_age %\u0026gt;% filter(congress \u0026gt;= 100) %\u0026gt;% mutate(democrat = ifelse(party == \u0026#39;D\u0026#39;, 1, 0)) %\u0026gt;% group_by(congress, chamber) %\u0026gt;% summarise( num_democrat = sum(democrat), total = n(), prop_democrat = num_democrat / total ) ## `summarise()` has grouped output by \u0026#39;congress\u0026#39;. You can override using the ## `.groups` argument. ## # A tibble: 28 × 5 ## # Groups: congress [14] ## congress chamber num_democrat total prop_democrat ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 100 house 263 443 0.594 ## 2 100 senate 55 101 0.545 ## 3 101 house 266 445 0.598 ## 4 101 senate 56 101 0.554 ## 5 102 house 272 443 0.614 ## 6 102 senate 59 104 0.567 ## 7 103 house 261 443 0.589 ## 8 103 senate 58 105 0.552 ## 9 104 house 206 441 0.467 ## 10 104 senate 47 103 0.456 ## # … with 18 more rows The pipe allows for more readable code by humans and progresses from top to bottom, left to right. The best word to substitute when translating the %\u0026gt;% code above is ‘then’. So the code above says, using the congress_age data, then filter, then mutate, then group_by, then summarise.\nThis is much easier to read and follow the chain of commands. I highly recommend using the pipe in your code. For more details on what is actually happening, the R for Data Science book has a good explanation in Section 5.6.1.\nExercises Look at the following nested code and determine what is being done. Then translate this code to use the pipe operator.  summarise( group_by( mutate( filter( diamonds, color %in% c(\u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;) \u0026amp; cut %in% c(\u0026#39;Fair\u0026#39;, \u0026#39;Good\u0026#39;, \u0026#39;Very Good\u0026#39;) ), f_color = ifelse(color == \u0026#39;F\u0026#39;, 1, 0), vg_cut = ifelse(cut == \u0026#39;Very Good\u0026#39;, 1, 0) ), clarity ), avg = mean(carat), sd = sd(carat), avg_p = mean(price), num = n(), summary_f_color = mean(f_color), summary_vg_cut = mean(vg_cut) )   ","date":1612742400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612742400,"objectID":"b0f659bcc0129e01ff2cba6181b735c0","permalink":"https://psqf6250.brandonlebeau.org/rcode/data_munging/","publishdate":"2021-02-08T00:00:00Z","relpermalink":"/rcode/data_munging/","section":"rcode","summary":"Data Manipulation","tags":null,"title":"Data Manipulation","type":"book"},{"authors":null,"categories":null,"content":"Introduction This module will give some tools to use when performing exploratory data analysis, a framework that helps you to better understand your data prior to doing any more formal analysis.\nObjectives After completing this module, students will be able to:\n Evaluate exploratory figures Define exploratory data analysis Interpret exploratory data analysis output Create exploratory data analysis code  Activities  R for Data Science - chapter 7  Weekly Videos  EDA - Missing Data    EDA - Variation    EDA - Covariation    EDA - Rare/Common Cases    R Projects   R Syntax  Exploratory Data Analysis R Projects - RStudio  Assignments To come \u0026hellip;\n","date":1644364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644364800,"objectID":"7b26937bb8dacd1f2a59f61a2d255d6b","permalink":"https://psqf6250.brandonlebeau.org/content/05-week5/","publishdate":"2022-02-09T00:00:00Z","relpermalink":"/content/05-week5/","section":"content","summary":"Exploratory Data Analysis","tags":null,"title":"Week 5","type":"book"},{"authors":null,"categories":null,"content":"   I want to talk very briefly about R scripts. You may have been using these already within your workflow for this course, but these are best practice instead of simply running code in the console. Creating R scripts are a crucial step to ensure the data analyses are reproducible, the script will act as a log of all the things that are done to the data to go from data import to any outputs (model results, tables, figures, etc.).\nTo create an R script with RStudio, the short cut is CTRL/CMD + SHIFT + N. You can also create a new script by going to File \u0026gt; New File \u0026gt; R Script. Both of these commands will open up a blank script window.\nIn this script window, I would recommend loading any R packages first at the top of the file. Then proceed with the analysis. Commands can be sent to the console using CRTL/CMD + ENTER. By default RStudio will run any commands that span more than one line with a single CRTL/CMD + ENTER call.\nFor more details about R Scripts, the R for Data Science text has detail with screenshots in Chapter 6. I recommend trying to create a simple script and sending these commands from the script to the console to be run with R.\n","date":1612742400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612742400,"objectID":"4a1498dfe51443e4f8fbba8d0304ae58","permalink":"https://psqf6250.brandonlebeau.org/rcode/r_scripts/","publishdate":"2021-02-08T00:00:00Z","relpermalink":"/rcode/r_scripts/","section":"rcode","summary":"R Scripts","tags":null,"title":"R Scripts","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will cover functionality to import, restructure, and join data in the tidyverse. These are common tasks to perform to get the data into the appropriate format for data analysis.\nObjectives After completing this module, students will be able to:\n Define different data join methods Define different data formats Create join and import code  Activities  R for Data Science - chapters 11, 12, 13  Weekly Videos  Data Import    Data Restructuring    Joining Data   R Syntax  Data Import Data Restructuring Data Joins  Assignments To come \u0026hellip;\n","date":1644796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644796800,"objectID":"a1ba50a25029964cc75a26ac15871b71","permalink":"https://psqf6250.brandonlebeau.org/content/06-week6/","publishdate":"2022-02-14T00:00:00Z","relpermalink":"/content/06-week6/","section":"content","summary":"Data Import, Restructuring, Joins","tags":null,"title":"Week 6","type":"book"},{"authors":null,"categories":null,"content":"   Exploratory data analysis (EDA) is an important step in exploring and understanding your data. In addition, EDA does not suffer from problems with inferential statistics related to multiple (correlated) models on the same data. Instead, EDA is a great way to visualize, summarize, and prod your data without any consequences.\nFor this set of notes, we are going to use the following packages:\nlibrary(nycflights13) library(tidyverse) We will use a few different data sets, but the one we are going to start with is the flights data from the nycflights13 package. Below is the first 10 rows of the data.\nflights ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## 7 2013 1 1 555 600 -5 913 854 ## 8 2013 1 1 557 600 -3 709 723 ## 9 2013 1 1 557 600 -3 838 846 ## 10 2013 1 1 558 600 -2 753 745 ## # … with 336,766 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;, ## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, ## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt; This data contains information on all flights that departed from the three airports in NYC in 2013. As you can see, the data has a total of 336776 rows and 19. For additional information use ?flights.\nExploratory Data Analysis The general process for proceeding with exploratory data analysis as summarized in the R for Data Science text are:\nAsk questions about your data Search for answers Refine or ask new questions about the data.  There are no bad questions when performing EDA, but some common questions worth exploring are:\n Missing Data Variation Covariation Rare cases Common cases Distributions  Missing Data A first step in exploring the data is to explore if there are any missing data present in the data (likely). This is not an easy step, but determining the amount of missing data and, if possible, why these values are missing are important first steps. One quick way to get a view of this information for the entire data is to use the summary command. An example is given with the flights data below.\nsummary(flights) ## year month day dep_time sched_dep_time ## Min. :2013 Min. : 1.000 Min. : 1.00 Min. : 1 Min. : 106 ## 1st Qu.:2013 1st Qu.: 4.000 1st Qu.: 8.00 1st Qu.: 907 1st Qu.: 906 ## Median :2013 Median : 7.000 Median :16.00 Median :1401 Median :1359 ## Mean :2013 Mean : 6.549 Mean :15.71 Mean :1349 Mean :1344 ## 3rd Qu.:2013 3rd Qu.:10.000 3rd Qu.:23.00 3rd Qu.:1744 3rd Qu.:1729 ## Max. :2013 Max. :12.000 Max. :31.00 Max. :2400 Max. :2359 ## NA\u0026#39;s :8255 ## dep_delay arr_time sched_arr_time arr_delay ## Min. : -43.00 Min. : 1 Min. : 1 Min. : -86.000 ## 1st Qu.: -5.00 1st Qu.:1104 1st Qu.:1124 1st Qu.: -17.000 ## Median : -2.00 Median :1535 Median :1556 Median : -5.000 ## Mean : 12.64 Mean :1502 Mean :1536 Mean : 6.895 ## 3rd Qu.: 11.00 3rd Qu.:1940 3rd Qu.:1945 3rd Qu.: 14.000 ## Max. :1301.00 Max. :2400 Max. :2359 Max. :1272.000 ## NA\u0026#39;s :8255 NA\u0026#39;s :8713 NA\u0026#39;s :9430 ## carrier flight tailnum origin ## Length:336776 Min. : 1 Length:336776 Length:336776 ## Class :character 1st Qu.: 553 Class :character Class :character ## Mode :character Median :1496 Mode :character Mode :character ## Mean :1972 ## 3rd Qu.:3465 ## Max. :8500 ## ## dest air_time distance hour ## Length:336776 Min. : 20.0 Min. : 17 Min. : 1.00 ## Class :character 1st Qu.: 82.0 1st Qu.: 502 1st Qu.: 9.00 ## Mode :character Median :129.0 Median : 872 Median :13.00 ## Mean :150.7 Mean :1040 Mean :13.18 ## 3rd Qu.:192.0 3rd Qu.:1389 3rd Qu.:17.00 ## Max. :695.0 Max. :4983 Max. :23.00 ## NA\u0026#39;s :9430 ## minute time_hour ## Min. : 0.00 Min. :2013-01-01 05:00:00 ## 1st Qu.: 8.00 1st Qu.:2013-04-04 13:00:00 ## Median :29.00 Median :2013-07-03 10:00:00 ## Mean :26.23 Mean :2013-07-03 05:22:54 ## 3rd Qu.:44.00 3rd Qu.:2013-10-01 07:00:00 ## Max. :59.00 Max. :2013-12-31 23:00:00 ##  This summary can be a bit difficult to digest at first, but can give some useful insight into the variables, including the amount of missing data for each variable.\nYou can dive into looking at specific rows that are missing with the filter command and the is.na function. An example pulling out rows with a missing dep_time values is illustrated:\nfilter(flights, is.na(dep_time)) ## # A tibble: 8,255 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 2013 1 1 NA 1630 NA NA 1815 ## 2 2013 1 1 NA 1935 NA NA 2240 ## 3 2013 1 1 NA 1500 NA NA 1825 ## 4 2013 1 1 NA 600 NA NA 901 ## 5 2013 1 2 NA 1540 NA NA 1747 ## 6 2013 1 2 NA 1620 NA NA 1746 ## 7 2013 1 2 NA 1355 NA NA 1459 ## 8 2013 1 2 NA 1420 NA NA 1644 ## 9 2013 1 2 NA 1321 NA NA 1536 ## 10 2013 1 2 NA 1545 NA NA 1910 ## # … with 8,245 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;, ## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, ## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt; We can also build more complex operations to look at data that is missing for one variable, but not another. For instance, if you look at the summary information above, you may notice there are more missing values for the arr_delay variable compared to the arr_time variable. To look at these values you can use the following command:\nfilter(flights, is.na(arr_delay) \u0026amp; !is.na(arr_time)) ## # A tibble: 717 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 2013 1 1 1525 1530 -5 1934 1805 ## 2 2013 1 1 1528 1459 29 2002 1647 ## 3 2013 1 1 1740 1745 -5 2158 2020 ## 4 2013 1 1 1807 1738 29 2251 2103 ## 5 2013 1 1 1939 1840 59 29 2151 ## 6 2013 1 1 1952 1930 22 2358 2207 ## 7 2013 1 2 905 822 43 1313 1045 ## 8 2013 1 2 1125 925 120 1445 1146 ## 9 2013 1 2 1848 1840 8 2333 2151 ## 10 2013 1 2 1849 1724 85 2235 1938 ## # … with 707 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;, carrier \u0026lt;chr\u0026gt;, ## # flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, air_time \u0026lt;dbl\u0026gt;, ## # distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt; This may actually be a data error, as there is an arr_time value, a scheduled_arr_time value, but no arr_delay value. This could then be calculated manually to reduce the number of missing values with this variable.\nViewing missing data graphically It may be useful to view missing data graphically. This may be useful to see if there are specific trends in the data in relation to the missing values. A few ways to plot these data may be useful.\nFirst, it is always a good rule to explore missing data in relation to other variables in the data. If there is evidence that another variable is influencing whether a value is missing, additional statistical controls are needed to adjust for these concerns.\nFor example, we could explore if the scheduled arrival time is related to whether the actual arrival flight time is missing.\nflights %\u0026gt;% mutate( miss_arrival = is.na(arr_time) ) %\u0026gt;% ggplot(mapping = aes(sched_arr_time)) + geom_freqpoly(aes(color = miss_arrival)) + theme_bw() Notice that the count metric masks much of what is being visualized here as there are many more flights that arrived compared to those with missing times. To adjust this, we simply need to change the y-axis from counts to density.\nflights %\u0026gt;% mutate( miss_arrival = is.na(arr_time) ) %\u0026gt;% ggplot(mapping = aes(x = sched_arr_time, y = ..density..)) + geom_freqpoly(aes(color = miss_arrival)) + theme_bw() The two curves are now standardized so that the area under each curve equals 1, which in turn makes comparison between the two groups easier.\nOne other special note, for EDA internally, there is no need to spend much time worrying about formatting of the graphics. However, if this plot above would be included in a report or manuscript, this figure would need additional polish to be included.\n  Variation Another common EDA question is related to variation. Variation is important for statistics, without variation there is no need to do statistics. The best way to explore variation of any type of variable is through visulization. This section will be broken into two sub areas, one that explores qualitative and another that explores quantitative.\nQualitative Variables Bar graphs (frequency tables) are commonly used to explore variation in qualitative variables. For example, if we wished to explore the number of flights that took off for each month of the year from NYC:\nggplot(flights, aes(factor(month))) + geom_bar() + theme_bw() One special note about the above code, I used the factor() function so that ggplot specifically added all the values of the variable to the x-axis. By default since the month variable is being treated as an integer (a number), it would not show all the values for month.\nThese counts could be calculated manually with the use of dplyr using the count function. The count function basically creates a frequency table. More complex tables can be created by passing additional variables to the count function.\nflights %\u0026gt;% count(month) ## # A tibble: 12 × 2 ## month n ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 1 27004 ## 2 2 24951 ## 3 3 28834 ## 4 4 28330 ## 5 5 28796 ## 6 6 28243 ## 7 7 29425 ## 8 8 29327 ## 9 9 27574 ## 10 10 28889 ## 11 11 27268 ## 12 12 28135  Exercises Copy the code from the bar graph above, but instead of wrapping the month variable in factor, try it without it. What is different? Extra, using the scale_x_continuous function, can you manually add each of the 12 numeric month values to the plot? Using dplyr, manually calculate the number of flights that took off for every day of every month. In other words, how many flights took off everyday of the year. Which day had the most flights?   Quantitative Variables Histrograms, frequency polygons, or density curves are three common options to explore variation with quantitative variables. Within the flights data, suppose we were interested in exploring the variation in the distance traveled, this could easily be done with a histrogram.\nggplot(flights, aes(distance)) + geom_histogram() + theme_bw() We could also use a frequency polygon:\nggplot(flights, aes(distance)) + geom_freqpoly() + theme_bw() We could also use a density curve:\nggplot(flights, aes(distance)) + geom_density() + theme_bw() When exploring the variation for a single variable overall, I tend to use histograms. However, when attempting to see if the variation changes across values of a categorical variable, histograms are difficult as the groups likely overlap. These are instances when using the frequency polygon or density curves are useful. Here are examples of both when exploring variation differences by month.\nggplot(flights, aes(distance)) + geom_freqpoly(aes(color = factor(month))) + theme_bw() ggplot(flights, aes(distance)) + geom_density(aes(color = factor(month))) + theme_bw() You can also calculate the counts plotted in the histograms and frequency polygons using the count as with qualitative variables. We just now need to use the cut_width function to specify bins.\nflights %\u0026gt;% count(cut_width(distance, 100)) ## # A tibble: 28 × 2 ## `cut_width(distance, 100)` n ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 [-50,50] 1 ## 2 (50,150] 2514 ## 3 (150,250] 36839 ## 4 (250,350] 18442 ## 5 (350,450] 15233 ## 6 (450,550] 29149 ## 7 (550,650] 11688 ## 8 (650,750] 33482 ## 9 (750,850] 19482 ## 10 (850,950] 19644 ## # … with 18 more rows Note, these counts may differ from above as the binwidth was not specifically stated when creating the histrogram or frequency polygon.\nIt may also be useful to calculate the variance, standard deviation, or the range. These can be calculated using the summarize function.\nflights %\u0026gt;% summarize( var_dist = var(distance, na.rm = TRUE), sd_dist = sd(distance, na.rm = TRUE), min_dist = min(distance, na.rm = TRUE), max_dist = max(distance, na.rm = TRUE) ) ## # A tibble: 1 × 4 ## var_dist sd_dist min_dist max_dist ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 537631. 733. 17 4983 You could pair this with the group_by function to calculate these values for different groups (e.g. by month).\n Exercises Explore variation in the air_time variable. Does the variation in the air_time variable differ by month?    Distributions Exploring distributions for variables is a very similar process to exploring the variation, the question is just different. Most often we are interested in exploring if the shape of the distribution is approximately normal. This will become more interesting when we start fitting models to explore potential assumption violations in the residuals. We leave these discussions until then.\n Covariation Covariation is the process of comparing how two (or more) variables are related. The most common method for exploring covariation is through scatterplots. However, these are most natural for two continuous variables. Other plots are useful for a mixture of variable types or for two qualitative variables. We will explore each in turn.\nTwo Qualitative Variables Covariation in two qualitative variables is more difficult to view visually due to the restricted possible values in each variable. Suppose for example, we wished to explore covariation in the origin of the flight and the carrier.\nggplot(flights, aes(origin, carrier)) + geom_count() This plot is okay, however, I think a more useful plot is to use a tile plot to explore these differences with color.\nflights %\u0026gt;% count(origin, carrier) %\u0026gt;% ggplot(aes(origin, carrier)) + geom_tile(aes(fill = n)) + theme_bw() Note, that holes mean missing values (i.e. no flights from that airport from that carrier).\n Exercises Explore the covariation between the month and day variables. Note, these are treated as continuous in the data, but in reality they are likely best represented as qualitative.   Two Quantitative Variables Scatterplots are useful for two quantitative variables. Suppose for example that we wish to explore the relationship between the air_time variable and the arr_delay variable. This could be done with a scatterplot.\nggplot(flights, aes(air_time, arr_delay)) + geom_point() + theme_bw() ## Warning: Removed 9430 rows containing missing values (geom_point). One problem with the plot above, is overplotting. There are two fixes for this, one is to use transparent points using the alpha argument to the geom_point function.\nggplot(flights, aes(air_time, arr_delay)) + geom_point(alpha = .05) + theme_bw() ## Warning: Removed 9430 rows containing missing values (geom_point). Another approach that will simplify the exploration is to use boxplots. This will involve grouping the air_time variable into “bins.”\nggplot(flights, aes(x = air_time, y = arr_delay)) + geom_boxplot(aes(group = cut_width(air_time, 50))) + theme_bw() ## Warning: Removed 9430 rows containing missing values (stat_boxplot). Even another more sophisticated graphic is to do the quantitative alternative to geom_tile. Note, the code below uses the hexbin package, but a similar function is geom_bin2d.\n# install.packages(\u0026quot;hexbin\u0026quot;) library(hexbin) ggplot(flights, aes(x = air_time, y = arr_delay)) + geom_hex() ## Warning: Removed 9430 rows containing non-finite values (stat_binhex).  Adding a Third Variable Adding a third variable is often useful, but can be difficult to think about procedurally. The type of plot that is useful depends on the type the third variable is. For example, if the third variable is also quantitative, the visualization is more difficult, however, if the third variable is qualitative, there are two main options. These will be explored in more detail below.\nThe main two approaches for adding a third variable when it is qualitative is to use a different color/shape for the values of this variable or to facet the plot. Suppose we wished to explore the covariation between the following three variables: air_time, arr_delay, and origin. The two different options are shown below.\nggplot(flights, aes(air_time, arr_delay)) + geom_hex() + facet_grid(. ~ origin) + theme_bw() ## Warning: Removed 9430 rows containing non-finite values (stat_binhex). ggplot(flights, aes(air_time, arr_delay)) + geom_point(aes(color = origin), alpha = .05) + theme_bw() ## Warning: Removed 9430 rows containing missing values (geom_point). Plotting three quantitative variables commonly involves binning one one the variables to turn it into an ordinal variable with different levels. For example, see the example with two variables and the boxplot, a similar approach could be used to facet by this third variable. Below is a simple example:\nggplot(flights, aes(x = air_time, y = arr_delay)) + geom_hex() + theme_bw() + facet_wrap(~ cut_width(dep_time, 250)) ## Warning: Removed 9430 rows containing non-finite values (stat_binhex).  One Quantitative, One Qualitative This was actually already discussed in the discussion of variation by exploring differences in variation for different levels of a qualitative variable (see above). If the variation differs by groups, there is then evidence of covariation.\n Correlations It is also useful to calculate and visualize raw correlations. To calculate raw correlations (assuming only quantitative variables), the cor function is useful.\nflights %\u0026gt;% select(air_time, arr_delay, dep_time) %\u0026gt;% cor(use = \u0026#39;pairwise.complete.obs\u0026#39;) ## air_time arr_delay dep_time ## air_time 1.00000000 -0.03529709 -0.01461948 ## arr_delay -0.03529709 1.00000000 0.23230573 ## dep_time -0.01461948 0.23230573 1.00000000 To visualize a correlation matrix, the GGally package is useful. Note, the ggpairs function can take some time to run.\n# install.package(\u0026quot;GGally\u0026quot;) library(GGally) flights %\u0026gt;% select(air_time, arr_delay, dep_time) %\u0026gt;% na.omit() %\u0026gt;% sample_n(1000) %\u0026gt;% ggpairs()  Exercises Explore covariation in the dep_delay and arr_delay variables. What type of relationship, if any, appears to be present? Explore the relationship between dep_delay, arr_delay, and origin. What type of relationship is present. Does the relationship between dep_delay and arr_delay differ by origin? Finally, calculate the correlation matrix for dep_delay, arr_delay, and dep_time.    Rare/Common Cases The last question of use to explore when performing EDA is looking for the presence of rare or common cases. In other words, an exploration of any outliers and the central tendency of the distribution.\nWhen we explored variation in the distance variable earlier, there may have been extreme values we’d want to explore in more detail.\nggplot(flights, aes(distance)) + geom_histogram() + theme_bw() Notice the large distance value, to get a better view of how many there are here, we can use coord_cartesian to zoom in.\nggplot(flights, aes(distance)) + geom_histogram() + theme_bw() + coord_cartesian(ylim = c(0, 5000)) Note, that in the above plot, coord_cartesian does not remove any points, simply changes the coordinates that are plotted. We could also pull these out using filter as well.\nflights %\u0026gt;% filter(distance \u0026gt; 3000) %\u0026gt;% arrange(distance) ## # A tibble: 715 × 19 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 2013 7 6 1629 1615 14 1954 1953 ## 2 2013 7 13 1618 1615 3 1955 1953 ## 3 2013 7 20 1618 1615 3 2003 1953 ## 4 2013 7 27 1617 1615 2 1906 1953 ## 5 2013 8 3 1615 1615 0 2003 1953 ## 6 2013 8 10 1613 1615 -2 1922 1953 ## 7 2013 8 17 1740 1625 75 2042 2003 ## 8 2013 8 24 1633 1625 8 1959 2003 ## 9 2013 1 1 1344 1344 0 2005 1944 ## 10 2013 1 2 1344 1344 0 1940 1944 ## # … with 705 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;, carrier \u0026lt;chr\u0026gt;, ## # flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, air_time \u0026lt;dbl\u0026gt;, ## # distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt; Measures of Central Tendency Exploring measures of central tendency or simply common values/repeated of common values can also be important.\nggplot(flights, aes(arr_time)) + geom_histogram(binwidth = 50) + theme_bw() ## Warning: Removed 8713 rows containing non-finite values (stat_bin). Measures of central tendency can be directly calculated using the summarise function. For example, exploring central tendency of the arr_delay variable.\nflights %\u0026gt;% summarise( avg_arrdelay = mean(arr_delay, na.rm = TRUE), med_arrdelay = median(arr_delay, na.rm = TRUE) ) ## # A tibble: 1 × 2 ## avg_arrdelay med_arrdelay ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 6.90 -5 More interesting computations can be performed by using adding in the group_by function.\n Exercises Using the txhousing data, explore rare/common cases in the median sale price for the following 3 cities: Austin, Dallas, and Houston. Using the data from #1, explore measures of central tendency in the median sale price of these three cities. How have these changed over time (year)? Create an effective visualization that explores differences in the median sale price over time for these three cities.     ","date":1613347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613347200,"objectID":"d51221318d1ce5961433027d6b37a824","permalink":"https://psqf6250.brandonlebeau.org/rcode/eda/","publishdate":"2021-02-15T00:00:00Z","relpermalink":"/rcode/eda/","section":"rcode","summary":"Exploratory Data Analysis","tags":null,"title":"Exploratory Data Analysis","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will get you oriented for working with factor variables in R which can be useful for linear modeling (to come next week). Then the week will also explore how to manipulate character vectors to extract information you may want. As part of this, special functionality for extracting dates will be explored.\nObjectives After completing this module, students will be able to:\n Identify character and factor data attributes Manipulate factor data attributes Manipulate character vectors Extract dates using the lubridate package  Activities  R for Data Science - chapters 15, 16  Weekly Videos  Intro to Factors    Factor Manipulations    Rename Factor Levels    Basic Character String Tasks    Introduction to Regular Expressions    Regular Expression Functions    Real-world Examples - working with dates   R Syntax  Factors Strings  Assignments To come \u0026hellip;\n","date":1645401600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1645401600,"objectID":"edf57c5339859dc84c8243e38d10813b","permalink":"https://psqf6250.brandonlebeau.org/content/07-week7/","publishdate":"2022-02-21T00:00:00Z","relpermalink":"/content/07-week7/","section":"content","summary":"Factors and String Manipulations","tags":null,"title":"Week 7","type":"book"},{"authors":null,"categories":null,"content":"   I want to talk briefly about RStudio projects. These are a great way to structure each individual project. Chapter 8 in the R for Data Science text will provide a more thorough discussion of RStudio projects: http://r4ds.had.co.nz/workflow-projects.html\nWorking Directory As we move into reading in data files, the idea of a working directory will become even more important. RStudio projects makes this discussion much easier as the root of the project directory is treated as the working directory. The nice aspect of this is that all paths to data files are in reference to this root project directory (more on this coming soon).\n Project Structure The last aspect I want to share is a common project directory structure. Everyone can have slightly different versions, but I want to share what I have come to commonly use. The following structure is how I tend to structure most or my projects.\nProject Structure\n Another way to visualize this structure is as follows:\n Project Root:  Data example paper R    ","date":1613347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613347200,"objectID":"ad26be1d8c7fb8b89ce5463a40d8d96d","permalink":"https://psqf6250.brandonlebeau.org/rcode/projects/","publishdate":"2021-02-15T00:00:00Z","relpermalink":"/rcode/projects/","section":"rcode","summary":"R Projects -  RStudio","tags":null,"title":"R Projects -  RStudio","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will explore fitting statistical models within R. More specifically, regression models will be explored with categorical predictors. Focus will be on interpretation and evaluating model fit. Future weeks will explore more complicated models and also visualizing and exploring assumptions.\nObjectives After completing this module, students will be able to:\n Fit a regression model in R Interpret model parameters Evaluate model fitting  Weekly Videos  Introduction to Models    lm() Behind the Scenes    Single Categorical Predictor    Evaluating Model Fit   R Syntax  Model Intro  Assignments To come \u0026hellip;\n","date":1646006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646006400,"objectID":"61b59fb25c9c9655e1869c626f92dc17","permalink":"https://psqf6250.brandonlebeau.org/content/08-week8/","publishdate":"2022-02-28T00:00:00Z","relpermalink":"/content/08-week8/","section":"content","summary":"Introduction to Regression Models","tags":null,"title":"Week 8","type":"book"},{"authors":null,"categories":null,"content":"   So far we have solely used data that is already found within R by way of packages. Obviously, we will want to use our own data and this involves importing data directly into R. We are going to focus on two types of data structures to read in, text files and excel files.\nThe following two packages will be used in this section.\nlibrary(tidyverse) # install.packages(\u0026quot;readxl\u0026quot;) library(readxl) Text Files Through the use of the readr package, we are going to read in flat text files. In many cases, these text files are saved as csv files. The csv stands for comma separated values files meaning that columns in the data are separated by columns. As a side note, this is the most common way that I save data and read in data. The nice aspect of csv files is that if needed, they can be opened in programs like Excel for viewing, but are still just text files which are simple and lightweight.\nTo read in a csv file, we are going to use the read_csv function from the readr package. We are going to read in some UFO data (the data can be found on the course website). The code below is going to read the data directly from the GitHub where the data are currently being stored.\nufo \u0026lt;- read_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026quot;) ## Rows: 8031 Columns: 7 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (7): Date / Time, City, State, Shape, Duration, Summary, Posted ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. A special note here, if you downloaded the data, I recommend putting the downloaded data within an RStudio project in a folder named “Data” or “data”. The updated code (not run here), would look like (assuming the data are in the “data” folder within an RStudio project):\nufo \u0026lt;- read_csv(\u0026#39;data/ufo.csv\u0026#39;) Note again, similar to dplyr, when saving the data to an object, it will not be printed. We can now view the first 10 rows by typing the object name.\nufo ## # A tibble: 8,031 × 7 ## `Date / Time` City State Shape Duration Summary Posted ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 12/12/14 17:30 North Wales PA Triang… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; ## 2 12/12/14 12:40 Cartersville GA Unknown 3.6 min… \u0026quot;Looki… 12/12… ## 3 12/12/14 06:30 Isle of Man (UK/England) \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… ## 4 12/12/14 01:00 Miamisburg OH Changi… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… ## 5 12/12/14 00:00 Spotsylvania VA Unknown 1 minute \u0026quot;White… 12/12… ## 6 12/11/14 23:25 Kenner LA Chevron ~1 minu… \u0026quot;Stran… 12/12… ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… ## 8 12/11/14 20:04 Phoenix AZ Chevron 3 minut… \u0026quot;4 Ora… 12/12… ## 9 12/11/14 20:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… ## 10 12/11/14 18:30 Longview WA Cylind… 10 seco… \u0026quot;Two c… 12/12… ## # … with 8,021 more rows By default, the read_csv function uses the first row of the data file as the names of the variables. To override this behavior, set col_names = FALSE or better yet, specify the names with the col_names argument. In addition, if the file has header metadata, rows of the data can be skipped with the skip argument. For example, reading in the same data as above, but skipping the first row and specifying the names manually would look as follows:\nread_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026quot;, skip = 1, col_names = c(\u0026#39;Date/Time\u0026#39;, \u0026#39;City\u0026#39;, \u0026#39;State\u0026#39;, \u0026#39;Shape\u0026#39;, \u0026#39;Duration\u0026#39;, \u0026#39;Summary\u0026#39;, \u0026#39;Posted\u0026#39;)) ## Rows: 8031 Columns: 7 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (7): Date/Time, City, State, Shape, Duration, Summary, Posted ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## # A tibble: 8,031 × 7 ## `Date/Time` City State Shape Duration Summary Posted ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 12/12/14 17:30 North Wales PA Triang… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; ## 2 12/12/14 12:40 Cartersville GA Unknown 3.6 min… \u0026quot;Looki… 12/12… ## 3 12/12/14 06:30 Isle of Man (UK/England) \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… ## 4 12/12/14 01:00 Miamisburg OH Changi… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… ## 5 12/12/14 00:00 Spotsylvania VA Unknown 1 minute \u0026quot;White… 12/12… ## 6 12/11/14 23:25 Kenner LA Chevron ~1 minu… \u0026quot;Stran… 12/12… ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… ## 8 12/11/14 20:04 Phoenix AZ Chevron 3 minut… \u0026quot;4 Ora… 12/12… ## 9 12/11/14 20:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… ## 10 12/11/14 18:30 Longview WA Cylind… 10 seco… \u0026quot;Two c… 12/12… ## # … with 8,021 more rows Manually Specifying Column Types You may have noticed above that we just needed to give the read_csv function the path to the data file, we did not need to tell the function the types of columns. Instead, the function guessed the type from the first 1000 rows. This can be useful for interactive work, but for truly reproducible code, it is best to specify these manually. There are two ways to specify the column types, one is verbose and the other is simpler, but both use the argument col_types.\nFirst the verbose solution:\nread_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026quot;, col_types = c( \u0026#39;Date/Time\u0026#39; = col_character(), City = col_character(), State = col_character(), Shape = col_character(), Duration = col_character(), Summary = col_character(), Posted = col_character() )) ## # A tibble: 8,031 × 7 ## `Date / Time` City State Shape Duration Summary Posted ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 12/12/14 17:30 North Wales PA Triang… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; ## 2 12/12/14 12:40 Cartersville GA Unknown 3.6 min… \u0026quot;Looki… 12/12… ## 3 12/12/14 06:30 Isle of Man (UK/England) \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… ## 4 12/12/14 01:00 Miamisburg OH Changi… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… ## 5 12/12/14 00:00 Spotsylvania VA Unknown 1 minute \u0026quot;White… 12/12… ## 6 12/11/14 23:25 Kenner LA Chevron ~1 minu… \u0026quot;Stran… 12/12… ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… ## 8 12/11/14 20:04 Phoenix AZ Chevron 3 minut… \u0026quot;4 Ora… 12/12… ## 9 12/11/14 20:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… ## 10 12/11/14 18:30 Longview WA Cylind… 10 seco… \u0026quot;Two c… 12/12… ## # … with 8,021 more rows As all variables are being read in as characters, there is a simple shortcut to use.\nread_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026quot;, col_types = c(\u0026#39;ccccccc\u0026#39;)) ## # A tibble: 8,031 × 7 ## `Date / Time` City State Shape Duration Summary Posted ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 12/12/14 17:30 North Wales PA Triang… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; ## 2 12/12/14 12:40 Cartersville GA Unknown 3.6 min… \u0026quot;Looki… 12/12… ## 3 12/12/14 06:30 Isle of Man (UK/England) \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… ## 4 12/12/14 01:00 Miamisburg OH Changi… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… ## 5 12/12/14 00:00 Spotsylvania VA Unknown 1 minute \u0026quot;White… 12/12… ## 6 12/11/14 23:25 Kenner LA Chevron ~1 minu… \u0026quot;Stran… 12/12… ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… ## 8 12/11/14 20:04 Phoenix AZ Chevron 3 minut… \u0026quot;4 Ora… 12/12… ## 9 12/11/14 20:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… ## 10 12/11/14 18:30 Longview WA Cylind… 10 seco… \u0026quot;Two c… 12/12… ## # … with 8,021 more rows To show the reason the more verbose is useful, suppose we wished to convert the ‘Data/Time’ variable to the correct type, a date time variable.\nread_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026quot;, col_types = c( \u0026#39;Date / Time\u0026#39; = col_datetime(), City = col_character(), State = col_character(), Shape = col_character(), Duration = col_character(), Summary = col_character(), Posted = col_character() )) ## Error: Unknown shortcut: Here we get an error, which is caused by the fact that the date time variable specification needs a format statement. We can directly specify this.\nufo_date \u0026lt;- read_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026quot;, col_types = list( \u0026#39;Date / Time\u0026#39; = col_datetime(format = \u0026quot;%m/%d/%y %H:%M\u0026quot;), City = col_character(), State = col_character(), Shape = col_character(), Duration = col_character(), Summary = col_character(), Posted = col_character() )) ## Warning: One or more parsing issues, see `problems()` for details ufo_date ## # A tibble: 8,031 × 7 ## `Date / Time` City State Shape Duration Summary Posted ## \u0026lt;dttm\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 2014-12-12 17:30:00 North Wales PA Tria… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; ## 2 2014-12-12 12:40:00 Cartersville GA Unkn… 3.6 min… \u0026quot;Looki… 12/12… ## 3 2014-12-12 06:30:00 Isle of Man (UK/Engl… \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… ## 4 2014-12-12 01:00:00 Miamisburg OH Chan… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… ## 5 2014-12-12 00:00:00 Spotsylvania VA Unkn… 1 minute \u0026quot;White… 12/12… ## 6 2014-12-11 23:25:00 Kenner LA Chev… ~1 minu… \u0026quot;Stran… 12/12… ## 7 2014-12-11 23:15:00 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… ## 8 2014-12-11 20:04:00 Phoenix AZ Chev… 3 minut… \u0026quot;4 Ora… 12/12… ## 9 2014-12-11 20:00:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… ## 10 2014-12-11 18:30:00 Longview WA Cyli… 10 seco… \u0026quot;Two c… 12/12… ## # … with 8,021 more rows Notice even though I was careful in the column specification, there was still issues when parsing this column as a date/time column. The data is still returned, but there are issues. These issues can be viewed using the problems function.\nproblems(ufo_date) ## # A tibble: 56 × 5 ## row col expected actual file ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 120 1 date like %m/%d/%y %H:%M 12/1/14 \u0026quot;\u0026quot; ## 2 195 1 date like %m/%d/%y %H:%M 11/27/14 \u0026quot;\u0026quot; ## 3 237 1 date like %m/%d/%y %H:%M 11/24/14 \u0026quot;\u0026quot; ## 4 408 1 date like %m/%d/%y %H:%M 11/15/14 \u0026quot;\u0026quot; ## 5 666 1 date like %m/%d/%y %H:%M 10/31/14 \u0026quot;\u0026quot; ## 6 798 1 date like %m/%d/%y %H:%M 10/25/14 \u0026quot;\u0026quot; ## 7 947 1 date like %m/%d/%y %H:%M 10/19/14 \u0026quot;\u0026quot; ## 8 1082 1 date like %m/%d/%y %H:%M 10/14/14 \u0026quot;\u0026quot; ## 9 1123 1 date like %m/%d/%y %H:%M 10/12/14 \u0026quot;\u0026quot; ## 10 1124 1 date like %m/%d/%y %H:%M 10/12/14 \u0026quot;\u0026quot; ## # … with 46 more rows  Other Text Formats There are other text formats used to read in data. They are listed below with the function used to read in that type. Note, that the function calls are identical to those specified above.\n tsv - tab separated files - read_tsv fixed width files - read_fwf white space generally - read_table delimiter generally - read_delim  Exercises There is a tsv file posted on icon called “lotr_clean.tsv”. Download this and read this data file into R. Instead of specifying the path, use the function file.choose(). For example, read_tsv(file.choose()). What does this function use? Would you recommend this to be used in a reproducible document? Run the getwd() function from the R console. What does this function return?     Excel Files Although I commonly use text files (e.g. csv) files, reality is that many people still use Excel for storing of data files. There are good and bad aspects of this, but reading in Excel files may be needed. The readxl package is useful for this task.\nSuppose we wished to read in the Excel file found on the US Census Bureau website related to Education: https://www.census.gov/support/USACdataDownloads.html\nTo do this, we can do this directly with the read_excel function with the data already downloaded and posted to the course website. Note, the read_excel() function does not allow for reading in data from the web, instead the data need to be downloaded to a temp file, then this file is loaded into R. If you downloaded the data, I recommend placing it within a “Data” or “data” folder.\ntf \u0026lt;- tempfile(fileext = \u0026quot;.xls\u0026quot;) curl::curl_download(\u0026quot;https://github.com/lebebr01/psqf-6250-blogdown/blob/main/data/EDU01.xls?raw=true\u0026quot;, tf) read_excel(tf) ## # A tibble: 3,198 × 42 ## Area_name STCOU EDU010187F EDU010187D EDU010187N1 EDU010187N2 EDU010188F ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 UNITED STATES 00000 0 40024299 0000 0000 0 ## 2 ALABAMA 01000 0 733735 0000 0000 0 ## 3 Autauga, AL 01001 0 6829 0000 0000 0 ## 4 Baldwin, AL 01003 0 16417 0000 0000 0 ## 5 Barbour, AL 01005 0 5071 0000 0000 0 ## 6 Bibb, AL 01007 0 3557 0000 0000 0 ## 7 Blount, AL 01009 0 7319 0000 0000 0 ## 8 Bullock, AL 01011 0 2014 0000 0000 0 ## 9 Butler, AL 01013 0 4640 0000 0000 0 ## 10 Calhoun, AL 01015 0 20939 0000 0000 0 ## # … with 3,188 more rows, and 35 more variables: EDU010188D \u0026lt;dbl\u0026gt;, ## # EDU010188N1 \u0026lt;chr\u0026gt;, EDU010188N2 \u0026lt;chr\u0026gt;, EDU010189F \u0026lt;dbl\u0026gt;, EDU010189D \u0026lt;dbl\u0026gt;, ## # EDU010189N1 \u0026lt;chr\u0026gt;, EDU010189N2 \u0026lt;chr\u0026gt;, EDU010190F \u0026lt;dbl\u0026gt;, EDU010190D \u0026lt;dbl\u0026gt;, ## # EDU010190N1 \u0026lt;chr\u0026gt;, EDU010190N2 \u0026lt;chr\u0026gt;, EDU010191F \u0026lt;dbl\u0026gt;, EDU010191D \u0026lt;dbl\u0026gt;, ## # EDU010191N1 \u0026lt;chr\u0026gt;, EDU010191N2 \u0026lt;chr\u0026gt;, EDU010192F \u0026lt;dbl\u0026gt;, EDU010192D \u0026lt;dbl\u0026gt;, ## # EDU010192N1 \u0026lt;chr\u0026gt;, EDU010192N2 \u0026lt;chr\u0026gt;, EDU010193F \u0026lt;dbl\u0026gt;, EDU010193D \u0026lt;dbl\u0026gt;, ## # EDU010193N1 \u0026lt;chr\u0026gt;, EDU010193N2 \u0026lt;chr\u0026gt;, EDU010194F \u0026lt;dbl\u0026gt;, EDU010194D \u0026lt;dbl\u0026gt;, … By default, the function will read in the first sheet and will treat the first row as the column names. If you wish to read in another sheet, you can use the sheet argument. For example:\nread_excel(tf, sheet = 2) ## # A tibble: 3,198 × 42 ## Area_name STCOU EDU010197F EDU010197D EDU010197N1 EDU010197N2 EDU010198F ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 UNITED STATES 00000 0 44534459 0000 0000 0 ## 2 ALABAMA 01000 0 737386 0000 0000 0 ## 3 Autauga, AL 01001 0 8099 0000 0000 0 ## 4 Baldwin, AL 01003 0 21410 0000 0000 0 ## 5 Barbour, AL 01005 0 5100 0000 0000 0 ## 6 Bibb, AL 01007 0 3717 0000 0000 0 ## 7 Blount, AL 01009 0 7816 0000 0000 0 ## 8 Bullock, AL 01011 0 2010 0000 0000 0 ## 9 Butler, AL 01013 0 4119 0000 0000 0 ## 10 Calhoun, AL 01015 0 19721 0000 0000 0 ## # … with 3,188 more rows, and 35 more variables: EDU010198D \u0026lt;dbl\u0026gt;, ## # EDU010198N1 \u0026lt;chr\u0026gt;, EDU010198N2 \u0026lt;chr\u0026gt;, EDU010199F \u0026lt;dbl\u0026gt;, EDU010199D \u0026lt;dbl\u0026gt;, ## # EDU010199N1 \u0026lt;chr\u0026gt;, EDU010199N2 \u0026lt;chr\u0026gt;, EDU010200F \u0026lt;dbl\u0026gt;, EDU010200D \u0026lt;dbl\u0026gt;, ## # EDU010200N1 \u0026lt;chr\u0026gt;, EDU010200N2 \u0026lt;chr\u0026gt;, EDU010201F \u0026lt;dbl\u0026gt;, EDU010201D \u0026lt;dbl\u0026gt;, ## # EDU010201N1 \u0026lt;chr\u0026gt;, EDU010201N2 \u0026lt;chr\u0026gt;, EDU010202F \u0026lt;dbl\u0026gt;, EDU010202D \u0026lt;dbl\u0026gt;, ## # EDU010202N1 \u0026lt;chr\u0026gt;, EDU010202N2 \u0026lt;chr\u0026gt;, EDU015203F \u0026lt;dbl\u0026gt;, EDU015203D \u0026lt;dbl\u0026gt;, ## # EDU015203N1 \u0026lt;chr\u0026gt;, EDU015203N2 \u0026lt;chr\u0026gt;, EDU015204F \u0026lt;dbl\u0026gt;, EDU015204D \u0026lt;dbl\u0026gt;, … read_excel(tf, sheet = \u0026#39;EDU01B\u0026#39;) ## # A tibble: 3,198 × 42 ## Area_name STCOU EDU010197F EDU010197D EDU010197N1 EDU010197N2 EDU010198F ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 UNITED STATES 00000 0 44534459 0000 0000 0 ## 2 ALABAMA 01000 0 737386 0000 0000 0 ## 3 Autauga, AL 01001 0 8099 0000 0000 0 ## 4 Baldwin, AL 01003 0 21410 0000 0000 0 ## 5 Barbour, AL 01005 0 5100 0000 0000 0 ## 6 Bibb, AL 01007 0 3717 0000 0000 0 ## 7 Blount, AL 01009 0 7816 0000 0000 0 ## 8 Bullock, AL 01011 0 2010 0000 0000 0 ## 9 Butler, AL 01013 0 4119 0000 0000 0 ## 10 Calhoun, AL 01015 0 19721 0000 0000 0 ## # … with 3,188 more rows, and 35 more variables: EDU010198D \u0026lt;dbl\u0026gt;, ## # EDU010198N1 \u0026lt;chr\u0026gt;, EDU010198N2 \u0026lt;chr\u0026gt;, EDU010199F \u0026lt;dbl\u0026gt;, EDU010199D \u0026lt;dbl\u0026gt;, ## # EDU010199N1 \u0026lt;chr\u0026gt;, EDU010199N2 \u0026lt;chr\u0026gt;, EDU010200F \u0026lt;dbl\u0026gt;, EDU010200D \u0026lt;dbl\u0026gt;, ## # EDU010200N1 \u0026lt;chr\u0026gt;, EDU010200N2 \u0026lt;chr\u0026gt;, EDU010201F \u0026lt;dbl\u0026gt;, EDU010201D \u0026lt;dbl\u0026gt;, ## # EDU010201N1 \u0026lt;chr\u0026gt;, EDU010201N2 \u0026lt;chr\u0026gt;, EDU010202F \u0026lt;dbl\u0026gt;, EDU010202D \u0026lt;dbl\u0026gt;, ## # EDU010202N1 \u0026lt;chr\u0026gt;, EDU010202N2 \u0026lt;chr\u0026gt;, EDU015203F \u0026lt;dbl\u0026gt;, EDU015203D \u0026lt;dbl\u0026gt;, ## # EDU015203N1 \u0026lt;chr\u0026gt;, EDU015203N2 \u0026lt;chr\u0026gt;, EDU015204F \u0026lt;dbl\u0026gt;, EDU015204D \u0026lt;dbl\u0026gt;, … If there is metadata or no column names, these can be added in the same fashion as discussed above with the read_csv function. Finally, it should be noted, to use these data within R, you would want to save these data to an object within R.\nedu_data \u0026lt;- read_excel(tf)  Writing Files Most of the read_* functions also come with functions that allow you to write out files as well. I’m only going to cover the write_csv function, however, there are others that may be of use. Similarly to reading in files, the functionality is the same across the write_* functions.\nSuppose we created a new column with the ufo data and wished to save this data to a csv file, this can be accomplished with the following series of commands.\nufo_count \u0026lt;- ufo %\u0026gt;% group_by(State) %\u0026gt;% mutate(num_state = n()) write_csv(ufo_count, path = \u0026#39;path/to/save/file.csv\u0026#39;) Notice there are two arguments to the write_csv function, the first argument is the object you wish to save. The second is the path to the location to save the object. You must specify path = otherwise the write_csv function will look for that object in the R session.\n Other Data Formats There are still other data formats, particularly from proprietary statistical software such as Stata, SAS, or SPSS. To read these files in the haven function would be useful. I leave this as an exercise for you if you have these types of files to read into R.\n ","date":1613606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613606400,"objectID":"f633a13cd9d9bf8127b5d41db07233dc","permalink":"https://psqf6250.brandonlebeau.org/rcode/data_import/","publishdate":"2021-02-18T00:00:00Z","relpermalink":"/rcode/data_import/","section":"rcode","summary":"Data Import","tags":null,"title":"Data Import","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will explore how to work and fit models that have more than 2 groups.\nObjectives After completing this module, students will be able to:\n Create indicator/dummy variables in R for more than 2 groups Interpret parameters from more than 2 groups  Weekly Videos  More than 2 Groups    Adjusting the Reference Groups    Post Hoc Tests    Interactions    Visualizing Model Results   R Syntax  Model Part 2 Advanced Modeling  Assignments To come \u0026hellip;\n","date":1615939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615939200,"objectID":"11d56da541945c59c742283c504dcb63","permalink":"https://psqf6250.brandonlebeau.org/content/09-week9/","publishdate":"2021-03-17T00:00:00Z","relpermalink":"/content/09-week9/","section":"content","summary":"Models - More than 2 groups","tags":null,"title":"Week 9","type":"book"},{"authors":null,"categories":null,"content":"   Data restructuring is often a useful tool to have. By data restructuring, I mean transforming data from long to wide format or vice versa. For the most part, long format is much easier to use when plotting and computing summary statistics. A related topic, called tidy data, can be read about in more detail here: http://www.jstatsoft.org/v59/i10/paper.\nThe data we are going to use for this section of notes is called “LongitudinalEx.csv” and can be found on the course website. The data are loaded directly from the web, but these could be loaded from a downloaded data file (see )\nlibrary(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() long_data \u0026lt;- read_csv(\u0026quot;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/LongitudinalEx.csv\u0026quot;) ## Rows: 27 Columns: 7 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## dbl (7): id, wave, agegrp, age, piat, agegrp.c, age.c ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Long/Stacked Data The data read in above is in a format that is commonly referred to as long or stacked data.\nlong_data ## # A tibble: 27 × 7 ## id wave agegrp age piat agegrp.c age.c ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 4 1 6.5 6 18 0 -0.5 ## 2 4 2 8.5 8.5 31 2 2 ## 3 4 3 10.5 10.7 50 4 4.17 ## 4 27 1 6.5 6.25 19 0 -0.25 ## 5 27 2 8.5 9.17 36 2 2.67 ## 6 27 3 10.5 10.9 57 4 4.42 ## 7 31 1 6.5 6.33 18 0 -0.167 ## 8 31 2 8.5 8.83 31 2 2.33 ## 9 31 3 10.5 10.9 51 4 4.42 ## 10 33 1 6.5 6.33 18 0 -0.167 ## # … with 17 more rows These data do not have one individual per row, instead each row is a individual by wave combination and are stacked for each individual (notice the three rows for id = 4). The variables in this case each have there own column in the data and all of them are time varying (change for each wave of data within an individual). This is also an example of “tidy data” from the paper linked to above, where each row is a unique observation (id, wave pair), variables are in the columns, and each cell of the data is a value.\nThe primary functions within the tidyr package are the following:\n pivot_longer(): for making the data longer, this replaces the gather() function from tidyr. pivot_wider(): for making the data wider, this replaces the spread() function from tidyr.  These two functions are relatively new and they still may change as they continue to be developed. I believe the old functions will be deprecated, but not removed entirely. This means they will not be actively developed any longer, but will remain in the tidyr package for the forseeable future.\nIt should also be noted there are mutiple R packages for data restructuring, including reshape and reshape2. The syntax for these has always been difficult for me to fully process and internalize, but they are incredibly powerful. I believe almost every data restructuring task can be accomplished by pivot_longer() and pivot_wider() (with some companion functions), but it may take a few extra steps to get to the desired structure.\n Extra Long Data To progress through data restructuring, we first need to transform this data is extra long format. This format is not entirely useful by itself, however it will help use show the use of a few functions from the tidyr package. To go to extra long data, we will make use of the pivot_longer() and unite functions.\nextra_long \u0026lt;- long_data %\u0026gt;% pivot_longer(agegrp:age.c, names_to = \u0026#39;variable\u0026#39;, values_to = \u0026#39;value\u0026#39;) %\u0026gt;% unite(var_wave, variable, wave) extra_long  ## # A tibble: 135 × 3 ## id var_wave value ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 4 agegrp_1 6.5 ## 2 4 age_1 6 ## 3 4 piat_1 18 ## 4 4 agegrp.c_1 0 ## 5 4 age.c_1 -0.5 ## 6 4 agegrp_2 8.5 ## 7 4 age_2 8.5 ## 8 4 piat_2 31 ## 9 4 agegrp.c_2 2 ## 10 4 age.c_2 2 ## # … with 125 more rows You’ll notice now that there are only three columns in the data and that there are now 135 rows in data. This extra long data format gathered all of the variables into two columns, one that identify the variable and wave and the other that simply lists the value.\n Wide Data We can now take the extra long data and turn this into wide data. Wide data is characterized by one row per individual with columns representing the variable and wave combinations.\nwide \u0026lt;- extra_long %\u0026gt;% pivot_wider(names_from = var_wave, values_from = value) wide ## # A tibble: 9 × 16 ## id agegrp_1 age_1 piat_1 agegrp.c_1 age.c_1 agegrp_2 age_2 piat_2 ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 4 6.5 6 18 0 -0.5 8.5 8.5 31 ## 2 27 6.5 6.25 19 0 -0.25 8.5 9.17 36 ## 3 31 6.5 6.33 18 0 -0.167 8.5 8.83 31 ## 4 33 6.5 6.33 18 0 -0.167 8.5 8.92 34 ## 5 41 6.5 6.33 18 0 -0.167 8.5 8.75 28 ## 6 49 6.5 6.5 19 0 0 8.5 8.75 32 ## 7 69 6.5 6.67 26 0 0.167 8.5 9.17 47 ## 8 77 6.5 6.83 17 0 0.333 8.5 8.08 19 ## 9 87 6.5 6.92 22 0 0.417 8.5 9.42 49 ## # … with 7 more variables: agegrp.c_2 \u0026lt;dbl\u0026gt;, age.c_2 \u0026lt;dbl\u0026gt;, agegrp_3 \u0026lt;dbl\u0026gt;, ## # age_3 \u0026lt;dbl\u0026gt;, piat_3 \u0026lt;dbl\u0026gt;, agegrp.c_3 \u0026lt;dbl\u0026gt;, age.c_3 \u0026lt;dbl\u0026gt; You’ll notice from the data above, there are now only 9 rows, but now 16 columns in the data. Each variable except for id now also has a number appended to it to represent the wave of the data.\nThis data structure is common, particularly for users of SPSS or Excel for data entry or processing. Unfortunately, when working with data in R (and in general), data in wide format is often difficult to work with. Therefore it is common to need to restructure the data from wide to long format.\n Back to Long Format Fortunately, we can use the same functions as we used above, but now in inverse to get from wide to long format.\nwide %\u0026gt;% pivot_longer(-id, names_to = \u0026quot;variable\u0026quot;, values_to = \u0026quot;value\u0026quot;) %\u0026gt;% separate(variable, into = c(\u0026#39;variable\u0026#39;, \u0026#39;wave\u0026#39;), sep = \u0026quot;_\u0026quot;) %\u0026gt;% arrange(id, wave) %\u0026gt;% pivot_wider(names_from = variable, values_from = value) ## # A tibble: 27 × 7 ## id wave agegrp age piat agegrp.c age.c ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 4 1 6.5 6 18 0 -0.5 ## 2 4 2 8.5 8.5 31 2 2 ## 3 4 3 10.5 10.7 50 4 4.17 ## 4 27 1 6.5 6.25 19 0 -0.25 ## 5 27 2 8.5 9.17 36 2 2.67 ## 6 27 3 10.5 10.9 57 4 4.42 ## 7 31 1 6.5 6.33 18 0 -0.167 ## 8 31 2 8.5 8.83 31 2 2.33 ## 9 31 3 10.5 10.9 51 4 4.42 ## 10 33 1 6.5 6.33 18 0 -0.167 ## # … with 17 more rows This now is identical to the first data that we had. I would recommend working through the steps above to see what the data structure looks like in each intermediate step along the way. In addition, it is often not of interest to save the extra long data format, below is the code that would go directly from long to wide.\nlong_data %\u0026gt;% pivot_longer(agegrp:age.c, names_to = \u0026#39;variable\u0026#39;, values_to = \u0026#39;value\u0026#39;) %\u0026gt;% unite(var_wave, variable, wave) %\u0026gt;% pivot_wider(names_from = var_wave, values_from = value) ## # A tibble: 9 × 16 ## id agegrp_1 age_1 piat_1 agegrp.c_1 age.c_1 agegrp_2 age_2 piat_2 ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 4 6.5 6 18 0 -0.5 8.5 8.5 31 ## 2 27 6.5 6.25 19 0 -0.25 8.5 9.17 36 ## 3 31 6.5 6.33 18 0 -0.167 8.5 8.83 31 ## 4 33 6.5 6.33 18 0 -0.167 8.5 8.92 34 ## 5 41 6.5 6.33 18 0 -0.167 8.5 8.75 28 ## 6 49 6.5 6.5 19 0 0 8.5 8.75 32 ## 7 69 6.5 6.67 26 0 0.167 8.5 9.17 47 ## 8 77 6.5 6.83 17 0 0.333 8.5 8.08 19 ## 9 87 6.5 6.92 22 0 0.417 8.5 9.42 49 ## # … with 7 more variables: agegrp.c_2 \u0026lt;dbl\u0026gt;, age.c_2 \u0026lt;dbl\u0026gt;, agegrp_3 \u0026lt;dbl\u0026gt;, ## # age_3 \u0026lt;dbl\u0026gt;, piat_3 \u0026lt;dbl\u0026gt;, agegrp.c_3 \u0026lt;dbl\u0026gt;, age.c_3 \u0026lt;dbl\u0026gt; Exercises Using the following data generation code, convert these data to long format.  set.seed(10) messy \u0026lt;- data.frame( id = 1:4, trt = sample(rep(c(\u0026#39;control\u0026#39;, \u0026#39;treatment\u0026#39;), each = 2)), work.T1 = runif(4), home.T1 = runif(4), work.T2 = runif(4), home.T2 = runif(4) ) Once successfully converted to long format, convert back to wide format.    ","date":1613606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613606400,"objectID":"d8787013f8cab391469dc0637f2c6584","permalink":"https://psqf6250.brandonlebeau.org/rcode/data_restructuring/","publishdate":"2021-02-18T00:00:00Z","relpermalink":"/rcode/data_restructuring/","section":"rcode","summary":"Data Restructuring","tags":null,"title":"Data Restructuring","type":"book"},{"authors":null,"categories":null,"content":"   Reproducible Rmarkdown Document: 10 pts\nDue: February 13th, 2021 - No penalty for late submissions, but due no later than May 8th.\nFor this assignment, you will create your first reproducible R Markdown document. The source file (the .Rmd) file will be turned in as well as the compiled version (html). The general form of the R code to be included in the document will be given to you. You may be asked to manipulate simple R commands. Submit completed assignment, including Rmd and html to ICON.\nR Markdown Setup Using RStudio, open up a new template for an R Markdown file. To do this, go to File \u0026gt; New File \u0026gt; R Markdown. A new window should open up, type in the details, and ensure that HTML Output is clicked. When finished entering in details, click the ‘okay’ button. Upon hitting the ‘okay’ button, a document template should show up. Read the elements in the template, then once comfortable with its contents, you can delete it and continue to the questions below.   Questions Using Markdown syntax, create a header that says Question 1. Note, you can pick any level of header you wish. Create subsequent headers for each question below. 1 pt\n Create an unordered list that lists your research interests (please list at least 2 interests here). 1 pt\n Create a hyperlink (link to a webpage) that links to the main R project website. Add the link in two ways, one that show the actual link and two, one that has the link embedded within text. You can pick whatever you wish for the link text. 1 pt\n Add a R code chunk to the document. Within this code chunk add the following R code: summary(iris). Ensure to give the chunk a unique name. 1 pt\n Using output from the R command used in the code chunk from question 4, create a table that summarizes the first four variables from the output. The syntax to create a table manually can be found in the Extended Markdown Syntax. More specifically, create a simple table by hand that describes the first row or two from the output of question 4. 1 pt\n Add a new R code chunk. Inside this code chunk add the following R code: hist(iris$Sepal.Length). Ensure to give the chunk a unique name and also add the chunk option to omit the code from being shown in the output. 1 pt\n Create an ordered list with Markdown that ranks your top vacations you have taken. Within each of your top vacations, add a nested item (e.g. https://commonmark.org/help/tutorial/10-nestedLists.html or https://www.markdownguide.org/basic-syntax#lists-1) to each of your vacations that states the top activities you did while on vaction. 1 pt\n Write some text that specifies the correlation between the continuous variables from the iris data. Place the following two bits of code inline in their relevant positions. The two correlations can be calculated with the following bit of code: round(cor(iris$Sepal.Length, iris$Sepal.Width), 2) and round(cor(iris$Petal.Length, iris$Petal.Width), 2) 1 pt\n Let’s now create another figure with the following R code, plot(iris$Sepal.Length, iris$Sepal.Width). Similar to above, give the chunk a unique name and also add the chunk option to omit the code from being shown in the output. For this figure, explore the knitr chunk options (https://yihui.name/knitr/options/) to add a figure caption to the figure. 1 pt\n Add one last code chunk (ensure this chunk has a unique name). Ensure through chunk options that the code is not evaluated, but the code is returned. 1 pt\n  x \u0026lt;- rnorm(100) y \u0026lt;- runif(100, min = 3, max = 8) mean(x) mean(y)  ","date":1609977600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609977600,"objectID":"0125028e0a0739cc5b3cae5982c0f491","permalink":"https://psqf6250.brandonlebeau.org/assignments/assignment/assignment1/","publishdate":"2021-01-07T00:00:00Z","relpermalink":"/assignments/assignment/assignment1/","section":"assignments","summary":"Reproducible Rmarkdown Document: 10 pts\nDue: February 13th, 2021 - No penalty for late submissions, but due no later than May 8th.\nFor this assignment, you will create your first reproducible R Markdown document.","tags":null,"title":"Assignment 1","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week covers miscellaneous model related topics including model assumptions, non-linear models, and a brief introduction to generalized linear models.\nObjectives After completing this module, students will be able to:\n Define key model assumptions Identify model assumption violations Explore non-linear trends Create generalized linear models  Weekly Videos  Interactions - Continuous and Categorical    Statistical Assumption Checking with lm()    Modeling Non-Linear Trends    glm() Function   R Syntax  Advanced Modeling Model Assumptions Misc Modeling Topics  Assignments To come \u0026hellip;\n","date":1647216000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647216000,"objectID":"5404afacfa18580e60775ac443c64293","permalink":"https://psqf6250.brandonlebeau.org/content/10-week10/","publishdate":"2022-03-14T00:00:00Z","relpermalink":"/content/10-week10/","section":"content","summary":"Other Models","tags":null,"title":"Week 10","type":"book"},{"authors":null,"categories":null,"content":"   Graphics and Data Munging Practice: 10 pts\nDue: February 27th, 2022 - No penalty for late submissions, but due no later than May 8th.\nFor this assignment, you will build upon the skills you learned in the first reproducible R Markdown document created in the first assignment. In this assignment, you will explore some data graphically to inform a few research questions using data from the fivethirtyeight package. The source file (the .Rmd) file will be turned in as well as the compiled version (html). Note, please create a new Rmd document for this assignment rather than continue the one from the first assignment. Submit completed assignment, including Rmd and html to ICON.\nAll graphics should be of high quality, this includes formatting of axes, axes labels, etc. If none of the graphics are of high quality, a 2 pt penalty will apply over and above any item-specific reductions.\nResearch Questions The following research questions will be used to guide the assignment, but you do not need to answer these directly. The questions below will reference these questions.\nUsing the college_recent_grads data from the fivethirtyeight package, which majors are the most popular? Using the college_recent_grads data from the fivethirtyeight package, which major categories (not individual majors, but bigger major categories, major_category) are most unisex (i.e., have an equal number of males/females in them.)? Related to #2, which major categories have the most disproportionate number of males or females with that major category? Is there any evidence of a relationship between unemployment rate and the popularity of a major? What about median salary (shown by median) and the popularity of a major?   Questions Using an appropriate verb from dplyr, which majors are the most popular? Don’t print all the data in the output file to answer this question, keep this summary concise. 1 pt\n Which majors are the least popular? Don’t print all the data in the output file to answer this question, keep this summary concise. 1 pt\n Explore the distribution of the variable/attribute sharewomen visually. Summarize characteristics of this variable in a few sentences. Be sure to include any figure(s) or statistics as evidence to support your description. 1 pt\n Which major categories are the most unisex and which major categories are the most disproportionate? Similar to #1 and #2, please don’t print all of the majors, just highlight a few in each category. 1 pt\n Create a figure that effectively shows which major categories are the most unisex and disproportionate in a single figure. Discuss briefly why this figure is effective at answering research question 2 and 3. 1 pt\n Create a figure that explores if there is a relationship between the popularity of a major and the unemployment rate. Discuss briefly how you defined popularity and why this figure helps to show the relationship between the two attributes. Be sure in your discussion to also state your interpretation of the figure. 1 pt\n Building off of #6, create a figure that explores if there is a relationship between the popularity of a major and the median salary (shown with the median attribute). Discuss how you defined popularity and why this figure helps to show the relationship between the two attributes. Be sure in your discussion to also state your interpretation of the figure. 1 pt\n Create a figure that explores if there is a relationship between the popularity of a major category and the unemployment rate. Discuss why this figure helps to show the relationship between the two attributes and also discuss how this figure may differ from the one created in #6. What additional features did you need to consider to make an effective visualization of this relationship given the data structure. Be sure in your discussion to also state your interpretation of the figure. Note, you may wish to use dplyr and ggplot2 to help with this question. 1 pt\n Create a figure that explores if there is a relationship between the popularity of a major category and the median salary (shown with the median attribute). Discuss why this figure helps to show the relationship between the two attributes and also discuss how this figure may differ from the one created in #6. What additional features did you need to consider to make an effective visualization of this relationship given the data structure. Be sure in your discussion to also state your interpretation of the figure. Note, you may wish to use dplyr and ggplot2 to help with this question. 1 pt\n Identify a new research question from the college_recent_grads that interests you. State this research question, then create a figure that highlights/explores the research question. Discuss briefly why this figure does a good job of exploring the research question. What challenges did you have creating the figure? 1 pt\n   ","date":1644364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644364800,"objectID":"9a379d77e6562030f2ffc376339cf992","permalink":"https://psqf6250.brandonlebeau.org/assignments/assignment/assignment2/","publishdate":"2022-02-09T00:00:00Z","relpermalink":"/assignments/assignment/assignment2/","section":"assignments","summary":"Graphics and Data Munging Practice: 10 pts\nDue: February 27th, 2022 - No penalty for late submissions, but due no later than May 8th.\nFor this assignment, you will build upon the skills you learned in the first reproducible R Markdown document created in the first assignment.","tags":null,"title":"Assignment 2","type":"book"},{"authors":null,"categories":null,"content":"   Another common data manipulation task is to join multiple data sources into a single data file for an analysis. This task is most easily accomplished using a set of join functions found in the dplyr package. In this set of notes we are going to focus on mutating joins and filtering joins. There is another class of joins called set operations. I use these much less frequently, but for those interested, see the text in the R for Data Science book http://r4ds.had.co.nz/relational-data.html.\nFor this set of notes, we are going to make use of two packages:\nlibrary(tidyverse) # install.packages(\u0026#39;Lahman\u0026#39;) library(Lahman) The Lahman package contains data from the Major League Baseball (MLB), a professional baseball association in the United States. For this section, we are going to focus on the following three data tables, Teams, Salaries, and Managers. I print the first ten rows of the data for each table below.\nhead(Teams, n = 10) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1871 NA BS1 BNA \u0026lt;NA\u0026gt; 3 31 NA 20 10 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 2 1871 NA CH1 CNA \u0026lt;NA\u0026gt; 2 28 NA 19 9 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 3 1871 NA CL1 CFC \u0026lt;NA\u0026gt; 8 29 NA 10 19 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 4 1871 NA FW1 KEK \u0026lt;NA\u0026gt; 7 19 NA 7 12 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 5 1871 NA NY2 NNA \u0026lt;NA\u0026gt; 5 33 NA 16 17 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 6 1871 NA PH1 PNA \u0026lt;NA\u0026gt; 1 28 NA 21 7 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; Y ## 7 1871 NA RC1 ROK \u0026lt;NA\u0026gt; 9 25 NA 4 21 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 8 1871 NA TRO TRO \u0026lt;NA\u0026gt; 6 29 NA 13 15 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 9 1871 NA WS3 OLY \u0026lt;NA\u0026gt; 4 32 NA 15 15 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 10 1872 NA BL1 BLC \u0026lt;NA\u0026gt; 2 58 NA 35 19 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 \u0026lt;NA\u0026gt; 401 1372 426 70 37 3 60 19 73 16 NA NA 303 109 3.55 22 1 3 ## 2 \u0026lt;NA\u0026gt; 302 1196 323 52 21 10 60 22 69 21 NA NA 241 77 2.76 25 0 1 ## 3 \u0026lt;NA\u0026gt; 249 1186 328 35 40 7 26 25 18 8 NA NA 341 116 4.11 23 0 0 ## 4 \u0026lt;NA\u0026gt; 137 746 178 19 8 2 33 9 16 4 NA NA 243 97 5.17 19 1 0 ## 5 \u0026lt;NA\u0026gt; 302 1404 403 43 21 1 33 15 46 15 NA NA 313 121 3.72 32 1 0 ## 6 \u0026lt;NA\u0026gt; 376 1281 410 66 27 9 46 23 56 12 NA NA 266 137 4.95 27 0 0 ## 7 \u0026lt;NA\u0026gt; 231 1036 274 44 25 3 38 30 53 10 NA NA 287 108 4.30 23 1 0 ## 8 \u0026lt;NA\u0026gt; 351 1248 384 51 34 6 49 19 62 24 NA NA 362 153 5.51 28 0 0 ## 9 \u0026lt;NA\u0026gt; 310 1353 375 54 26 6 48 13 48 13 NA NA 303 137 4.37 32 0 0 ## 10 \u0026lt;NA\u0026gt; 617 2571 753 106 31 14 29 28 53 18 NA NA 434 166 2.90 48 1 1 ## IPouts HA HRA BBA SOA E DP FP name ## 1 828 367 2 42 23 243 24 0.834 Boston Red Stockings ## 2 753 308 6 28 22 229 16 0.829 Chicago White Stockings ## 3 762 346 13 53 34 234 15 0.818 Cleveland Forest Citys ## 4 507 261 5 21 17 163 8 0.803 Fort Wayne Kekiongas ## 5 879 373 7 42 22 235 14 0.840 New York Mutuals ## 6 747 329 3 53 16 194 13 0.845 Philadelphia Athletics ## 7 678 315 3 34 16 220 14 0.821 Rockford Forest Citys ## 8 750 431 4 75 12 198 22 0.845 Troy Haymakers ## 9 846 371 4 45 13 218 20 0.850 Washington Olympics ## 10 1548 573 3 63 77 432 22 0.830 Baltimore Canaries ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 South End Grounds I NA 103 98 BOS BS1 ## 2 Union Base-Ball Grounds NA 104 102 CHI CH1 ## 3 National Association Grounds NA 96 100 CLE CL1 ## 4 Hamilton Field NA 101 107 KEK FW1 ## 5 Union Grounds (Brooklyn) NA 90 88 NYU NY2 ## 6 Jefferson Street Grounds NA 102 98 ATH PH1 ## 7 Agricultural Society Fair Grounds NA 97 99 ROK RC1 ## 8 Haymakers\u0026#39; Grounds NA 101 100 TRO TRO ## 9 Olympics Grounds NA 94 98 OLY WS3 ## 10 Newington Park NA 106 102 BAL BL1 ## teamIDretro ## 1 BS1 ## 2 CH1 ## 3 CL1 ## 4 FW1 ## 5 NY2 ## 6 PH1 ## 7 RC1 ## 8 TRO ## 9 WS3 ## 10 BL1 head(Salaries, n = 10) ## yearID teamID lgID playerID salary ## 1 1985 ATL NL barkele01 870000 ## 2 1985 ATL NL bedrost01 550000 ## 3 1985 ATL NL benedbr01 545000 ## 4 1985 ATL NL campri01 633333 ## 5 1985 ATL NL ceronri01 625000 ## 6 1985 ATL NL chambch01 800000 ## 7 1985 ATL NL dedmoje01 150000 ## 8 1985 ATL NL forstte01 483333 ## 9 1985 ATL NL garbege01 772000 ## 10 1985 ATL NL harpete01 250000 head(Managers, n = 10) ## playerID yearID teamID lgID inseason G W L rank plyrMgr ## 1 wrighha01 1871 BS1 NA 1 31 20 10 3 Y ## 2 woodji01 1871 CH1 NA 1 28 19 9 2 Y ## 3 paborch01 1871 CL1 NA 1 29 10 19 8 Y ## 4 lennobi01 1871 FW1 NA 1 14 5 9 8 Y ## 5 deaneha01 1871 FW1 NA 2 5 2 3 8 Y ## 6 fergubo01 1871 NY2 NA 1 33 16 17 5 Y ## 7 mcbridi01 1871 PH1 NA 1 28 21 7 1 Y ## 8 hastisc01 1871 RC1 NA 1 25 4 21 9 Y ## 9 pikeli01 1871 TRO NA 1 4 1 3 6 Y ## 10 cravebi01 1871 TRO NA 2 25 12 12 6 Y Inner Join The most basic join is the inner join. This join takes two tables and returns values if key variables match in both tables. If rows do not match on the key variables, these observations are removed. Suppose for example, we wanted to select the rows that matched between the Teams and Salaries data. This would be useful for example if we wished to calculate the average salary of the players for each team for every year.\nThis join could be done with the inner_join function.\nteam_salary \u0026lt;- inner_join(Teams, Salaries) ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;lgID\u0026quot;, \u0026quot;teamID\u0026quot;) head(team_salary, n = 10) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 2 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 3 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 4 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 5 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 6 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 7 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 8 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 9 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 10 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 2 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 3 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 4 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 5 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 6 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 7 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 8 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 9 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 10 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## IPouts HA HRA BBA SOA E DP FP name ## 1 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 2 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 3 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 4 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 5 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 6 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 7 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 8 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 9 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 10 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 2 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 3 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 4 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 5 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 6 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 7 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 8 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 9 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 10 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## teamIDretro playerID salary ## 1 ATL barkele01 870000 ## 2 ATL bedrost01 550000 ## 3 ATL benedbr01 545000 ## 4 ATL campri01 633333 ## 5 ATL ceronri01 625000 ## 6 ATL chambch01 800000 ## 7 ATL dedmoje01 150000 ## 8 ATL forstte01 483333 ## 9 ATL garbege01 772000 ## 10 ATL harpete01 250000 You’ll notice that there is only data from 1985 onward, the data in the Teams data from before 1985 have automatically been removed due to no matching data in the Salaries data. You may have also noticed, that I did not specify the variables to join by above, for interactive work this can be okay, but to be more reproducible, specifying the variables to join on would be better. The function call above can be modified to include this information.\nteam_salary \u0026lt;- inner_join(Teams, Salaries, by = c(\u0026#39;yearID\u0026#39;, \u0026#39;teamID\u0026#39;, \u0026#39;lgID\u0026#39;)) head(team_salary, n = 10) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 2 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 3 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 4 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 5 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 6 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 7 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 8 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 9 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 10 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 2 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 3 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 4 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 5 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 6 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 7 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 8 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 9 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 10 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## IPouts HA HRA BBA SOA E DP FP name ## 1 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 2 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 3 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 4 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 5 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 6 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 7 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 8 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 9 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 10 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 2 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 3 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 4 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 5 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 6 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 7 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 8 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 9 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 10 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## teamIDretro playerID salary ## 1 ATL barkele01 870000 ## 2 ATL bedrost01 550000 ## 3 ATL benedbr01 545000 ## 4 ATL campri01 633333 ## 5 ATL ceronri01 625000 ## 6 ATL chambch01 800000 ## 7 ATL dedmoje01 150000 ## 8 ATL forstte01 483333 ## 9 ATL garbege01 772000 ## 10 ATL harpete01 250000 We could then use other dplyr verbs to calculate the average salary for every team by year and plot these.\nteam_salary %\u0026gt;% group_by(yearID, teamID) %\u0026gt;% summarise(avg_salary = mean(salary, na.rm = TRUE)) %\u0026gt;% ggplot(aes(x = yearID, y = avg_salary)) + geom_line(size = 1) + facet_wrap(~teamID) ## `summarise()` has grouped output by \u0026#39;yearID\u0026#39;. You can override using the ## `.groups` argument. Below is a diagram of the inner join found in the R for Data Science text, inner join diagram.\n Left Join This is by far the most common join I perform. Left join is more formally part of a group of operations called outer joins. Outer joins are useful when you want to use one data table as a base data set in which variables will be added to this data if the keys match. It is likely best shown with an example.\nSuppose we wish to add the salary information to the Teams data. However, instead of using a inner_join, let’s use left_join to see the difference. Note: I print only 10 rows of data with the head() function. This part of the code below would generally not be used.\nleft_join(Teams, Salaries) %\u0026gt;% head(n = 10) ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;lgID\u0026quot;, \u0026quot;teamID\u0026quot;) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1871 NA BS1 BNA \u0026lt;NA\u0026gt; 3 31 NA 20 10 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 2 1871 NA CH1 CNA \u0026lt;NA\u0026gt; 2 28 NA 19 9 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 3 1871 NA CL1 CFC \u0026lt;NA\u0026gt; 8 29 NA 10 19 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 4 1871 NA FW1 KEK \u0026lt;NA\u0026gt; 7 19 NA 7 12 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 5 1871 NA NY2 NNA \u0026lt;NA\u0026gt; 5 33 NA 16 17 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 6 1871 NA PH1 PNA \u0026lt;NA\u0026gt; 1 28 NA 21 7 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; Y ## 7 1871 NA RC1 ROK \u0026lt;NA\u0026gt; 9 25 NA 4 21 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 8 1871 NA TRO TRO \u0026lt;NA\u0026gt; 6 29 NA 13 15 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 9 1871 NA WS3 OLY \u0026lt;NA\u0026gt; 4 32 NA 15 15 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 10 1872 NA BL1 BLC \u0026lt;NA\u0026gt; 2 58 NA 35 19 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 \u0026lt;NA\u0026gt; 401 1372 426 70 37 3 60 19 73 16 NA NA 303 109 3.55 22 1 3 ## 2 \u0026lt;NA\u0026gt; 302 1196 323 52 21 10 60 22 69 21 NA NA 241 77 2.76 25 0 1 ## 3 \u0026lt;NA\u0026gt; 249 1186 328 35 40 7 26 25 18 8 NA NA 341 116 4.11 23 0 0 ## 4 \u0026lt;NA\u0026gt; 137 746 178 19 8 2 33 9 16 4 NA NA 243 97 5.17 19 1 0 ## 5 \u0026lt;NA\u0026gt; 302 1404 403 43 21 1 33 15 46 15 NA NA 313 121 3.72 32 1 0 ## 6 \u0026lt;NA\u0026gt; 376 1281 410 66 27 9 46 23 56 12 NA NA 266 137 4.95 27 0 0 ## 7 \u0026lt;NA\u0026gt; 231 1036 274 44 25 3 38 30 53 10 NA NA 287 108 4.30 23 1 0 ## 8 \u0026lt;NA\u0026gt; 351 1248 384 51 34 6 49 19 62 24 NA NA 362 153 5.51 28 0 0 ## 9 \u0026lt;NA\u0026gt; 310 1353 375 54 26 6 48 13 48 13 NA NA 303 137 4.37 32 0 0 ## 10 \u0026lt;NA\u0026gt; 617 2571 753 106 31 14 29 28 53 18 NA NA 434 166 2.90 48 1 1 ## IPouts HA HRA BBA SOA E DP FP name ## 1 828 367 2 42 23 243 24 0.834 Boston Red Stockings ## 2 753 308 6 28 22 229 16 0.829 Chicago White Stockings ## 3 762 346 13 53 34 234 15 0.818 Cleveland Forest Citys ## 4 507 261 5 21 17 163 8 0.803 Fort Wayne Kekiongas ## 5 879 373 7 42 22 235 14 0.840 New York Mutuals ## 6 747 329 3 53 16 194 13 0.845 Philadelphia Athletics ## 7 678 315 3 34 16 220 14 0.821 Rockford Forest Citys ## 8 750 431 4 75 12 198 22 0.845 Troy Haymakers ## 9 846 371 4 45 13 218 20 0.850 Washington Olympics ## 10 1548 573 3 63 77 432 22 0.830 Baltimore Canaries ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 South End Grounds I NA 103 98 BOS BS1 ## 2 Union Base-Ball Grounds NA 104 102 CHI CH1 ## 3 National Association Grounds NA 96 100 CLE CL1 ## 4 Hamilton Field NA 101 107 KEK FW1 ## 5 Union Grounds (Brooklyn) NA 90 88 NYU NY2 ## 6 Jefferson Street Grounds NA 102 98 ATH PH1 ## 7 Agricultural Society Fair Grounds NA 97 99 ROK RC1 ## 8 Haymakers\u0026#39; Grounds NA 101 100 TRO TRO ## 9 Olympics Grounds NA 94 98 OLY WS3 ## 10 Newington Park NA 106 102 BAL BL1 ## teamIDretro playerID salary ## 1 BS1 \u0026lt;NA\u0026gt; NA ## 2 CH1 \u0026lt;NA\u0026gt; NA ## 3 CL1 \u0026lt;NA\u0026gt; NA ## 4 FW1 \u0026lt;NA\u0026gt; NA ## 5 NY2 \u0026lt;NA\u0026gt; NA ## 6 PH1 \u0026lt;NA\u0026gt; NA ## 7 RC1 \u0026lt;NA\u0026gt; NA ## 8 TRO \u0026lt;NA\u0026gt; NA ## 9 WS3 \u0026lt;NA\u0026gt; NA ## 10 BL1 \u0026lt;NA\u0026gt; NA The first thing to notice is that now there are years in the yearID variable from before 1985, this was not the case in the above data joined using inner_join. If you scroll over to explore variables to the right, there are missing values for the salary variable. What left_join does when it doesn’t find a match in the table is to produce NA values, so all records within the joined data will be NA before 1985.\nThis is the major difference between outer joins and inner joins. Outer joins will preserve data in the keyed data that do not match and NA values are returned for non-matching values. For inner joins, any keys that do not match are removed.\n Right Join A right join is similar to a left join, except the keyed table is the second one specified (the rightmost data). For example, if we wished for the salary information to be the keyed table, we could do that same specification as above, but use right_join instead of left_join. Note: I print only 10 rows of data with the head() function. This part of the code below would generally not be used.\nright_join(Teams, Salaries) %\u0026gt;% head(n = 10) ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;lgID\u0026quot;, \u0026quot;teamID\u0026quot;) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 2 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 3 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 4 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 5 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 6 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 7 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 8 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 9 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 10 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 2 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 3 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 4 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 5 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 6 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 7 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 8 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 9 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 10 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## IPouts HA HRA BBA SOA E DP FP name ## 1 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 2 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 3 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 4 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 5 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 6 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 7 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 8 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 9 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 10 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 2 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 3 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 4 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 5 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 6 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 7 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 8 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 9 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 10 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## teamIDretro playerID salary ## 1 ATL barkele01 870000 ## 2 ATL bedrost01 550000 ## 3 ATL benedbr01 545000 ## 4 ATL campri01 633333 ## 5 ATL ceronri01 625000 ## 6 ATL chambch01 800000 ## 7 ATL dedmoje01 150000 ## 8 ATL forstte01 483333 ## 9 ATL garbege01 772000 ## 10 ATL harpete01 250000 This data is very similar (although not identical) to the one from the inner join above. Can you spot what is different?\n Full Join Full join is the last type of outer join and this will return all values from both tables and NAs will be given for those keys that do not match. For example,\nfull_join(Teams, Salaries) %\u0026gt;% head(n = 10) ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;lgID\u0026quot;, \u0026quot;teamID\u0026quot;) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1871 NA BS1 BNA \u0026lt;NA\u0026gt; 3 31 NA 20 10 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 2 1871 NA CH1 CNA \u0026lt;NA\u0026gt; 2 28 NA 19 9 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 3 1871 NA CL1 CFC \u0026lt;NA\u0026gt; 8 29 NA 10 19 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 4 1871 NA FW1 KEK \u0026lt;NA\u0026gt; 7 19 NA 7 12 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 5 1871 NA NY2 NNA \u0026lt;NA\u0026gt; 5 33 NA 16 17 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 6 1871 NA PH1 PNA \u0026lt;NA\u0026gt; 1 28 NA 21 7 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; Y ## 7 1871 NA RC1 ROK \u0026lt;NA\u0026gt; 9 25 NA 4 21 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 8 1871 NA TRO TRO \u0026lt;NA\u0026gt; 6 29 NA 13 15 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 9 1871 NA WS3 OLY \u0026lt;NA\u0026gt; 4 32 NA 15 15 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## 10 1872 NA BL1 BLC \u0026lt;NA\u0026gt; 2 58 NA 35 19 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 \u0026lt;NA\u0026gt; 401 1372 426 70 37 3 60 19 73 16 NA NA 303 109 3.55 22 1 3 ## 2 \u0026lt;NA\u0026gt; 302 1196 323 52 21 10 60 22 69 21 NA NA 241 77 2.76 25 0 1 ## 3 \u0026lt;NA\u0026gt; 249 1186 328 35 40 7 26 25 18 8 NA NA 341 116 4.11 23 0 0 ## 4 \u0026lt;NA\u0026gt; 137 746 178 19 8 2 33 9 16 4 NA NA 243 97 5.17 19 1 0 ## 5 \u0026lt;NA\u0026gt; 302 1404 403 43 21 1 33 15 46 15 NA NA 313 121 3.72 32 1 0 ## 6 \u0026lt;NA\u0026gt; 376 1281 410 66 27 9 46 23 56 12 NA NA 266 137 4.95 27 0 0 ## 7 \u0026lt;NA\u0026gt; 231 1036 274 44 25 3 38 30 53 10 NA NA 287 108 4.30 23 1 0 ## 8 \u0026lt;NA\u0026gt; 351 1248 384 51 34 6 49 19 62 24 NA NA 362 153 5.51 28 0 0 ## 9 \u0026lt;NA\u0026gt; 310 1353 375 54 26 6 48 13 48 13 NA NA 303 137 4.37 32 0 0 ## 10 \u0026lt;NA\u0026gt; 617 2571 753 106 31 14 29 28 53 18 NA NA 434 166 2.90 48 1 1 ## IPouts HA HRA BBA SOA E DP FP name ## 1 828 367 2 42 23 243 24 0.834 Boston Red Stockings ## 2 753 308 6 28 22 229 16 0.829 Chicago White Stockings ## 3 762 346 13 53 34 234 15 0.818 Cleveland Forest Citys ## 4 507 261 5 21 17 163 8 0.803 Fort Wayne Kekiongas ## 5 879 373 7 42 22 235 14 0.840 New York Mutuals ## 6 747 329 3 53 16 194 13 0.845 Philadelphia Athletics ## 7 678 315 3 34 16 220 14 0.821 Rockford Forest Citys ## 8 750 431 4 75 12 198 22 0.845 Troy Haymakers ## 9 846 371 4 45 13 218 20 0.850 Washington Olympics ## 10 1548 573 3 63 77 432 22 0.830 Baltimore Canaries ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 South End Grounds I NA 103 98 BOS BS1 ## 2 Union Base-Ball Grounds NA 104 102 CHI CH1 ## 3 National Association Grounds NA 96 100 CLE CL1 ## 4 Hamilton Field NA 101 107 KEK FW1 ## 5 Union Grounds (Brooklyn) NA 90 88 NYU NY2 ## 6 Jefferson Street Grounds NA 102 98 ATH PH1 ## 7 Agricultural Society Fair Grounds NA 97 99 ROK RC1 ## 8 Haymakers\u0026#39; Grounds NA 101 100 TRO TRO ## 9 Olympics Grounds NA 94 98 OLY WS3 ## 10 Newington Park NA 106 102 BAL BL1 ## teamIDretro playerID salary ## 1 BS1 \u0026lt;NA\u0026gt; NA ## 2 CH1 \u0026lt;NA\u0026gt; NA ## 3 CL1 \u0026lt;NA\u0026gt; NA ## 4 FW1 \u0026lt;NA\u0026gt; NA ## 5 NY2 \u0026lt;NA\u0026gt; NA ## 6 PH1 \u0026lt;NA\u0026gt; NA ## 7 RC1 \u0026lt;NA\u0026gt; NA ## 8 TRO \u0026lt;NA\u0026gt; NA ## 9 WS3 \u0026lt;NA\u0026gt; NA ## 10 BL1 \u0026lt;NA\u0026gt; NA Note: I print only 10 rows of data with the head() function. This part of the code below would generally not be used.\nThis data is very similar to the left join above, but not identical, can you tell the difference again?\nBelow is a diagram of the differences between the three outer joins from the R for Data Science text, outer joins diagram.\n Filtering Joins I tend to not use filtering joins, however, these are useful to connect summary data back to the original rows in the data. For example, using the team_salary data created above, let’s select only the top 10 teams in terms of average salary from the year 2015.\ntop_salary_15 \u0026lt;- team_salary %\u0026gt;% group_by(yearID, teamID) %\u0026gt;% summarise(avg_salary = mean(salary, na.rm = TRUE)) %\u0026gt;% filter(yearID == 2015) %\u0026gt;% arrange(desc(avg_salary)) %\u0026gt;% head(10) ## `summarise()` has grouped output by \u0026#39;yearID\u0026#39;. You can override using the ## `.groups` argument. top_salary_15 ## # A tibble: 10 × 3 ## # Groups: yearID [1] ## yearID teamID avg_salary ## \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 2015 LAN 7441103. ## 2 2015 NYA 7336274. ## 3 2015 DET 6891390 ## 4 2015 SFN 6100056. ## 5 2015 BOS 5659481. ## 6 2015 WAS 5365085. ## 7 2015 SEA 4888348 ## 8 2015 TEX 4791426. ## 9 2015 SLN 4586212. ## 10 2015 SDN 4555435. Although not impossible, it would be a bit more difficult to connect these teams and years back to the original data in the team_salary data. This can be done simply with a filtering join, namely a semi join.\nteam_salary %\u0026gt;% semi_join(top_salary_15) %\u0026gt;% head(n = 10) ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;teamID\u0026quot;) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 2 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 3 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 4 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 5 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 6 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 7 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 8 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 9 2015 AL BOS BOS E 5 162 81 78 84 N N N ## 10 2015 AL BOS BOS E 5 162 81 78 84 N N N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 2 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 3 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 4 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 5 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 6 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 7 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 8 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 9 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## 10 N 748 5640 1495 294 33 161 478 1148 71 27 46 42 753 694 4.31 3 10 40 ## IPouts HA HRA BBA SOA E DP FP name park ## 1 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 2 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 3 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 4 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 5 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 6 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 7 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 8 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 9 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## 10 4345 1486 178 478 1218 97 148 0.984 Boston Red Sox Fenway Park II ## attendance BPF PPF teamIDBR teamIDlahman45 teamIDretro playerID salary ## 1 2880694 104 107 BOS BOS BOS barnema01 508500 ## 2 2880694 104 107 BOS BOS BOS bettsmo01 514500 ## 3 2880694 104 107 BOS BOS BOS bogaexa01 543000 ## 4 2880694 104 107 BOS BOS BOS bradlja02 528000 ## 5 2880694 104 107 BOS BOS BOS breslcr01 2000000 ## 6 2880694 104 107 BOS BOS BOS buchhcl01 12000000 ## 7 2880694 104 107 BOS BOS BOS castiru01 11271000 ## 8 2880694 104 107 BOS BOS BOS cecchga01 508500 ## 9 2880694 104 107 BOS BOS BOS craigal01 5500000 ## 10 2880694 104 107 BOS BOS BOS hanigry01 3500000 Note: I print only 10 rows of data with the head() function. This part of the code below would generally not be used.\nThis operation selected only the rows that had the matching keys from the first table (note that the columns were not touched).\nThe opposite operation is to use an anti join, in this type of join, the rows that do not match will be returned.\nteam_salary %\u0026gt;% anti_join(top_salary_15) %\u0026gt;% head(n = 10) ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;teamID\u0026quot;) ## yearID lgID teamID franchID divID Rank G Ghome W L DivWin WCWin LgWin ## 1 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 2 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 3 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 4 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 5 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 6 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 7 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 8 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 9 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## 10 1985 NL ATL ATL W 5 162 81 66 96 N \u0026lt;NA\u0026gt; N ## WSWin R AB H X2B X3B HR BB SO SB CS HBP SF RA ER ERA CG SHO SV ## 1 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 2 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 3 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 4 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 5 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 6 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 7 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 8 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 9 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## 10 N 632 5526 1359 213 28 126 553 849 72 52 22 41 781 679 4.19 9 9 29 ## IPouts HA HRA BBA SOA E DP FP name ## 1 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 2 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 3 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 4 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 5 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 6 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 7 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 8 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 9 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## 10 4372 1512 134 642 776 159 197 0.976 Atlanta Braves ## park attendance BPF PPF teamIDBR teamIDlahman45 ## 1 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 2 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 3 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 4 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 5 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 6 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 7 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 8 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 9 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## 10 Atlanta-Fulton County Stadium 1350137 105 106 ATL ATL ## teamIDretro playerID salary ## 1 ATL barkele01 870000 ## 2 ATL bedrost01 550000 ## 3 ATL benedbr01 545000 ## 4 ATL campri01 633333 ## 5 ATL ceronri01 625000 ## 6 ATL chambch01 800000 ## 7 ATL dedmoje01 150000 ## 8 ATL forstte01 483333 ## 9 ATL garbege01 772000 ## 10 ATL harpete01 250000 Note: I print only 10 rows of data with the head() function. This part of the code below would generally not be used.\nThe sum of the number of rows in these two tables should equal the number of rows from the entire team_salary data table\nanti_rows \u0026lt;- team_salary %\u0026gt;% anti_join(top_salary_15) %\u0026gt;% nrow() ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;teamID\u0026quot;) semi_rows \u0026lt;- team_salary %\u0026gt;% semi_join(top_salary_15) %\u0026gt;% nrow() ## Joining, by = c(\u0026quot;yearID\u0026quot;, \u0026quot;teamID\u0026quot;) anti_rows + semi_rows == nrow(team_salary) ## [1] TRUE Exercises Using the Teams and Managers data, join the two tables and only keep the matching observations in both tables. Note, you may need to specify the column names directly you wish to join by. What happens to the columns that have the same names but are not keys? Using the same data tables from #1, add all the Managers variables to the Teams data while retaining all the rows for the Teams data.    ","date":1613606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613606400,"objectID":"c7fda7714c6a4e635ab0cdebf8f263b5","permalink":"https://psqf6250.brandonlebeau.org/rcode/data_joins/","publishdate":"2021-02-18T00:00:00Z","relpermalink":"/rcode/data_joins/","section":"rcode","summary":"Joining Data","tags":null,"title":"Joining Data","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will focus on reproducible tables. The focus will be on functionality built into R to incorporate reproducible tables in an R markdown document to help ensure the analysis is reproducible.\nObjectives After completing this module, students will be able to:\n Identify table elements Create reproducible tables  Weekly Videos  Introduction to Reproducible Tables    Formatting Table with kableExtra    Column, Row, and Cell Formatting    Grouping Columns or Rows   R Syntax  Reproducible Tables  Assignments To come \u0026hellip;\n","date":1648425600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648425600,"objectID":"0b7b08c36b1cc2e444b7b5b882d6fff6","permalink":"https://psqf6250.brandonlebeau.org/content/11-week11/","publishdate":"2022-03-28T00:00:00Z","relpermalink":"/content/11-week11/","section":"content","summary":"Reproducible Tables","tags":null,"title":"Week 11","type":"book"},{"authors":null,"categories":null,"content":"Exploratory Data Analysis and Data Restructuring: 10 pts\nDue: Around March 27th, 2021 - No penalty for late submissions, but due no later than May 8th.\n In this assignment, you will perform exploratory data analysis using the gss_cat data from the forcats package. The source file (the .Rmd) file will be turned in as well as the compiled version (html). Create a new .Rmd file for this assignment. You also do not need to explicitly answer the research question, rather this is used to guide the first part of the assignment.\nYou also do not need to include the code for most questions in the compiled (html) version since the Rmd will be turned in as well. If a question asks for code or there is particular elements of code you\u0026rsquo;d like to share, you can definitely include those in the final compiled version, but please limit those sections to specific elements rather than long chunks of code. Long chunks of code are best left for the Rmd document.\nThe source file (the .Rmd) file will be turned in as well as the compiled version (html). Note, please create a new Rmd document for this assignment rather than continue the one from the first assignment. Submit completed assignment, including Rmd and html to ICON.\nAll graphics should be of high quality, this includes formatting of axes, axes labels, etc. If none of the graphics are of high quality, a 2 pt penalty will apply over and above any item-specific reductions.\nResearch Questions The following research questions will be used to guide the assignment, but you do not need to answer these directly. The questions below will reference these questions.\n How is age related to the amount of television a person reports watching?  Questions   Does there appear to be patterns in the missing data from the variable tvhours by different income and age levels? Provide evidence for your reasoning. 1 pt\n  Provide a descriptive analysis exploring the research question above. Does age appear to be related to the amount of time a person spends watching television? Ensure in your discussion you provide justification for why you feel one way or the other and be as descriptive as possible. 1 pt\n   Data Import, Restructuring, Joining\nIn this part of the assignment, you will import data and perform data manipulations on this data file.\nQuestions   Read in the \u0026ldquo;ECLS_6250.csv\u0026rdquo; data file from the course website.\n Using the head() function, print the first few rows of the data and using the dim() function, print out the dimensions of the data. 1 pt    Verify that the data that are indeed missing are read in as missing values. Use the \u0026ldquo;ECLS_6250.pdf\u0026rdquo; codebook (found on the course website) to confirm values of missing data for each variable, these are listed for each variable directly in the codebook.\n Compute the mean of the following two variables: \u0026ldquo;C4R4MSCL\u0026rdquo; and \u0026ldquo;W3SESL\u0026rdquo;. 1 pt    Using the tidyr package, convert this data into an extra long format where the variables CHILDID, KURBAN_R, GENDER, and RACE are the id variables. The other data attributes would all represent data values to be restructured.\n Using the head() function, print the first few rows of the data and using the dim() function, print out the dimensions of the data. Note, you should have 6 columns when you are done with this step. 1 pt    Using the restructured data from #3 above, create three new variables that represent the type of variable (S = School, C = Child, W = family), the wave number, and remaining information. The type of variable and the wave number are the first and second characters of the variable names that were restructured (i.e. stacked) in #3. Hint, using the separate() function would be useful for this step and exploring some random rows of the data may be helpful using head() or tail() or sample_n().\n Using the head() function, print the first few rows of the data and using the dim() function, print out the dimensions of the data. Note, you should have 8 columns when you are done with this step. 1 pt    Using the restructured data from #4, combine the variable type (i.e., the attribute that is either S, C, or W) and left-over names. This new variable should be similar to the original variable names from when reading in the data from #1, but should not include the wave information in it. Hint, the unite() function should be helpful for this step.\n Using the head() function, print the first few rows of the data and using the dim() function, print out the dimensions of the data. Note, you should have 7 columns when you are done with this step. 1 pt    Finally, using the restructured data from #5, widen the data set to create a variable for each unique value from the newly created variable from #5.\n Using the head() function, print the first few rows of the data and using the dim() function, print out the dimensions of the data. Note, you should have 9 columns and fewer rows than #5 when you are done with this step. 1 pt    Read in the \u0026ldquo;ECLS_6250_school.csv\u0026rdquo; data file found on the course website. Using the restructured data created in #6, merge the school data imported in question #7 into the child level data. Use the type of join where the number of rows for the child level data are not changed. More specifically, the final data should have the same number of rows as #6, but will add 5 new columns.\n Using the head() function, print the first few rows of the merged data and using the dim() function, print out the dimensions of the merged data. 1 pt    This question has a number of steps which are highlighted below in more detail.\n Identify the 25 schools at wave 1 that have the highest proportion of female students and create a new data file that has has the school ID and proportion of female students in the school. Note: Use the codebook to identify which code represents males and females. It may also be helpful, although not necessary, to create a new variable for gender. Perform a filtering join that returns only the rows from the child level data (i.e., the final data from #7) at wave 1 that belong to the 25 schools that had the highest proportion of females at wave 1 (from step one of this question).   Using the head() function, print the first few rows of the data and using the dim() function, print out the dimensions of the data. 1 pt    ","date":1645401600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1645401600,"objectID":"6e81801222a7818e1b83b93e282b1f92","permalink":"https://psqf6250.brandonlebeau.org/assignments/assignment/assignment3/","publishdate":"2022-02-21T00:00:00Z","relpermalink":"/assignments/assignment/assignment3/","section":"assignments","summary":"Exploratory Data Analysis and Data Restructuring: 10 pts\nDue: Around March 27th, 2021 - No penalty for late submissions, but due no later than May 8th.\n In this assignment, you will perform exploratory data analysis using the gss_cat data from the forcats package.","tags":null,"title":"Assignment 3","type":"book"},{"authors":null,"categories":null,"content":"   To date I have ignored factor variables and how these are implemented in R. Much of this is due to the greater flexibility of character vectors instead of factors. Also, if using the readr or readxl packages to read in data, the variables are also read in as character strings instead of factors. However, there are situations when factors are useful. Most of these uses are for readability when creating output formats for a report or paper.\nThis set of notes will make use of the following three packages:\nlibrary(tidyverse) library(forcats) library(fivethirtyeight) Uses for Factors To see a few of the benefits of a factor, assume we have a variable that represents the levels of a survey question with five possible responses and we only saw three of those response categories.\nresp \u0026lt;- c(\u0026#39;Disagree\u0026#39;, \u0026#39;Agree\u0026#39;, \u0026#39;Neutral\u0026#39;) This type of variable has a natural order, namely the disagree side of the scale (i.e. strongly disagree) to the agree side of the scale (i.e. strongly agree) with neutral belonging in the middle. However, if we sort this variable, this ordering will not be taken into account with a character string.\nsort(resp) ## [1] \u0026quot;Agree\u0026quot; \u0026quot;Disagree\u0026quot; \u0026quot;Neutral\u0026quot; Notice, these are actually in alphabetical order, likely not what we wanted. This can be fixed by defining this variable as a factor with levels of the variable specified.\nscale_levels \u0026lt;- c(\u0026#39;Strongly Disagree\u0026#39;, \u0026#39;Disagree\u0026#39;, \u0026#39;Neutral\u0026#39;, \u0026#39;Agree\u0026#39;, \u0026#39;Strongly Agree\u0026#39;) resp_fact \u0026lt;- factor(resp, levels = scale_levels) resp_fact ## [1] Disagree Agree Neutral ## Levels: Strongly Disagree Disagree Neutral Agree Strongly Agree sort(resp_fact) ## [1] Disagree Neutral Agree ## Levels: Strongly Disagree Disagree Neutral Agree Strongly Agree Another benefit, if values that are not found in the levels of the factor variable, these will be replaced with NAs. For example,\nfactor(c(\u0026#39;disagree\u0026#39;, \u0026#39;Agree\u0026#39;, \u0026#39;Strongly Agree\u0026#39;), levels = scale_levels) ## [1] \u0026lt;NA\u0026gt; Agree Strongly Agree ## Levels: Strongly Disagree Disagree Neutral Agree Strongly Agree We can also explore valid levels of a variables with the levels function.\nlevels(resp_fact) ## [1] \u0026quot;Strongly Disagree\u0026quot; \u0026quot;Disagree\u0026quot; \u0026quot;Neutral\u0026quot; ## [4] \u0026quot;Agree\u0026quot; \u0026quot;Strongly Agree\u0026quot; Exercises How are factors stored internally by R? To explore this, use the str function on a factor variable and see what it looks like? To further this idea from #1, what happens when you do each of the following commands? Why is this happening?  as.numeric(resp) as.numeric(resp_fact)   Common Factor Manipulations In addition to setting the levels of the variable, there are two common tasks useful with factors.\nReorder factor levels for plotting or table creation Change the levels of the factor (i.e. collapse levels)  Examples of each of these will be given with the weather_check data from the fivethirtyeight package.\nweather_check ## # A tibble: 928 × 9 ## respondent_id ck_weather weather_source weather_source_… ck_weather_watch ## \u0026lt;dbl\u0026gt; \u0026lt;lgl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;ord\u0026gt; ## 1 3887201482 TRUE The default weath… \u0026lt;NA\u0026gt; Very likely ## 2 3887159451 TRUE The default weath… \u0026lt;NA\u0026gt; Very likely ## 3 3887152228 TRUE The default weath… \u0026lt;NA\u0026gt; Very likely ## 4 3887145426 TRUE The default weath… \u0026lt;NA\u0026gt; Somewhat likely ## 5 3887021873 TRUE A specific websit… Iphone app Very likely ## 6 3886937140 TRUE A specific websit… AccuWeather App Somewhat likely ## 7 3886923931 TRUE The Weather Chann… \u0026lt;NA\u0026gt; Very unlikely ## 8 3886913587 TRUE \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 9 3886889048 TRUE The Weather Chann… \u0026lt;NA\u0026gt; Very likely ## 10 3886848806 TRUE The default weath… \u0026lt;NA\u0026gt; Very likely ## # … with 918 more rows, and 4 more variables: age \u0026lt;fct\u0026gt;, female \u0026lt;lgl\u0026gt;, ## # hhold_income \u0026lt;ord\u0026gt;, region \u0026lt;chr\u0026gt; Reorder Factor Variables To show examples of this operation, suppose we calculated the proportion of respondents that checked the weather daily by region of the country. We could use dplyr for this:\nprop_check_weather \u0026lt;- weather_check %\u0026gt;% group_by(region) %\u0026gt;% summarise(prop = mean(ck_weather)) prop_check_weather ## # A tibble: 10 × 2 ## region prop ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 East North Central 0.858 ## 2 East South Central 0.927 ## 3 Middle Atlantic 0.885 ## 4 Mountain 0.792 ## 5 New England 0.942 ## 6 Pacific 0.697 ## 7 South Atlantic 0.740 ## 8 West North Central 0.815 ## 9 West South Central 0.904 ## 10 \u0026lt;NA\u0026gt; 0.548 This would be a bit easier to view if we plotted this data:\nggplot(prop_check_weather, aes(prop, region)) + geom_point() This plot is difficult to read, primarily due to the way the points are ordered. Showing the regions in alphabetical order makes it more difficult to discern the trend. Instead, we would likely wish to reorder this variable by the ascending order of the proportion that check the weather. We will use the fct_reorder function from the forcats package. Note, I also omit the NA category here.\nggplot(na.omit(prop_check_weather), aes(prop, fct_reorder(region, prop))) + geom_point() Need to be a bit careful with this operation however. For example:\nweather_check %\u0026gt;% group_by(hhold_income) %\u0026gt;% summarise(prop = mean(ck_weather)) %\u0026gt;% na.omit() %\u0026gt;% ggplot(aes(prop, fct_reorder(hhold_income, prop))) + geom_point() Instead, this is the proper way to show this relationship:\nweather_check %\u0026gt;% group_by(hhold_income) %\u0026gt;% summarise(prop = mean(ck_weather)) %\u0026gt;% na.omit() %\u0026gt;% ggplot(aes(prop, hhold_income)) + geom_point() Exercises Using data from the fivethirtyeight package called flying, explore the proportion of respondents that believe the reclining the chair while flying should be eliminated (the variable is recline_eliminate). Do these proportions differ by the location? Create a graphic that captures this relationship, you may wish to reorder the columns to more appropriately represent the relationship.    Rename Factor Levels These operations are useful to collapse categories or rename levels for publication. The primary function we will use for this operation is fct_recode from the forcats package.\nAgain, using the weather_check data, suppose we wished to change the levels of the age variable. The levels currently are:\nlevels(weather_check$age) ## [1] \u0026quot;18 - 29\u0026quot; \u0026quot;30 - 44\u0026quot; \u0026quot;45 - 59\u0026quot; \u0026quot;60+\u0026quot; Suppose we wished to better represent these as words. We can use this with mutate from dplyr combined with fct_recode:\nweather_check %\u0026gt;% mutate(age_recode = fct_recode(age, \u0026#39;18 to 29\u0026#39; = \u0026#39;18 - 29\u0026#39;, \u0026#39;30 to 44\u0026#39; = \u0026#39;30 - 44\u0026#39;, \u0026#39;45 to 59\u0026#39; = \u0026#39;45 - 59\u0026#39; )) %\u0026gt;% count(age_recode) ## # A tibble: 5 × 2 ## age_recode n ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 18 to 29 176 ## 2 30 to 44 204 ## 3 45 to 59 278 ## 4 60+ 258 ## 5 \u0026lt;NA\u0026gt; 12 We could also collapse categories by assigning many levels to the same new level. For example, suppose we wished to collapse the ck_weather_watch variable to unlikely and likely instead of the very unlikely to very likely.\nlevels(weather_check$ck_weather_watch) ## [1] \u0026quot;Very unlikely\u0026quot; \u0026quot;Somewhat unlikely\u0026quot; \u0026quot;Somewhat likely\u0026quot; ## [4] \u0026quot;Very likely\u0026quot; weather_check %\u0026gt;% mutate(watch_recode = fct_recode(ck_weather_watch, \u0026#39;Unlikely\u0026#39; = \u0026#39;Very unlikely\u0026#39;, \u0026#39;Unlikely\u0026#39; = \u0026#39;Somewhat unlikely\u0026#39;, \u0026#39;Likely\u0026#39; = \u0026#39;Somewhat likely\u0026#39;, \u0026#39;Likely\u0026#39; = \u0026#39;Very likely\u0026#39; )) %\u0026gt;% count(watch_recode) ## # A tibble: 3 × 2 ## watch_recode n ## \u0026lt;ord\u0026gt; \u0026lt;int\u0026gt; ## 1 Unlikely 281 ## 2 Likely 636 ## 3 \u0026lt;NA\u0026gt; 11 Finally, one last option that may be useful is to lump together categories that are too small to report independently. This functionality is implemented with the function fct_lump. For example, suppose we want to lump the region variable together to have only 5 regions.\nweather_check %\u0026gt;% mutate(region = fct_lump(region, n = 5)) %\u0026gt;% count(region, sort = TRUE) ## # A tibble: 7 × 2 ## region n ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 Other 219 ## 2 Pacific 185 ## 3 South Atlantic 154 ## 4 East North Central 141 ## 5 Middle Atlantic 104 ## 6 West South Central 94 ## 7 \u0026lt;NA\u0026gt; 31 Exercises Again, using the flying data from the fivethirtyeight package, is there a relationship between the proportion of respondents who have a children under 18 years old and if they believe it is rude to bring a baby on a plane? For this question, collapse the baby variable to two levels, no and yes.     ","date":1614297600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614297600,"objectID":"eb6a2c88e0f9f8f457a24e245df3b571","permalink":"https://psqf6250.brandonlebeau.org/rcode/factors/","publishdate":"2021-02-26T00:00:00Z","relpermalink":"/rcode/factors/","section":"rcode","summary":"Factors","tags":null,"title":"Factors","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week will move to interactive graphics, a way to change how users interact with the output you create.\nObjectives After completing this module, students will be able to:\n Identify utility of interactive graphics Create plotly interactive figures  Weekly Videos  Introduction to Interactive Graphics    Creating plotly Figures from Scratch    Creating Subplots with plotly    Other Interactive Frameworks   R Syntax  Interactive Graphics  Assignments To come \u0026hellip;\n","date":1648425600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648425600,"objectID":"a8dbdfe7139d04f477a3192c72a563a6","permalink":"https://psqf6250.brandonlebeau.org/content/12-week12/","publishdate":"2022-03-28T00:00:00Z","relpermalink":"/content/12-week12/","section":"content","summary":"Interactive Graphics","tags":null,"title":"Week 12","type":"book"},{"authors":null,"categories":null,"content":"Inferential Statistics with R: 6 pts\nDue around April 10th, 2022 - No penalty for late submissions, but due no later than May 8th.\n In this assignment, you will explore research questions from an inferential framework using R. The analyses will be more open ended and will likely contain data preparation steps as well. Please turn in the source file (the .Rmd) file as well as the compiled version (html). Create a new .Rmd file for this assignment. If a question asks for code or there is particular elements of code you\u0026rsquo;d like to share, you can definitely include those in the final compiled version, but please limit those sections to specific elements rather than long chunks of code. Long chunks of code are best left for the Rmd document.\nThe data for this assignment can be found on GitHub and ICON and is named \u0026ldquo;cal-fire-9-10-2020\u0026rdquo;, data on GitHub. A description of the variables is also provided on ICON. Use this data to explore the questions below. Note, the questions below will guide you through the research questions. You do not need to answer the research questions explicitly, instead you can focus on the specific questions, but keeping the overall research questions in mind may be helpful as you complete the assignment.\nAny graphics you create should be of high quality, this includes formatting of axes, axes labels, etc. If none of the graphics are of high quality, a 2 pt penalty will apply.\nResearch Questions  Is there evidence that the number of acres burned has increased for fires in more recent years? Does month help explain variation in the number of acres burned over and above the year of the fire? When the number of days the fire has burned in added to the model, are year or month the fire started still useful predictors?  Questions   Using text processing, create three new variables in the data that represents:\n the year the fire started the month the fire started Create a new variable that represents the length of time a fire burned. This can be created by using the difftime() function within R. Look at the help page to try to figure out how this function can compute differences in two dates.\nThe code is sufficient for this question. 1 pt    Are there any data points that are extreme values or outliers that you feel should be removed from this analysis? Discuss briefly, why you feel these values may impact the analysis and should therefore be removed. Be as specific as you can why any values should or should not be removed. If you identify data that are suspect, remove them from further analysis (i.e. use filter to remove the values). 1 pt\n  Fit two competing models to attempt to answer the 1st and 2nd research questions. Summarize briefly the results from the models with particular attention to answering the research question so that non-statistics/data science individuals could use the answer for their planning or decision making process. Note, consider carefully the best approach on how to include month and year in your models (i.e., continuous vs factor type variables). 1 pt\n Which model fits best or do you feel is the best model? Note, please do not include the output from the summary() function in your answer, instead pull out relevant information from the output to include in your description.    Check assumptions for the models from #3. Does there appear to be problems with meeting statistical assumptions? Provide rationale for why or why not. 1 pt\n  Fit another model to attempt to answer the third research question. Summarize briefly the results from the model with particular attention to answering the research question so that non-statistics/data science individuals could use the answer for their planning or decision making process. 1 pt\n Note, please do not include the output from the summary() function in your answer, instead pull out relevant information from the output to include in your description.    Finally, create a graphic that summarizes the results from your final model that you feel fits the data the best (i.e. this could be the model from #4 or #7). Discuss why you picked this model and describe why this figure does a good job of showing the takeaway message. 1 pt\n   Turning Tables into Graphics with R: 4 pts\nAny graphics you create should be of high quality, this includes formatting of axes, axes labels, etc. If none of the graphics are of high quality, a 1 pt penalty will apply.\nIntroduction Read the article Let\u0026rsquo;s Practice What We Preach: Turning Tables Into Graphs. In this article, Gelman, Pasarica, and Dodhia discuss the benefits of a graph instead of a table to succintly summarize statistical results.\nQuestions   Find a published table showing descriptive or inferential statistic results. Provide a copy of the table (a screen shot is fine for this purpose).\n  Turn the table from #1 above into a publication quality graphic using R. Ensure that this graphic conveys the same purpose as the original table. 1 pt\n  Create a different from the figure created in #3 above, and make an interactive graphic that attempts to convey the same message as the original table. Note, this figure should be an entirely different figure from that in #3. For example, if you created a bar chart in #3, create something other than a bar chart for this question. 1 pt\n  Briefly discuss whether you feel the graphs convey the message better or worse than the original table. Use specific examples from the table/graph and recommendations from the article in your discussion. Which figure do you feel does the best job in sharing the original purpose of the table? Be specific in your discussion. 1 pt\n  Take the data from the original table, to do this you may need to create an Excel file or use the function data.frame() to import the data from the original table. Use the kable() function and kableExtra package to create a reproducible table that looks as close as possible to the original table. 1 pt\n  ","date":1647216000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647216000,"objectID":"3ae8422c4e4b67c68c4c65e221f89597","permalink":"https://psqf6250.brandonlebeau.org/assignments/assignment/assignment4/","publishdate":"2022-03-14T00:00:00Z","relpermalink":"/assignments/assignment/assignment4/","section":"assignments","summary":"Inferential Statistics with R: 6 pts\nDue around April 10th, 2022 - No penalty for late submissions, but due no later than May 8th.\n In this assignment, you will explore research questions from an inferential framework using R.","tags":null,"title":"Assignment 4","type":"book"},{"authors":null,"categories":null,"content":"     An often useful task is to manipulate character string variables. This usually comes in the form of regular expressions. Regular expressions come as a part of the base R, however, the regular expressions found in the stringr package are a bit more consistent in their naming structure, so we will use them (they are simply wrappers around the base R regular expressions).\nThe following packages will be used in this section of notes.\nlibrary(tidyverse) # install.packages(\u0026quot;stringr\u0026quot;) library(stringr) Basic String Tasks This section will discuss three basic string functions that help with simple string manipulations. These functions include: str_length, str_c, and str_sub.\nstr_length The str_length function can be used to calculate the length of the string. For example:\nstring \u0026lt;- c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;, \u0026#39;IA\u0026#39;) str_length(string) ## [1] 9 12 10 2  str_c The str_c function allows you to combine strings together in different ways. One way to think about this is to think about pasting strings together. For example:\nstr_c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;, \u0026#39;IA\u0026#39;) ## [1] \u0026quot;Iowa CityCedar RapidsDes MoinesIA\u0026quot; Perhaps more useful:\nstr_c(c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;), \u0026#39;IA\u0026#39;) ## [1] \u0026quot;Iowa CityIA\u0026quot; \u0026quot;Cedar RapidsIA\u0026quot; \u0026quot;Des MoinesIA\u0026quot; More useful yet:\nstr_c(c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;), \u0026#39;IA\u0026#39;, sep = \u0026#39;, \u0026#39;) ## [1] \u0026quot;Iowa City, IA\u0026quot; \u0026quot;Cedar Rapids, IA\u0026quot; \u0026quot;Des Moines, IA\u0026quot; You can also collapse multiple vectors of strings into a single string using the collapse argument.\nstr_c(c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;), collapse = \u0026#39;, \u0026#39;) ## [1] \u0026quot;Iowa City, Cedar Rapids, Des Moines\u0026quot;  str_sub The str_sub function is useful for subsetting strings by location. For example:\nstr_sub(c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;), 1, 4) ## [1] \u0026quot;Iowa\u0026quot; \u0026quot;Ceda\u0026quot; \u0026quot;Des \u0026quot; You can use negative numbers to start from the end:\nstr_sub(c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;), -6, -1) ## [1] \u0026quot;a City\u0026quot; \u0026quot;Rapids\u0026quot; \u0026quot;Moines\u0026quot;   Regular Expressions Regular expressions are complicated and take awhile to master. This introduction is just going to cover the surface to get you started. To see the basics of regular expressions, we are going to use the str_view function to view text matches.\nThe most basic regular expression is simply to match literal text. For example:\nx \u0026lt;- c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Cedar Rapids\u0026#39;, \u0026#39;Des Moines\u0026#39;) str_view(x, \u0026#39;City\u0026#39;)  {\"x\":{\"html\":\"\\n Iowa City\\n Cedar Rapids\\n Des Moines\\n\"},\"evals\":[],\"jsHooks\":[]} Note that generally, regular expressions are case sensitive.\nstr_view(x, \u0026#39;city\u0026#39;)  {\"x\":{\"html\":\"\\n Iowa City\\n Cedar Rapids\\n Des Moines\\n\"},\"evals\":[],\"jsHooks\":[]} If you want the expression to ignore case, use the ignore_case argument in tandem with regex.\nstr_view(x, regex(\u0026#39;city\u0026#39;, ignore_case = TRUE))  {\"x\":{\"html\":\"\\n Iowa City\\n Cedar Rapids\\n Des Moines\\n\"},\"evals\":[],\"jsHooks\":[]} Two other useful regular expression tools are anchoring and repeating patterns. First, anchor refers to whether the match should occur anywhere (the default), match at the beginning of the string, or match at the end of the string. To match at the start of the string:\nx \u0026lt;- c(\u0026#39;Iowa City\u0026#39;, \u0026#39;Des Moines, Iowa\u0026#39;) str_view(x, \u0026#39;^Iowa\u0026#39;)  {\"x\":{\"html\":\"\\n Iowa City\\n Des Moines, Iowa\\n\"},\"evals\":[],\"jsHooks\":[]} Or to match at the end of a string:\nstr_view(x, \u0026#39;Iowa$\u0026#39;)  {\"x\":{\"html\":\"\\n Iowa City\\n Des Moines, Iowa\\n\"},\"evals\":[],\"jsHooks\":[]} There are three operators that are useful for matching repetitious strings.\n ? 0 or 1 match + 1 or more * 0 or more  Examples of these are given below:\nsounds \u0026lt;- c(\u0026#39;baaaa\u0026#39;, \u0026#39;ssss\u0026#39;, \u0026#39;moo\u0026#39;, \u0026#39;buzz\u0026#39;, \u0026#39;purr\u0026#39;) str_view(sounds, \u0026#39;a?\u0026#39;)  {\"x\":{\"html\":\"\\n baaaa\\n ssss\\n moo\\n buzz\\n purr\\n\"},\"evals\":[],\"jsHooks\":[]} str_view(sounds, \u0026#39;a+\u0026#39;)  {\"x\":{\"html\":\"\\n baaaa\\n ssss\\n moo\\n buzz\\n purr\\n\"},\"evals\":[],\"jsHooks\":[]} str_view(sounds, \u0026#39;rrr*\u0026#39;)  {\"x\":{\"html\":\"\\n baaaa\\n ssss\\n moo\\n buzz\\n purr\\n\"},\"evals\":[],\"jsHooks\":[]} str_view(sounds, \u0026#39;rrr+\u0026#39;)  {\"x\":{\"html\":\"\\n baaaa\\n ssss\\n moo\\n buzz\\n purr\\n\"},\"evals\":[],\"jsHooks\":[]} There are additional repetition operators using braces, {} that can be useful.\n {n} match exactly n {n, } match n or more {, m} match at most m {n, m} match between n and m  Exercises Using the str_view function and the sounds object created above, rewrite this regular expression using braces: str_view(sounds, 'rrr*'). Explore the str_trim function. What does this do? Test this function on the following string: string \u0026lt;- \"\\n\\nString with trailing and leading white space\\n\\n\"    Regular Expression Functions So far we have just visualized the regular expression match. This is useful for testing, however, commonly we would like to create a new variable based on information processed from text strings. The tools we will explore are: str_detect, str_count, str_extract, str_replace, and str_split.\nSuppose we have the following string:\nx \u0026lt;- c(\u0026#39;Iowa City, Iowa\u0026#39;, \u0026#39;Cedar Rapids, IA\u0026#39;, \u0026#39;Des Moines, Iowa\u0026#39;, \u0026#39;Waterloo, IA\u0026#39;, \u0026#39;Rochester, Minnesota\u0026#39;) x ## [1] \u0026quot;Iowa City, Iowa\u0026quot; \u0026quot;Cedar Rapids, IA\u0026quot; \u0026quot;Des Moines, Iowa\u0026quot; ## [4] \u0026quot;Waterloo, IA\u0026quot; \u0026quot;Rochester, Minnesota\u0026quot; Supose we were interested in knowing which cities are from Iowa in this text string, the str_detect function is useful for this.\nstr_detect(x, \u0026#39;Iowa$\u0026#39;) ## [1] TRUE FALSE TRUE FALSE FALSE This didn’t return all the correct matches due to formatting differences. There are two options to fix this. First, we could search for two strings:\nstr_detect(x, \u0026#39;Iowa$|IA$\u0026#39;) ## [1] TRUE TRUE TRUE TRUE FALSE We could then calculate the proportion of cities in the string directly:\nmean(str_detect(x, \u0026#39;Iowa$|IA$\u0026#39;)) ## [1] 0.8 Another useful related function to str_detect is str_count which instead of TRUE/FALSE, will tell you how many matches are in each string.\nstr_count(x, \u0026#39;Iowa$|IA$\u0026#39;) ## [1] 1 1 1 1 0 There are instances where you will need to be careful with this function as it will calculate number of matches.\nstr_count(x, \u0026#39;Iowa|IA\u0026#39;) ## [1] 2 1 1 1 0 Replace Text Above we solved the different formatting differences by searching for two text strings. This can be useful for a few different strings, however, for more complex searches, it can be useful to standardize the text to be the same across variables. This is the job for str_replace.\nstr_replace(x, \u0026#39;Iowa$\u0026#39;, \u0026#39;IA\u0026#39;) ## [1] \u0026quot;Iowa City, IA\u0026quot; \u0026quot;Cedar Rapids, IA\u0026quot; \u0026quot;Des Moines, IA\u0026quot; ## [4] \u0026quot;Waterloo, IA\u0026quot; \u0026quot;Rochester, Minnesota\u0026quot; This function takes two arguments, first the text to be matched and second the text the match should be changed to. If there are no matches the text is not changed. You need to be careful with this function too:\nstr_replace(x, \u0026#39;Iowa\u0026#39;, \u0026#39;IA\u0026#39;) ## [1] \u0026quot;IA City, Iowa\u0026quot; \u0026quot;Cedar Rapids, IA\u0026quot; \u0026quot;Des Moines, IA\u0026quot; ## [4] \u0026quot;Waterloo, IA\u0026quot; \u0026quot;Rochester, Minnesota\u0026quot; By default, the function will only replace the first match. If you’d like to replace all matches you need to use the str_replace_all function.\nstr_replace_all(x, \u0026#39;Iowa\u0026#39;, \u0026#39;IA\u0026#39;) ## [1] \u0026quot;IA City, IA\u0026quot; \u0026quot;Cedar Rapids, IA\u0026quot; \u0026quot;Des Moines, IA\u0026quot; ## [4] \u0026quot;Waterloo, IA\u0026quot; \u0026quot;Rochester, Minnesota\u0026quot; This operation is not useful here, but there are many places that this is a useful operation.\n Extract Text If you wished to extract text instead of replacing text, str_extract is useful for this. For example, if we wished to extract the Minnesota:\nstr_extract(x, \u0026#39;Minnesota\u0026#39;) ## [1] NA NA NA NA \u0026quot;Minnesota\u0026quot; You can build more complicated expressions using the str_extract function. For example, suppose we wished to extract only the city name.\nstr_extract(x, \u0026#39;^.*,\u0026#39;) ## [1] \u0026quot;Iowa City,\u0026quot; \u0026quot;Cedar Rapids,\u0026quot; \u0026quot;Des Moines,\u0026quot; \u0026quot;Waterloo,\u0026quot; ## [5] \u0026quot;Rochester,\u0026quot; This included the comma as well which may not be desired, we will show another way to achieve the same operation with the str_split function. One quick note about the above operation, I used a .. The . means to match any character (except a new line character). To match a literal ., you would need to escape this with \\\\..\n Split on Delimiter If you’d like to split a string based on a common delimiter, using the str_split function is useful. For example, if we wished to split the city from the state:\nstr_split(x, \u0026#39;, \u0026#39;) ## [[1]] ## [1] \u0026quot;Iowa City\u0026quot; \u0026quot;Iowa\u0026quot; ## ## [[2]] ## [1] \u0026quot;Cedar Rapids\u0026quot; \u0026quot;IA\u0026quot; ## ## [[3]] ## [1] \u0026quot;Des Moines\u0026quot; \u0026quot;Iowa\u0026quot; ## ## [[4]] ## [1] \u0026quot;Waterloo\u0026quot; \u0026quot;IA\u0026quot; ## ## [[5]] ## [1] \u0026quot;Rochester\u0026quot; \u0026quot;Minnesota\u0026quot; The str_split function will remove the delimiter that it used to split on. The function also allows you to simplify the structure:\nstr_split(x, \u0026#39;, \u0026#39;, simplify = TRUE) ## [,1] [,2] ## [1,] \u0026quot;Iowa City\u0026quot; \u0026quot;Iowa\u0026quot; ## [2,] \u0026quot;Cedar Rapids\u0026quot; \u0026quot;IA\u0026quot; ## [3,] \u0026quot;Des Moines\u0026quot; \u0026quot;Iowa\u0026quot; ## [4,] \u0026quot;Waterloo\u0026quot; \u0026quot;IA\u0026quot; ## [5,] \u0026quot;Rochester\u0026quot; \u0026quot;Minnesota\u0026quot; Now a matrix is returned.\n  Real World Example To give a sense of some real world applications of regular expressions, I’m going to use the “ufo.csv” data we used once previously.\nufo \u0026lt;- read_csv(\u0026#39;https://raw.githubusercontent.com/lebebr01/psqf-6250-blogdown/main/data/ufo.csv\u0026#39;) ## Rows: 8031 Columns: 7 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (7): Date / Time, City, State, Shape, Duration, Summary, Posted ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ufo ## # A tibble: 8,031 × 7 ## `Date / Time` City State Shape Duration Summary Posted ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 12/12/14 17:30 North Wales PA Triang… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; ## 2 12/12/14 12:40 Cartersville GA Unknown 3.6 min… \u0026quot;Looki… 12/12… ## 3 12/12/14 06:30 Isle of Man (UK/England) \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… ## 4 12/12/14 01:00 Miamisburg OH Changi… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… ## 5 12/12/14 00:00 Spotsylvania VA Unknown 1 minute \u0026quot;White… 12/12… ## 6 12/11/14 23:25 Kenner LA Chevron ~1 minu… \u0026quot;Stran… 12/12… ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… ## 8 12/11/14 20:04 Phoenix AZ Chevron 3 minut… \u0026quot;4 Ora… 12/12… ## 9 12/11/14 20:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… ## 10 12/11/14 18:30 Longview WA Cylind… 10 seco… \u0026quot;Two c… 12/12… ## # … with 8,021 more rows A few things may be of interest here. First, we may wish to add columns that split the Duration variable into a time and metric variables.\nufo_duration \u0026lt;- str_split(ufo$Duration, \u0026#39; \u0026#39;, simplify = TRUE) cbind(ufo, ufo_duration) %\u0026gt;% head(n = 20) ## Date / Time City State Shape Duration ## 1 12/12/14 17:30 North Wales PA Triangle 5 minutes ## 2 12/12/14 12:40 Cartersville GA Unknown 3.6 minutes ## 3 12/12/14 06:30 Isle of Man (UK/England) \u0026lt;NA\u0026gt; Light 2 seconds ## 4 12/12/14 01:00 Miamisburg OH Changing \u0026lt;NA\u0026gt; ## 5 12/12/14 00:00 Spotsylvania VA Unknown 1 minute ## 6 12/11/14 23:25 Kenner LA Chevron ~1 minute ## 7 12/11/14 23:15 Eugene OR Disk 2 minutes ## 8 12/11/14 20:04 Phoenix AZ Chevron 3 minutes ## 9 12/11/14 20:00 Franklin NC Disk 5 minutes ## 10 12/11/14 18:30 Longview WA Cylinder 10 seconds ## 11 12/11/14 17:30 Markesan WI Light 10 minutes ## 12 12/11/14 16:40 Birmingham AL Fireball 20 minutes ## 13 12/11/14 06:00 West Milford NJ Fireball 10 seconds ## 14 12/11/14 00:00 Williamsburg VA Egg 10 minutes ## 15 12/10/14 20:30 Chandler AZ Sphere 1 hour ## 16 12/10/14 20:00 Maricopa AZ Formation 20-25 minutes ## 17 12/10/14 19:30 Litchfield Park AZ Formation 20 minutes ## 18 12/10/14 19:15 Flagler CO Light 1 minute ## 19 12/10/14 19:00 Garner NC Light 12 minutes ## 20 12/10/14 17:30 Ruidoso NM Fireball 20 minutes ## Summary ## 1 I heard an extremely loud noise outside, and went onto my balcony to investigate. I saw an very very large green light headed my direct ## 2 Looking up towards the west I noticed an object that flashed from white to green to red. ((NUFORC Note: Possible star?? PD)) ## 3 Over the Isle of Man, very fast moving light, diving then zooming. ## 4 Bright color changing and, shape shifting object seen over Miamisburg, OH. ((NUFORC Note: Possible \u0026quot;twinkling\u0026quot; star?? PD)) ## 5 White then orange orb gained a \u0026quot;tail of light\u0026quot; when chased off by a heli. ## 6 Strange, chevron-shaped, ufo moving east to west over Kenner. ## 7 Dual orange orbs in Eugene, Oregon. 12/11/2014. ## 8 4 Orange Lights Spotted South Of The Phoenix Area. ## 9 There were 5 or 6 lights in a row blinking, whites and reds. It was just sitting there over top the ridge of the mountains. ## 10 Two cylinder shaped objects that flew parallel in the sky. ## 11 Dark sky, large lights, nothing like an airplane, turning on and off in a pattern. ## 12 UFOs moving fast like fireballs or individual rockets. ## 13 Strange light across sky. ## 14 Bright light object with three clusters of light. ## 15 1-7 bright orange spheres seen for over an hour in Chandler, Arizona, near the Gila River Reservation. ## 16 Bright orange lights over Maricopa. ## 17 Multiple lights in the sky in Litchfield Park, Arizona. ## 18 Eastern Colorado lights. ## 19 Lights in distance quickly moving in every direction then shooting up at great speed. ## 20 1 lg. bright orange orb that split into 3 orbs. Fighter jets chased them \u0026amp; they disappeared. Mil. jets, helis, and a b2 followed. ## Posted 1 2 3 4 5 6 7 ## 1 \u0026lt;NA\u0026gt; 5 minutes ## 2 12/12/14 3.6 minutes ## 3 12/12/14 2 seconds ## 4 12/12/14 \u0026lt;NA\u0026gt; ## 5 12/12/14 1 minute ## 6 12/12/14 ~1 minute ## 7 12/12/14 2 minutes ## 8 12/12/14 3 minutes ## 9 12/12/14 5 minutes ## 10 12/12/14 10 seconds ## 11 12/12/14 10 minutes ## 12 12/12/14 20 minutes ## 13 12/12/14 10 seconds ## 14 12/12/14 10 minutes ## 15 12/12/14 1 hour ## 16 12/12/14 20-25 minutes ## 17 12/12/14 20 minutes ## 18 12/12/14 1 minute ## 19 12/12/14 12 minutes ## 20 12/12/14 20 minutes It could also be useful to count the number of times colors were mentioned in the summary text.\nufo %\u0026gt;% mutate( num_colors = str_count(Summary, \u0026#39;white|green|red|blue|orange|purple|yellow\u0026#39;) ) ## # A tibble: 8,031 × 8 ## `Date / Time` City State Shape Duration Summary Posted num_colors ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; ## 1 12/12/14 17:30 North Wales PA Tria… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; 1 ## 2 12/12/14 12:40 Cartersville GA Unkn… 3.6 min… \u0026quot;Looki… 12/12… 3 ## 3 12/12/14 06:30 Isle of Man (U… \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… 0 ## 4 12/12/14 01:00 Miamisburg OH Chan… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… 0 ## 5 12/12/14 00:00 Spotsylvania VA Unkn… 1 minute \u0026quot;White… 12/12… 1 ## 6 12/11/14 23:25 Kenner LA Chev… ~1 minu… \u0026quot;Stran… 12/12… 0 ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… 1 ## 8 12/11/14 20:04 Phoenix AZ Chev… 3 minut… \u0026quot;4 Ora… 12/12… 0 ## 9 12/11/14 20:00 Franklin NC Disk 5 minut… \u0026quot;There… 12/12… 2 ## 10 12/11/14 18:30 Longview WA Cyli… 10 seco… \u0026quot;Two c… 12/12… 0 ## # … with 8,021 more rows  An Easier way to manipulate dates The lubridate package in R makes working with date vectors much simpler.\n# install.packages(\u0026quot;lubridate\u0026quot;) library(lubridate) First, we need to convert the Date/Time column in the ufo data to an actual date column. Note above that this column is actually a character vector. Fortunately, lubridate has some functions for common ways that dates and times are stored. The biggest hurdle to know which function to use, is to identify the pattern in the date/time column in our data. Below I print the first 6 rows of the date/time vector of data. Notice that the format is month/day/year then hour/minutes. We can use this information to parse the column to a date/time vector using lubridate’s built in date conversion tools.\nhead(ufo$`Date / Time`) ## [1] \u0026quot;12/12/14 17:30\u0026quot; \u0026quot;12/12/14 12:40\u0026quot; \u0026quot;12/12/14 06:30\u0026quot; \u0026quot;12/12/14 01:00\u0026quot; ## [5] \u0026quot;12/12/14 00:00\u0026quot; \u0026quot;12/11/14 23:25\u0026quot; The primary way to determine which conversion tool to use, is to understand lubridate’s shorthand notation. Below is a list showing these elements.\nFor date components, these are the shorthand notation. * y = year * m = month * d = day\nFor time components, these are the shorthand notation. * h = hours * m = minutes * s = seconds\nNote that “m” stands for both minute and month, but is used in context with either the date or time conversion. The lubridate package will handle this for us. Based on this table and the pattern depicted above, we can convert this with the following pattern and function: mdy_hm(). This can be read in English as, month, day, year followed by hour and minute.\nufo \u0026lt;- ufo %\u0026gt;% mutate(converted_date = mdy_hm(`Date / Time`)) ## Warning: 56 failed to parse. ufo ## # A tibble: 8,031 × 8 ## `Date / Time` City State Shape Duration Summary Posted converted_date ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dttm\u0026gt; ## 1 12/12/14 17:30 North… PA Tria… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; 2014-12-12 17:30:00 ## 2 12/12/14 12:40 Carte… GA Unkn… 3.6 min… \u0026quot;Looki… 12/12… 2014-12-12 12:40:00 ## 3 12/12/14 06:30 Isle … \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… 2014-12-12 06:30:00 ## 4 12/12/14 01:00 Miami… OH Chan… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… 2014-12-12 01:00:00 ## 5 12/12/14 00:00 Spots… VA Unkn… 1 minute \u0026quot;White… 12/12… 2014-12-12 00:00:00 ## 6 12/11/14 23:25 Kenner LA Chev… ~1 minu… \u0026quot;Stran… 12/12… 2014-12-11 23:25:00 ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… 2014-12-11 23:15:00 ## 8 12/11/14 20:04 Phoen… AZ Chev… 3 minut… \u0026quot;4 Ora… 12/12… 2014-12-11 20:04:00 ## 9 12/11/14 20:00 Frank… NC Disk 5 minut… \u0026quot;There… 12/12… 2014-12-11 20:00:00 ## 10 12/11/14 18:30 Longv… WA Cyli… 10 seco… \u0026quot;Two c… 12/12… 2014-12-11 18:30:00 ## # … with 8,021 more rows The resulting output has the converted_date added to the original table. Note, we did get some warning messages, these basically say that there were some dates that could not be converted properly, these are likely due to missing data or different patterns in the conversion. We would want to inspect these in more detail to understand why those 56 date/times failed to parse.\nOnce the dates are now in a date/time format, we can now use additional functions from lubridate to pull out specific elements of the date or time. For example, we could use year(), month(), day() to extract the year, month or day from each element. There are also similar functions, hour(), minute(), and second(). These are shown in use below.\nufo %\u0026gt;% mutate( year = year(converted_date), month = month(converted_date), day = day(converted_date), hour = hour(converted_date), minute = minute(converted_date), month_label_abbr = month(converted_date, label = TRUE), wday_abbr = wday(converted_date, label = TRUE), month_label = month(converted_date, label = TRUE, abbr = FALSE), wday = wday(converted_date, label = TRUE, abbr = FALSE) ) ## # A tibble: 8,031 × 17 ## `Date / Time` City State Shape Duration Summary Posted converted_date ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dttm\u0026gt; ## 1 12/12/14 17:30 North… PA Tria… 5 minut… \u0026quot;I hea… \u0026lt;NA\u0026gt; 2014-12-12 17:30:00 ## 2 12/12/14 12:40 Carte… GA Unkn… 3.6 min… \u0026quot;Looki… 12/12… 2014-12-12 12:40:00 ## 3 12/12/14 06:30 Isle … \u0026lt;NA\u0026gt; Light 2 secon… \u0026quot;Over … 12/12… 2014-12-12 06:30:00 ## 4 12/12/14 01:00 Miami… OH Chan… \u0026lt;NA\u0026gt; \u0026quot;Brigh… 12/12… 2014-12-12 01:00:00 ## 5 12/12/14 00:00 Spots… VA Unkn… 1 minute \u0026quot;White… 12/12… 2014-12-12 00:00:00 ## 6 12/11/14 23:25 Kenner LA Chev… ~1 minu… \u0026quot;Stran… 12/12… 2014-12-11 23:25:00 ## 7 12/11/14 23:15 Eugene OR Disk 2 minut… \u0026quot;Dual … 12/12… 2014-12-11 23:15:00 ## 8 12/11/14 20:04 Phoen… AZ Chev… 3 minut… \u0026quot;4 Ora… 12/12… 2014-12-11 20:04:00 ## 9 12/11/14 20:00 Frank… NC Disk 5 minut… \u0026quot;There… 12/12… 2014-12-11 20:00:00 ## 10 12/11/14 18:30 Longv… WA Cyli… 10 seco… \u0026quot;Two c… 12/12… 2014-12-11 18:30:00 ## # … with 8,021 more rows, and 9 more variables: year \u0026lt;dbl\u0026gt;, month \u0026lt;dbl\u0026gt;, ## # day \u0026lt;int\u0026gt;, hour \u0026lt;int\u0026gt;, minute \u0026lt;int\u0026gt;, month_label_abbr \u0026lt;ord\u0026gt;, ## # wday_abbr \u0026lt;ord\u0026gt;, month_label \u0026lt;ord\u0026gt;, wday \u0026lt;ord\u0026gt;  ","date":1614297600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614297600,"objectID":"5e4c704a4cd83a539d7f28471a80a35e","permalink":"https://psqf6250.brandonlebeau.org/rcode/strings/","publishdate":"2021-02-26T00:00:00Z","relpermalink":"/rcode/strings/","section":"rcode","summary":"Working with Character Strings","tags":null,"title":"Working with Character Strings","type":"book"},{"authors":null,"categories":null,"content":"Introduction This week turns to learning the basics of creating your own functions within R. Part of the power of R is that it is a fully functional programming language that can be used to extend R\u0026rsquo;s functionality. This week will give you some basics to create your own functions.\nObjectives After completing this module, students will be able to:\n Define user written functions Define function conditional logic Define function inputs and returned values Identify need for user written functions Create user written functions  Weekly Videos  Introduction to Custom User Functions    Function Basics    Conditional Logic in Functions    Returned Values from Functions   R Syntax  User Created Functions  Assignments To come \u0026hellip;\n","date":1648425600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648425600,"objectID":"b24b83c66d10ecf3fa7b025f57f39bb3","permalink":"https://psqf6250.brandonlebeau.org/content/13-week13/","publishdate":"2022-03-28T00:00:00Z","relpermalink":"/content/13-week13/","section":"content","summary":"Creating R Functions","tags":null,"title":"Week 13","type":"book"},{"authors":null,"categories":null,"content":"   This section of the notes is going to introduce you into the world of models in R. For the most part, we are going to stick with simple linear models and build up the various models using one function lm. The lm function is an extremely powerful function that can accommodate many different models in a single framework.\nThis section of notes is going to make use of four R packages:\nlibrary(tidyverse) library(modelr) # install.packages(\u0026quot;broom\u0026quot;) library(broom) library(fivethirtyeight) Simple Linear Regression First we need some data. We are going to explore the data from the fivethirtyeight package called fandango. Here are the first few rows:\nfandango ## # A tibble: 146 × 23 ## film year rottentomatoes rottentomatoes_… metacritic metacritic_user imdb ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Aveng… 2015 74 86 66 7.1 7.8 ## 2 Cinde… 2015 85 80 67 7.5 7.1 ## 3 Ant-M… 2015 80 90 64 8.1 7.8 ## 4 Do Yo… 2015 18 84 22 4.7 5.4 ## 5 Hot T… 2015 14 28 29 3.4 5.1 ## 6 The W… 2015 63 62 50 6.8 7.2 ## 7 Irrat… 2015 42 53 53 7.6 6.9 ## 8 Top F… 2014 86 64 81 6.8 6.5 ## 9 Shaun… 2015 99 82 81 8.8 7.4 ## 10 Love … 2015 89 87 80 8.5 7.8 ## # … with 136 more rows, and 16 more variables: fandango_stars \u0026lt;dbl\u0026gt;, ## # fandango_ratingvalue \u0026lt;dbl\u0026gt;, rt_norm \u0026lt;dbl\u0026gt;, rt_user_norm \u0026lt;dbl\u0026gt;, ## # metacritic_norm \u0026lt;dbl\u0026gt;, metacritic_user_nom \u0026lt;dbl\u0026gt;, imdb_norm \u0026lt;dbl\u0026gt;, ## # rt_norm_round \u0026lt;dbl\u0026gt;, rt_user_norm_round \u0026lt;dbl\u0026gt;, metacritic_norm_round \u0026lt;dbl\u0026gt;, ## # metacritic_user_norm_round \u0026lt;dbl\u0026gt;, imdb_norm_round \u0026lt;dbl\u0026gt;, ## # metacritic_user_vote_count \u0026lt;int\u0026gt;, imdb_user_vote_count \u0026lt;int\u0026gt;, ## # fandango_votes \u0026lt;int\u0026gt;, fandango_difference \u0026lt;dbl\u0026gt; These data have 146 rows and 23 columns.\nSuppose we were interested in exploring the relationship between ratings from rottentomatoes and metacritic. Note, we will not use the user rating for this exploration. A natural first step may be to look at a scatterplot of these data to explore the shape of the relationship.\nggplot(fandango, aes(rottentomatoes, metacritic)) + theme_bw() + geom_point(size = 3) To better explore the relationship, including a smoother can be useful:\nggplot(fandango, aes(rottentomatoes, metacritic)) + theme_bw() + geom_point(size = 3) + geom_smooth(method = \u0026#39;loess\u0026#39;, se = FALSE, size = 1.5) ## `geom_smooth()` using formula \u0026#39;y ~ x\u0026#39; It may also be useful to calculate a correlation coefficient between these two variables.\nwith(fandango, cor(rottentomatoes, metacritic)) ## [1] 0.9573596 Fit Linear Regression Now we will attempt to fit a model to these data. Namely, the relationship appears to be mostly linear and suppose we wished to predict the metacritic review score with the rotten tomatoes score. To do this, we will use the lm function and the ~ that we used with facet_wrap and facet_grid.\nMore concretely, suppose we wished to fit the model: \\[ metacritic_{i} = b_{0} + b_{1} rottentomatoes_{i} + \\epsilon_{i} \\]\nIn this model, \\(metacritic_{i}\\) is the dependent or response variable and \\(rottentomatoes_{i}\\) is the independent, predictor, or covariate. In many traditional statistics courses, \\(metacritic_{i}\\) would be represented with \\(Y\\) and \\(rottentomatoes_{i}\\) would be represented with \\(X\\). It is often more descriptive to represent these with their variable names instead of \\(Y\\) or \\(X\\).\nTo fit this model, we simply need to replace the \\(=\\) sign found in the equation above with the ~. For example, the equation above would turn into:\nmeta_mod \u0026lt;- lm(metacritic ~ rottentomatoes, data = fandango) To see output from the model, we can take two approaches. One is to use summary and another is to use the tidy function from the broom package. I show each below in turn.\nsummary(meta_mod) ## ## Call: ## lm(formula = metacritic ~ rottentomatoes, data = fandango) ## ## Residuals: ## Min 1Q Median 3Q Max ## -11.7209 -4.1999 0.3855 3.7952 14.6662 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 21.12097 1.05710 19.98 \u0026lt;2e-16 *** ## rottentomatoes 0.61935 0.01558 39.77 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 5.658 on 144 degrees of freedom ## Multiple R-squared: 0.9165, Adjusted R-squared: 0.916 ## F-statistic: 1581 on 1 and 144 DF, p-value: \u0026lt; 2.2e-16 tidy(meta_mod) ## # A tibble: 2 × 5 ## term estimate std.error statistic p.value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 (Intercept) 21.1 1.06 20.0 2.36e-43 ## 2 rottentomatoes 0.619 0.0156 39.8 1.54e-79 With the broom package, the results are reported in a tidier framework. We will see additional useful functions using the broom package later on.\nYou can also directly request confidence intervals with the tidy function:\ntidy(meta_mod, conf.int = TRUE) ## # A tibble: 2 × 7 ## term estimate std.error statistic p.value conf.low conf.high ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 (Intercept) 21.1 1.06 20.0 2.36e-43 19.0 23.2 ## 2 rottentomatoes 0.619 0.0156 39.8 1.54e-79 0.589 0.650 Exercises Fit a new model using the fandango data that attempts to explain the metacritic ratings with the imdb rating. Fit another model using the fandango data that attempts to explain the metacritic ratings with the fandango_ratingvalue scores. Exploring the predictors of these two new models with the one fitted above with the rottentomatoes scores, which rating score best helps us predict the metacritic scores?    Workings Behind lm function To see what the lm function is doing behind the scenes, we will use the model_matrix function from the modelr package. For example, from the model above:\nmodel_matrix(fandango, metacritic ~ rottentomatoes) ## # A tibble: 146 × 2 ## `(Intercept)` rottentomatoes ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 74 ## 2 1 85 ## 3 1 80 ## 4 1 18 ## 5 1 14 ## 6 1 63 ## 7 1 42 ## 8 1 86 ## 9 1 99 ## 10 1 89 ## # … with 136 more rows This is often referred to as the design matrix in statistics text books and is one of the matrices that are used by lm to calculate the estimated parameters from above. Notice that is automatically included the intercept, normally this is of interest, if it is not, we can omit it directly by including a -1 in the formula. For example:\nmodel_matrix(fandango, metacritic ~ rottentomatoes - 1) ## # A tibble: 146 × 1 ## rottentomatoes ## \u0026lt;dbl\u0026gt; ## 1 74 ## 2 85 ## 3 80 ## 4 18 ## 5 14 ## 6 63 ## 7 42 ## 8 86 ## 9 99 ## 10 89 ## # … with 136 more rows tidy(lm(metacritic ~ rottentomatoes - 1, data = fandango)) ## # A tibble: 1 × 5 ## term estimate std.error statistic p.value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 rottentomatoes 0.898 0.0134 67.3 3.14e-111 You need to be careful with this syntax as this is commonly not is what is desired when fitting a linear model.\n Categorical Predictors Suppose we were interested in the following research question:\n To what extent are there average differences in movie ratings between rottentomatoes and metacritic?  To answer this research question, we would need to transform our data to great a group variable and a rating variable.\nmeta_rotten \u0026lt;- fandango %\u0026gt;% select(film, year, rottentomatoes, metacritic) %\u0026gt;% gather(group, rating, rottentomatoes, metacritic) meta_rotten ## # A tibble: 292 × 4 ## film year group rating ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; ## 1 Avengers: Age of Ultron 2015 rottentomatoes 74 ## 2 Cinderella 2015 rottentomatoes 85 ## 3 Ant-Man 2015 rottentomatoes 80 ## 4 Do You Believe? 2015 rottentomatoes 18 ## 5 Hot Tub Time Machine 2 2015 rottentomatoes 14 ## 6 The Water Diviner 2015 rottentomatoes 63 ## 7 Irrational Man 2015 rottentomatoes 42 ## 8 Top Five 2014 rottentomatoes 86 ## 9 Shaun the Sheep Movie 2015 rottentomatoes 99 ## 10 Love \u0026amp; Mercy 2015 rottentomatoes 89 ## # … with 282 more rows Now we can work with this data to answer the question from above. More specifically, our dependent variable will be the rating variable and the independent variable will be the group (categorical) variable. This can be fitted within a linear model as follows:\ntidy(lm(rating ~ factor(group), data = meta_rotten)) ## # A tibble: 2 × 5 ## term estimate std.error statistic p.value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 (Intercept) 58.8 2.10 28.0 2.50e-84 ## 2 factor(group)rottentomatoes 2.04 2.97 0.686 4.93e- 1 To see exactly what is happening, model_matrix may be useful. First I am going to arrange the data by the films in alphabetical order.\nmeta_rotten %\u0026gt;% arrange(film) ## # A tibble: 292 × 4 ## film year group rating ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; ## 1 \u0026#39;71 2015 rottentomatoes 97 ## 2 \u0026#39;71 2015 metacritic 83 ## 3 5 Flights Up 2015 rottentomatoes 52 ## 4 5 Flights Up 2015 metacritic 55 ## 5 A Little Chaos 2015 rottentomatoes 40 ## 6 A Little Chaos 2015 metacritic 51 ## 7 A Most Violent Year 2014 rottentomatoes 90 ## 8 A Most Violent Year 2014 metacritic 79 ## 9 About Elly 2015 rottentomatoes 97 ## 10 About Elly 2015 metacritic 87 ## # … with 282 more rows meta_rotten %\u0026gt;% arrange(film) %\u0026gt;% model_matrix(rating ~ factor(group)) ## # A tibble: 292 × 2 ## `(Intercept)` `factor(group)rottentomatoes` ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 ## 2 1 0 ## 3 1 1 ## 4 1 0 ## 5 1 1 ## 6 1 0 ## 7 1 1 ## 8 1 0 ## 9 1 1 ## 10 1 0 ## # … with 282 more rows You may be more familiar with using a t-test for this type of design. We can replicate the results above with a t-test using the t.test function.\nt.test(rating ~ factor(group), data = meta_rotten, var.equal = TRUE) ## ## Two Sample t-test ## ## data: rating by factor(group) ## t = -0.68638, df = 290, p-value = 0.493 ## alternative hypothesis: true difference in means between group metacritic and group rottentomatoes is not equal to 0 ## 95 percent confidence interval: ## -7.893918 3.811726 ## sample estimates: ## mean in group metacritic mean in group rottentomatoes ## 58.80822 60.84932 Exercises Compute descriptive means using the meta_rotten transformed data from above by the group variable. Do these means appear to be descriptively different? How do these means relate to the parameters estimated from the model above?    Evaulating Model fit There are many ways to evaluate model fit. Many of these are available using the summary function.\nsummary(lm(rating ~ factor(group), data = meta_rotten)) ## ## Call: ## lm(formula = rating ~ factor(group), data = meta_rotten) ## ## Residuals: ## Min 1Q Median 3Q Max ## -55.849 -19.089 0.671 22.161 39.151 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 58.808 2.103 27.967 \u0026lt;2e-16 *** ## factor(group)rottentomatoes 2.041 2.974 0.686 0.493 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 25.41 on 290 degrees of freedom ## Multiple R-squared: 0.001622, Adjusted R-squared: -0.001821 ## F-statistic: 0.4711 on 1 and 290 DF, p-value: 0.493 The unfortunate part of this is the fact that these are more difficult to pull out of the table programmatically (i.e. in a reproducible workflow). This is where the broom package helps with the use of the glance function.\nglance(lm(rating ~ factor(group), data = meta_rotten)) ## # A tibble: 1 × 12 ## r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 0.00162 -0.00182 25.4 0.471 0.493 1 -1358. 2722. 2733. ## # … with 3 more variables: deviance \u0026lt;dbl\u0026gt;, df.residual \u0026lt;int\u0026gt;, nobs \u0026lt;int\u0026gt; These are now in a more tidy data frame and if you have multiple models in an exploratory analysis, these could then be much easier compared and combined programmatically to come to a final model.\nAnother useful function from the broom package is augment. This function will add additional information to the original data such as residuals, fitted (predicted) values, and other diagnostic statistics.\ndiagnostic \u0026lt;- augment(lm(rating ~ factor(group), data = meta_rotten)) diagnostic ## # A tibble: 292 × 7 ## rating `factor(group)` .fitted .hat .sigma .cooksd .std.resid ## \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 74 rottentomatoes 60.8 0.00685 25.4 0.000930 0.519 ## 2 85 rottentomatoes 60.8 0.00685 25.4 0.00314 0.954 ## 3 80 rottentomatoes 60.8 0.00685 25.4 0.00197 0.756 ## 4 18 rottentomatoes 60.8 0.00685 25.3 0.00988 -1.69 ## 5 14 rottentomatoes 60.8 0.00685 25.3 0.0118 -1.85 ## 6 63 rottentomatoes 60.8 0.00685 25.5 0.0000249 0.0849 ## 7 42 rottentomatoes 60.8 0.00685 25.4 0.00191 -0.744 ## 8 86 rottentomatoes 60.8 0.00685 25.4 0.00340 0.993 ## 9 99 rottentomatoes 60.8 0.00685 25.4 0.00783 1.51 ## 10 89 rottentomatoes 60.8 0.00685 25.4 0.00426 1.11 ## # … with 282 more rows These could then be plotted to explore more information about model fit. For example a histogram of the standardized residuals are often useful.\nggplot(diagnostic, aes(.std.resid)) + geom_histogram(bins = 30, color = \u0026#39;white\u0026#39;) + theme_bw() For this model, boxplots of the standardized residuals by the two groups can also be informative:\nggplot(diagnostic, aes(`factor(group)`, .std.resid)) + geom_boxplot() + geom_jitter() + coord_flip() + theme_bw() We will explore more details on predicted or fitted values later.\nLastly, the augment function can be useful, however I personally do not like the naming convention used by the function. I want to point you to two additional functions from the modelr package that can be useful for predicted (add_predictions) and residual values (add_residuals).\nFor example, to add the residuals to the original data:\nmeta_rotten %\u0026gt;% add_residuals(lm(rating ~ factor(group), data = meta_rotten)) ## # A tibble: 292 × 5 ## film year group rating resid ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Avengers: Age of Ultron 2015 rottentomatoes 74 13.2 ## 2 Cinderella 2015 rottentomatoes 85 24.2 ## 3 Ant-Man 2015 rottentomatoes 80 19.2 ## 4 Do You Believe? 2015 rottentomatoes 18 -42.8 ## 5 Hot Tub Time Machine 2 2015 rottentomatoes 14 -46.8 ## 6 The Water Diviner 2015 rottentomatoes 63 2.15 ## 7 Irrational Man 2015 rottentomatoes 42 -18.8 ## 8 Top Five 2014 rottentomatoes 86 25.2 ## 9 Shaun the Sheep Movie 2015 rottentomatoes 99 38.2 ## 10 Love \u0026amp; Mercy 2015 rottentomatoes 89 28.2 ## # … with 282 more rows Exercises Fit a new model using the fandango data that attempts to explain the metacritic ratings with the imdb rating. Explore the distribution of residuals. Does there appear to be problems with these residuals? Using the model from #1, create a scatterplot that displays the residuals by the predictor variable. Are there problems with this plot that we should be concerned with?     ","date":1646006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646006400,"objectID":"16e3d9d59cf33364836dd20ca5f50ec4","permalink":"https://psqf6250.brandonlebeau.org/rcode/model-intro/","publishdate":"2022-02-28T00:00:00Z","relpermalink":"/rcode/model-intro/","section":"rcode","summary":"Model Introduction","tags":null,"title":"Model Introduction","type":"book"},{"authors":null,"categories":null,"content":"   The last week has focused on building simple linear models with a single predictor. This week will evaluate these models and build them up with more complexity. Particularly, this week will focus on ways to build models with predictors that have more than two categories, alternative ways to code categorical predictors, mixing categorical and quantitative variables, and interactions.\nThis section of notes will use the following packages.\nlibrary(tidyverse) library(modelr) library(broom) library(fivethirtyeight) library(forcats) More than two categorical levels Last week we explored a linear model framework for a two sample t-test (and the homework has you explore fitting a one-sample t-test in a linear model framework). I now want to generalize this idea to more than two categorical levels. It is traditional to think about these types of models as analysis of variance (ANOVA) models, however, the same model can be fitted in a linear model framework as well.\nFor this set of notes, we are going to make use of the gss_cat data found in the forcats package. Below are the first few rows of the data:\ngss_cat ## # A tibble: 21,483 × 9 ## year marital age race rincome partyid relig denom tvhours ## \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 2000 Never married 26 White $8000 to 9999 Ind,near … Prot… Sout… 12 ## 2 2000 Divorced 48 White $8000 to 9999 Not str r… Prot… Bapt… NA ## 3 2000 Widowed 67 White Not applicable Independe… Prot… No d… 2 ## 4 2000 Never married 39 White Not applicable Ind,near … Orth… Not … 4 ## 5 2000 Divorced 25 White Not applicable Not str d… None Not … 1 ## 6 2000 Married 25 White $20000 - 24999 Strong de… Prot… Sout… NA ## 7 2000 Never married 36 White $25000 or more Not str r… Chri… Not … 3 ## 8 2000 Divorced 44 White $7000 to 7999 Ind,near … Prot… Luth… NA ## 9 2000 Married 44 White $25000 or more Not str d… Prot… Other 0 ## 10 2000 Married 47 White $25000 or more Strong re… Prot… Sout… 3 ## # … with 21,473 more rows Suppose we were interested in exploring the relationship between the marital status of an individual and how much tv they watch. For example, perhaps married couples watch more tv compared to those that are single or never married. To get an idea of the categories in the marital variable, we could use the count function within dplyr.\ngss_cat %\u0026gt;% count(marital) ## # A tibble: 6 × 2 ## marital n ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 No answer 17 ## 2 Never married 5416 ## 3 Separated 743 ## 4 Divorced 3383 ## 5 Widowed 1807 ## 6 Married 10117 You’ll notice that there a few responses of “No Answer” and we may wish to treat these as missing values. This can be done with the fct_recode function as follows:\ngss_cat \u0026lt;- gss_cat %\u0026gt;% mutate(marital_miss = fct_recode(marital, NULL = \u0026#39;No answer\u0026#39; )) gss_cat %\u0026gt;% count(marital_miss) ## # A tibble: 6 × 2 ## marital_miss n ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; ## 1 Never married 5416 ## 2 Separated 743 ## 3 Divorced 3383 ## 4 Widowed 1807 ## 5 Married 10117 ## 6 \u0026lt;NA\u0026gt; 17 We can now fit the model to this new data using the lm function.\nanova_mod \u0026lt;- lm(tvhours ~ marital_miss, data = gss_cat) summary(anova_mod) ## ## Call: ## lm(formula = tvhours ~ marital_miss, data = gss_cat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.9120 -1.6504 -0.6504 0.8948 21.3496 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 3.10518 0.04679 66.366 \u0026lt; 2e-16 *** ## marital_missSeparated 0.44444 0.13738 3.235 0.00122 ** ## marital_missDivorced -0.01977 0.07680 -0.257 0.79687 ## marital_missWidowed 0.80682 0.09352 8.627 \u0026lt; 2e-16 *** ## marital_missMarried -0.45475 0.05879 -7.735 1.13e-14 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.561 on 11323 degrees of freedom ## (10155 observations deleted due to missingness) ## Multiple R-squared: 0.02141, Adjusted R-squared: 0.02107 ## F-statistic: 61.94 on 4 and 11323 DF, p-value: \u0026lt; 2.2e-16 To explore what the lm function is doing internally, the design matrix is a natural way to do this.\nmodel_matrix(gss_cat, tvhours ~ marital_miss) ## # A tibble: 11,328 × 5 ## `(Intercept)` marital_missSeparated marital_missDivorced marital_missWidowed ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 0 0 0 ## 2 1 0 0 1 ## 3 1 0 0 0 ## 4 1 0 1 0 ## 5 1 0 0 0 ## 6 1 0 0 0 ## 7 1 0 0 0 ## 8 1 0 0 0 ## 9 1 0 0 0 ## 10 1 0 1 0 ## # … with 11,318 more rows, and 1 more variable: marital_missMarried \u0026lt;dbl\u0026gt; Writing out this model with equations, the model looks like this: \\[ tvhours_{i} = \\beta_{0} + \\beta_{1} Separated_{i} + \\beta_{2} Divorced_{I} + \\beta_{3} Widowed_{i} + \\beta_{4} Married_{i} + \\epsilon_{i} \\]\nIf you are more familiar with ANOVA terminology, you can get an ANOVA table using the anova function on the model object.\nanova(anova_mod) ## Analysis of Variance Table ## ## Response: tvhours ## Df Sum Sq Mean Sq F value Pr(\u0026gt;F) ## marital_miss 4 1624 406.12 61.941 \u0026lt; 2.2e-16 *** ## Residuals 11323 74239 6.56 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 Here you’ll notice that the F statistic is the same from the lm and anova functions showing that these are equivalent model calls.\nExercises Using the martial_miss variable created above, what are the sample means of the five groups? How do these sample means relate back to the parameters estimates shown above? How could you visualize these models results? Attempt to create a visualization that captures the model results above.   Adjusting the reference group It is often of interest to adjust the reference group to make the intercept represent a specific group of interest. There are two approaches to take for this approach. The first I will show is using the forcats package to change the order of the levels of the variable.\nSuppose for example, we wish to make the widowed category the reference group. This is the job of fct_relevel from the forcats package.\ngss_cat \u0026lt;- gss_cat %\u0026gt;% mutate(marital_m_widow = fct_relevel( marital_miss, \u0026#39;Widowed\u0026#39; )) levels(gss_cat$marital_miss) ## [1] \u0026quot;Never married\u0026quot; \u0026quot;Separated\u0026quot; \u0026quot;Divorced\u0026quot; \u0026quot;Widowed\u0026quot; ## [5] \u0026quot;Married\u0026quot; levels(gss_cat$marital_m_widow) ## [1] \u0026quot;Widowed\u0026quot; \u0026quot;Never married\u0026quot; \u0026quot;Separated\u0026quot; \u0026quot;Divorced\u0026quot; ## [5] \u0026quot;Married\u0026quot; You’ll notice that in the new variable, the widowed category was moved to the beginning and the remaining order was not changed. We can now fit a new model with this newly releveled factor variable.\nsummary(lm(tvhours ~ marital_m_widow, data = gss_cat)) ## ## Call: ## lm(formula = tvhours ~ marital_m_widow, data = gss_cat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.9120 -1.6504 -0.6504 0.8948 21.3496 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 3.91200 0.08097 48.313 \u0026lt; 2e-16 *** ## marital_m_widowNever married -0.80682 0.09352 -8.627 \u0026lt; 2e-16 *** ## marital_m_widowSeparated -0.36238 0.15245 -2.377 0.0175 * ## marital_m_widowDivorced -0.82659 0.10132 -8.159 3.75e-16 *** ## marital_m_widowMarried -1.26157 0.08845 -14.262 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.561 on 11323 degrees of freedom ## (10155 observations deleted due to missingness) ## Multiple R-squared: 0.02141, Adjusted R-squared: 0.02107 ## F-statistic: 61.94 on 4 and 11323 DF, p-value: \u0026lt; 2.2e-16 The second approach to modifying which group represents the reference group would be to create the indicator (dummy) variables manually. The logic follows from the design matrix above, namely that each variable should have a value of 1 if the marital status equals a specific category or 0 otherwise. For example, this can be created as follows:\ngss_cat \u0026lt;- gss_cat %\u0026gt;% mutate( separated = ifelse(marital_miss == \u0026#39;Separated\u0026#39;, 1, 0), never_married = ifelse(marital_miss == \u0026#39;Never married\u0026#39;, 1, 0), divorced = ifelse(marital_miss == \u0026#39;Divorced\u0026#39;, 1, 0), married = ifelse(marital_miss == \u0026#39;Married\u0026#39;, 1, 0) ) summary(lm(tvhours ~ separated + never_married + divorced + married, data = gss_cat)) ## ## Call: ## lm(formula = tvhours ~ separated + never_married + divorced + ## married, data = gss_cat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.9120 -1.6504 -0.6504 0.8948 21.3496 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 3.91200 0.08097 48.313 \u0026lt; 2e-16 *** ## separated -0.36238 0.15245 -2.377 0.0175 * ## never_married -0.80682 0.09352 -8.627 \u0026lt; 2e-16 *** ## divorced -0.82659 0.10132 -8.159 3.75e-16 *** ## married -1.26157 0.08845 -14.262 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.561 on 11323 degrees of freedom ## (10155 observations deleted due to missingness) ## Multiple R-squared: 0.02141, Adjusted R-squared: 0.02107 ## F-statistic: 61.94 on 4 and 11323 DF, p-value: \u0026lt; 2.2e-16 Manually creating the variables has a few advantages, namely that there is a bit more flexibility on how the variables are created, but both approaches lead to the same model.\nExercises Combine the ‘Never married’ and ‘Divorced’ categories into one category. Fit a new model that combines these two categories. Does the model fit differ from the models shown above? Is this surprising?    Post Hoc Tests From the models fitted above, it may be of interest to conduct post hoc tests that compare all pairwise mean differences, particularly as the tests above are all compared to the reference group. This approach will be explored using the multcomp package and with defining linear contrasts.\n# install.packages(\u0026quot;multcomp\u0026quot;) library(multcomp) We first need to define linear contrasts based on the levels of the factor variable. For example, using the following model:\ngss_cat \u0026lt;- gss_cat %\u0026gt;% mutate(marital_m_widow = fct_recode(marital_m_widow, \u0026quot;Never_married\u0026quot; = \u0026quot;Never married\u0026quot; )) anova_mod \u0026lt;- lm(tvhours ~ marital_m_widow, data = gss_cat) levels(gss_cat$marital_m_widow) ## [1] \u0026quot;Widowed\u0026quot; \u0026quot;Never_married\u0026quot; \u0026quot;Separated\u0026quot; \u0026quot;Divorced\u0026quot; ## [5] \u0026quot;Married\u0026quot; We will use these level values to create linear contrasts that test all pairwise categories.\nmy_contrasts \u0026lt;- c(\u0026quot;Widowed - Never_married = 0\u0026quot;, \u0026quot;Widowed - Separated = 0\u0026quot;, \u0026quot;Widowed - Divorced = 0\u0026quot;, \u0026quot;Widowed - Married = 0\u0026quot;, \u0026quot;Never_married - Separated = 0\u0026quot;, \u0026quot;Never_married - Divorced = 0\u0026quot;, \u0026quot;Never_married - Married = 0\u0026quot;, \u0026quot;Separated - Divorced = 0\u0026quot;, \u0026quot;Separated - Married = 0\u0026quot;, \u0026quot;Divorced - Married = 0\u0026quot;) contr_results \u0026lt;- glht(anova_mod, linfct = mcp(marital_m_widow = my_contrasts)) summary(contr_results) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: User-defined Contrasts ## ## ## Fit: lm(formula = tvhours ~ marital_m_widow, data = gss_cat) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## Widowed - Never_married == 0 0.80682 0.09352 8.627 \u0026lt; 0.001 *** ## Widowed - Separated == 0 0.36238 0.15245 2.377 0.11076 ## Widowed - Divorced == 0 0.82659 0.10132 8.159 \u0026lt; 0.001 *** ## Widowed - Married == 0 1.26157 0.08845 14.262 \u0026lt; 0.001 *** ## Never_married - Separated == 0 -0.44444 0.13738 -3.235 0.00957 ** ## Never_married - Divorced == 0 0.01977 0.07680 0.257 0.99893 ## Never_married - Married == 0 0.45475 0.05879 7.735 \u0026lt; 0.001 *** ## Separated - Divorced == 0 0.46421 0.14280 3.251 0.00904 ** ## Separated - Married == 0 0.89919 0.13398 6.711 \u0026lt; 0.001 *** ## Divorced - Married == 0 0.43498 0.07054 6.166 \u0026lt; 0.001 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## (Adjusted p values reported -- single-step method) You can also specify different adjustment methods, such as the Benjamin-Hochberg method.\nsummary(contr_results, test = adjusted(\u0026quot;BH\u0026quot;)) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: User-defined Contrasts ## ## ## Fit: lm(formula = tvhours ~ marital_m_widow, data = gss_cat) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## Widowed - Never_married == 0 0.80682 0.09352 8.627 \u0026lt; 2e-16 *** ## Widowed - Separated == 0 0.36238 0.15245 2.377 0.01941 * ## Widowed - Divorced == 0 0.82659 0.10132 8.159 1.48e-15 *** ## Widowed - Married == 0 1.26157 0.08845 14.262 \u0026lt; 2e-16 *** ## Never_married - Separated == 0 -0.44444 0.13738 -3.235 0.00152 ** ## Never_married - Divorced == 0 0.01977 0.07680 0.257 0.79687 ## Never_married - Married == 0 0.45475 0.05879 7.735 2.78e-14 *** ## Separated - Divorced == 0 0.46421 0.14280 3.251 0.00152 ** ## Separated - Married == 0 0.89919 0.13398 6.711 4.04e-11 *** ## Divorced - Married == 0 0.43498 0.07054 6.166 1.20e-09 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## (Adjusted p values reported -- BH method) Although defining the linear contrasts manually is more flexible, for simple models, the multiple comparisons can be generated a bit more simply.\nsummary(glht(anova_mod, linfct = mcp(marital_m_widow = \u0026quot;Tukey\u0026quot;)), test = adjusted(\u0026quot;BH\u0026quot;)) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: lm(formula = tvhours ~ marital_m_widow, data = gss_cat) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## Never_married - Widowed == 0 -0.80682 0.09352 -8.627 \u0026lt; 2e-16 *** ## Separated - Widowed == 0 -0.36238 0.15245 -2.377 0.01941 * ## Divorced - Widowed == 0 -0.82659 0.10132 -8.159 1.48e-15 *** ## Married - Widowed == 0 -1.26157 0.08845 -14.262 \u0026lt; 2e-16 *** ## Separated - Never_married == 0 0.44444 0.13738 3.235 0.00152 ** ## Divorced - Never_married == 0 -0.01977 0.07680 -0.257 0.79687 ## Married - Never_married == 0 -0.45475 0.05879 -7.735 2.78e-14 *** ## Divorced - Separated == 0 -0.46421 0.14280 -3.251 0.00152 ** ## Married - Separated == 0 -0.89919 0.13398 -6.711 4.04e-11 *** ## Married - Divorced == 0 -0.43498 0.07054 -6.166 1.20e-09 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## (Adjusted p values reported -- BH method) You can also generate simultaneous confidence intervals:\nci \u0026lt;- confint(summary(glht(anova_mod, linfct = mcp(marital_m_widow = \u0026quot;Tukey\u0026quot;)), test = adjusted(\u0026quot;BH\u0026quot;))) ci ## ## Simultaneous Confidence Intervals ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: lm(formula = tvhours ~ marital_m_widow, data = gss_cat) ## ## Quantile = 2.6895 ## 95% family-wise confidence level ## ## ## Linear Hypotheses: ## Estimate lwr upr ## Never_married - Widowed == 0 -0.80682 -1.05834 -0.55531 ## Separated - Widowed == 0 -0.36238 -0.77239 0.04762 ## Divorced - Widowed == 0 -0.82659 -1.09908 -0.55410 ## Married - Widowed == 0 -1.26157 -1.49947 -1.02367 ## Separated - Never_married == 0 0.44444 0.07497 0.81392 ## Divorced - Never_married == 0 -0.01977 -0.22631 0.18678 ## Married - Never_married == 0 -0.45475 -0.61288 -0.29662 ## Divorced - Separated == 0 -0.46421 -0.84827 -0.08015 ## Married - Separated == 0 -0.89919 -1.25954 -0.53885 ## Married - Divorced == 0 -0.43498 -0.62471 -0.24526 These could then be visulized directly.\nSCI = data.frame( Contrast = 1:nrow(ci$confint), #Contrast number MD = ci$confint[, 1], #Mean difference LL = ci$confint[, 2], #Lower limit UL = ci$confint[, 3], #Upper limit Sig = c(\u0026quot;Yes\u0026quot;, \u0026quot;No\u0026quot;, \u0026quot;Yes\u0026quot;, \u0026quot;Yes\u0026quot;, \u0026#39;Yes\u0026#39;, \u0026#39;No\u0026#39;, \u0026#39;Yes\u0026#39;, \u0026#39;Yes\u0026#39;, \u0026#39;Yes\u0026#39;, \u0026#39;Yes\u0026#39;), #Statistically reliable? Alpha = c(1, .75, 1, 1, 1, .75, 1, 1, 1, 1), #Transparency value Names = rownames(ci$confint) # contrast label ) # Plot of the simultaneous intervals library(ggplot2) ggplot(data = SCI, aes(x = Contrast, y = MD, color = Sig)) + geom_point(size = 4) + geom_segment(aes(x = Contrast, xend = Contrast, y = LL, yend = UL, alpha = Alpha), lwd = 1.5) + geom_hline(yintercept = 0, lty = \u0026quot;dotted\u0026quot;) + scale_color_manual(values = c(\u0026quot;Black\u0026quot;, \u0026quot;Gold\u0026quot;)) + scale_x_continuous( name = \u0026quot;\u0026quot;, breaks = 1:10, labels = SCI$Names ) + ylab(\u0026quot;Mean Difference\u0026quot;) + coord_flip() + theme_bw() + theme( legend.position = \u0026quot;none\u0026quot;, panel.grid.minor = element_blank(), panel.grid.major = element_blank() ) Exercises Fit a model that explores mean differences in tvhours by the party affiliation (partyid variable). Do the means differ? Using the post-hoc tests, run post-hoc tests to test all pairwise differences.     ","date":1615939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615939200,"objectID":"15262da5fd3bebaef28aa39d6e71e570","permalink":"https://psqf6250.brandonlebeau.org/rcode/model-part2/","publishdate":"2021-03-17T00:00:00Z","relpermalink":"/rcode/model-part2/","section":"rcode","summary":"Building Upon Linear Models","tags":null,"title":"Building Upon Linear Models","type":"book"},{"authors":null,"categories":null,"content":"   This section of notes will use the following packages.\nlibrary(modelr) library(broom) library(forcats) library(stringr) library(tidyverse) Interactions Interactions are an important modeling concept that can greatly increase model fit, prediction accuracy, and explained variance. Interactions can be difficult to interpret, however, we will explore them in more detail here with particular attention to graphical displays of interactions and also exploring the design matrix for how interactions are included in the model fitting procedure.\nWe will use the heights data from the modelr package to explore interactions. The primary interactions that we will explore are between two (or more) categorical predictors and also the interaction between a categorical predictor and a continuous predictor. Interpretations are similar between two continuous predictors as well.\nHere are the first few rows of the data:\nheights ## # A tibble: 7,006 × 8 ## income height weight age marital sex education afqt ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 19000 60 155 53 married female 13 6.84 ## 2 35000 70 156 51 married female 10 49.4 ## 3 105000 65 195 52 married male 16 99.4 ## 4 40000 63 197 54 married female 14 44.0 ## 5 75000 66 190 49 married male 14 59.7 ## 6 102000 68 200 49 divorced female 18 98.8 ## 7 0 74 225 48 married male 16 82.3 ## 8 70000 64 160 54 divorced female 12 50.3 ## 9 60000 69 162 55 divorced male 12 89.7 ## 10 150000 69 194 54 divorced male 13 96.0 ## # … with 6,996 more rows Suppose we were interested in exploring the relationship between sex and afqt (armed forces qualifications test, in percentiles) and if this relationship is moderated by marital status. First, it may be useful to get a baseline to see the relationship between sex and afqt.\nafqt_sex \u0026lt;- lm(afqt ~ sex, data = heights) summary(afqt_sex) ## ## Call: ## lm(formula = afqt ~ sex, data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -41.876 -26.034 -4.429 24.046 59.406 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 41.8760 0.5093 82.221 \u0026lt;2e-16 *** ## sexfemale -1.2824 0.7074 -1.813 0.0699 . ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 29.03 on 6742 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.0004872, Adjusted R-squared: 0.000339 ## F-statistic: 3.287 on 1 and 6742 DF, p-value: 0.06989 Notice that there is a small effect, which is not significant if using an alpha value of 0.05. Also, notice the extremely small r-square value here, this is actually a good finding, we would hope there would be no statistical differences between males and females on this qualifications test. Now lets start adding in marital status. We can do this as follows (Note, I have combined separated and widowed into a single category due to relatively small sample sizes):\nheights \u0026lt;- heights %\u0026gt;% mutate( marital_comb = fct_recode(marital, \u0026#39;Other\u0026#39; = \u0026#39;separated\u0026#39;, \u0026#39;Other\u0026#39; = \u0026#39;widowed\u0026#39; ) ) afqt_sex_marital \u0026lt;- lm(afqt ~ sex + marital_comb, data = heights) summary(afqt_sex_marital) ## ## Call: ## lm(formula = afqt ~ sex + marital_comb, data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -47.957 -23.174 -4.386 22.389 74.002 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 31.7982 0.9093 34.970 \u0026lt; 2e-16 *** ## sexfemale -0.6819 0.6869 -0.993 0.320829 ## marital_combmarried 16.1587 0.9727 16.611 \u0026lt; 2e-16 *** ## marital_combOther -5.5953 1.5186 -3.685 0.000231 *** ## marital_combdivorced 6.2811 1.1232 5.592 2.33e-08 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 28.02 on 6739 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.069, Adjusted R-squared: 0.06845 ## F-statistic: 124.9 on 4 and 6739 DF, p-value: \u0026lt; 2.2e-16 This model only contains what are often referred to as main effects. Namely, these are only the additive effects of sex and marital variables. To get a sense as to what the design matrix looks like, we can use model_matrix.\nmodel_matrix(heights, afqt ~ sex + marital_comb) ## # A tibble: 6,744 × 5 ## `(Intercept)` sexfemale marital_combmarried marital_combOth… marital_combdiv… ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 1 0 0 ## 2 1 1 1 0 0 ## 3 1 0 1 0 0 ## 4 1 1 1 0 0 ## 5 1 0 1 0 0 ## 6 1 1 0 0 1 ## 7 1 0 1 0 0 ## 8 1 1 0 0 1 ## 9 1 0 0 0 1 ## 10 1 0 0 0 1 ## # … with 6,734 more rows To add the interaction between the two variables (multiplicative effects), we can add one additional term to the lm function call.\ninteract_mod \u0026lt;- lm(afqt ~ sex + marital_comb + sex:marital_comb, data = heights) summary(interact_mod) ## ## Call: ## lm(formula = afqt ~ sex + marital_comb + sex:marital_comb, data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -47.981 -22.978 -4.336 22.488 75.275 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 31.4205 1.1536 27.237 \u0026lt; 2e-16 *** ## sexfemale 0.1564 1.7184 0.091 0.928 ## marital_combmarried 16.5603 1.3273 12.477 \u0026lt; 2e-16 *** ## marital_combOther -2.5872 2.4677 -1.048 0.294 ## marital_combdivorced 6.2796 1.5814 3.971 7.24e-05 *** ## sexfemale:marital_combmarried -0.8856 1.9516 -0.454 0.650 ## sexfemale:marital_combOther -4.7414 3.1645 -1.498 0.134 ## sexfemale:marital_combdivorced -0.1494 2.2535 -0.066 0.947 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 28.02 on 6736 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.06936, Adjusted R-squared: 0.0684 ## F-statistic: 71.72 on 7 and 6736 DF, p-value: \u0026lt; 2.2e-16 There is also an anova function that gives more traditional anova and sum of squares information.\nanova(interact_mod) ## Analysis of Variance Table ## ## Response: afqt ## Df Sum Sq Mean Sq F value Pr(\u0026gt;F) ## sex 1 2769 2769 3.5267 0.06043 . ## marital_comb 3 389378 129793 165.3055 \u0026lt; 2e-16 *** ## sex:marital_comb 3 2058 686 0.8738 0.45380 ## Residuals 6736 5288896 785 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 In this model, there are not actually any significant results for the interaction, but lets explore the design matrix to see exactly what is happening.\nmodel_matrix(heights, afqt ~ sex + marital_comb + sex:marital_comb) ## # A tibble: 6,744 × 8 ## `(Intercept)` sexfemale marital_combmarried marital_combOth… marital_combdiv… ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 1 0 0 ## 2 1 1 1 0 0 ## 3 1 0 1 0 0 ## 4 1 1 1 0 0 ## 5 1 0 1 0 0 ## 6 1 1 0 0 1 ## 7 1 0 1 0 0 ## 8 1 1 0 0 1 ## 9 1 0 0 0 1 ## 10 1 0 0 0 1 ## # … with 6,734 more rows, and 3 more variables: ## # `sexfemale:marital_combmarried` \u0026lt;dbl\u0026gt;, `sexfemale:marital_combOther` \u0026lt;dbl\u0026gt;, ## # `sexfemale:marital_combdivorced` \u0026lt;dbl\u0026gt; This model specifically adds columns that literally are multiplications of other columns in the design matrix. This is why interactions are often depicted with the symbol “x”, e.g. marital x sex. R uses : as interactions. The interaction model can also be specified in an alternate more compact formula:\nsummary(lm(afqt ~ sex * marital_comb, data = heights)) ## ## Call: ## lm(formula = afqt ~ sex * marital_comb, data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -47.981 -22.978 -4.336 22.488 75.275 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 31.4205 1.1536 27.237 \u0026lt; 2e-16 *** ## sexfemale 0.1564 1.7184 0.091 0.928 ## marital_combmarried 16.5603 1.3273 12.477 \u0026lt; 2e-16 *** ## marital_combOther -2.5872 2.4677 -1.048 0.294 ## marital_combdivorced 6.2796 1.5814 3.971 7.24e-05 *** ## sexfemale:marital_combmarried -0.8856 1.9516 -0.454 0.650 ## sexfemale:marital_combOther -4.7414 3.1645 -1.498 0.134 ## sexfemale:marital_combdivorced -0.1494 2.2535 -0.066 0.947 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 28.02 on 6736 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.06936, Adjusted R-squared: 0.0684 ## F-statistic: 71.72 on 7 and 6736 DF, p-value: \u0026lt; 2.2e-16 Exercises Using the gss_cat data from the forcats package, fit a model that predicts age with marital status, partyid, and the interaction between the two. How well does this model fit? How is the intercept interpreted here? Do the results change when collapsing the partyid variable into the following three categories:  Republican Democrat Other     Visualize Model Results When exploring model results, visualizing the model results is often more useful than looking at a table of coefficients. In addition, if the model is simply attempting to predict means (ANOVA), plotting often simply involves computing means for the different categories. This section will also explore how best to visualize interactions.\nIf we simply would like to show the main effects from the model above predicting Armed Forces Qualifiactions Test Score with marital status and sex, we could calculate the means of these groups.\nmarital_means \u0026lt;- heights %\u0026gt;% group_by(marital_comb) %\u0026gt;% summarise(avg_afqt = mean(afqt, na.rm = TRUE), sd_afqt = sd(afqt, na.rm = TRUE), n = n()) %\u0026gt;% mutate(se_mean = sd_afqt/sqrt(n), group = \u0026#39;Marital\u0026#39;, levels = marital_comb) %\u0026gt;% ungroup() %\u0026gt;% dplyr::select(-marital_comb) sex_means \u0026lt;- heights %\u0026gt;% group_by(sex) %\u0026gt;% summarise(avg_afqt = mean(afqt, na.rm = TRUE), sd_afqt = sd(afqt, na.rm = TRUE), n = n()) %\u0026gt;% mutate(se_mean = sd_afqt/sqrt(n), group = \u0026#39;Sex\u0026#39;, levels = sex) %\u0026gt;% ungroup() %\u0026gt;% dplyr::select(-sex) comb_means \u0026lt;- bind_rows(marital_means, sex_means) comb_means ## # A tibble: 6 × 6 ## avg_afqt sd_afqt n se_mean group levels ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; ## 1 31.5 27.7 1124 0.828 Marital single ## 2 47.6 29.1 3806 0.472 Marital married ## 3 25.7 24.1 527 1.05 Marital Other ## 4 37.7 26.6 1549 0.676 Marital divorced ## 5 41.9 29.8 3402 0.511 Sex male ## 6 40.6 28.3 3604 0.472 Sex female The effects can now be shown in a figure.\nggplot(comb_means, aes(avg_afqt, fct_reorder(levels, avg_afqt))) + geom_point(size = 3) + facet_grid(group ~ ., scales = \u0026#39;free\u0026#39;, space = \u0026#39;free\u0026#39;) + ylab(\u0026quot;Groups\u0026quot;) + xlab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + theme_bw() Since we computed standard errors, we could also add error bars using geom_errorbarh.\nggplot(comb_means, aes(avg_afqt, fct_reorder(levels, avg_afqt))) + geom_point(size = 3) + geom_errorbarh(aes(xmin = avg_afqt - se_mean*2, xmax = avg_afqt + se_mean*2), height = 0) + facet_grid(group ~ ., scales = \u0026#39;free\u0026#39;, space = \u0026#39;free\u0026#39;) + ylab(\u0026quot;Groups\u0026quot;) + xlab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + theme_bw() Plotting the interaction happens in a similar fashion. Namely, we will now calculate means by using both variables in a single group_by statement.\nint_means \u0026lt;- heights %\u0026gt;% group_by(marital_comb, sex) %\u0026gt;% summarise(avg_afqt = mean(afqt, na.rm = TRUE), sd_afqt = sd(afqt, na.rm = TRUE), n = n()) %\u0026gt;% mutate(se_mean = sd_afqt/sqrt(n)) ## `summarise()` has grouped output by \u0026#39;marital_comb\u0026#39;. You can override using the ## `.groups` argument. int_means ## # A tibble: 8 × 6 ## # Groups: marital_comb [4] ## marital_comb sex avg_afqt sd_afqt n se_mean ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 single male 31.4 28.2 624 1.13 ## 2 single female 31.6 27.3 500 1.22 ## 3 married male 48.0 29.8 1905 0.683 ## 4 married female 47.3 28.5 1901 0.653 ## 5 Other male 28.8 25.7 177 1.93 ## 6 Other female 24.2 23.1 350 1.24 ## 7 divorced male 37.7 27.7 696 1.05 ## 8 divorced female 37.7 25.7 853 0.879 These means should now match the last model from the previous lecture. We can now plot these directly.\nggplot(int_means, aes(avg_afqt, fct_reorder(marital_comb, avg_afqt), shape = sex, linetype = sex, group = sex)) + geom_point(size = 3) + geom_line(size = 1) + ylab(\u0026quot;Groups\u0026quot;) + xlab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + theme_bw() Standard error bars can be shown here, but may complicate the figure too much.\nggplot(int_means, aes(avg_afqt, fct_reorder(marital_comb, avg_afqt), shape = sex, linetype = sex, group = sex)) + geom_point(size = 3) + geom_line(size = 1) + geom_errorbarh(aes(xmin = avg_afqt - se_mean * 2, xmax = avg_afqt + se_mean * 2), height = 0) + ylab(\u0026quot;Groups\u0026quot;) + xlab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + theme_bw() Exercises Using the gss_cat data from the forcats package, fit a model that predicts age with marital status, partyid, and the interaction between the two. Create a figure that explores the interaction between the two variables. Add a third variable to the model, race. Include this as a main effect, plus interacting with the other variables.    Interaction between continuous and categorical predictors Using again the heights data, suppose we wished to again predict the Armed Forces Qualifications Test score (afqt) with marital status and height. This can be done with the linear model.\nsummary(lm(afqt ~ marital_comb + height, data = heights)) ## ## Call: ## lm(formula = afqt ~ marital_comb + height, data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.150 -22.517 -4.248 22.097 78.355 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -28.99932 5.67144 -5.113 3.25e-07 *** ## marital_combmarried 16.13531 0.96385 16.741 \u0026lt; 2e-16 *** ## marital_combOther -4.63978 1.50160 -3.090 0.00201 ** ## marital_combdivorced 6.75490 1.11278 6.070 1.35e-09 *** ## height 0.89847 0.08329 10.787 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 27.78 on 6739 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.08467, Adjusted R-squared: 0.08413 ## F-statistic: 155.8 on 4 and 6739 DF, p-value: \u0026lt; 2.2e-16 You’ll notice here that the intercept is negative. Why is this negative? You can most easily see this by looking at a figure of the data. Note, here I am simply showing the dependent and the height variable ignoring the marital status, however, this will have a slightly different slope than the one above (Try it).\nggplot(heights, aes(x = height, y = afqt)) + geom_jitter(size = 2) + geom_abline(intercept = -26.02, slope = 1.002, size = 1, color = \u0026#39;blue\u0026#39;) + coord_cartesian(xlim = c(0, 90), ylim = c(-30, 105)) + ylab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + xlab(\u0026quot;Height\u0026quot;) + theme_bw() ## Warning: Removed 262 rows containing missing values (geom_point). It may be better to mean center the height variable.\nsummary(lm(afqt ~ marital_comb + I(height - mean(heights$height)), data = heights)) ## ## Call: ## lm(formula = afqt ~ marital_comb + I(height - mean(heights$height)), ## data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.150 -22.517 -4.248 22.097 78.355 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 31.29186 0.84798 36.90 \u0026lt; 2e-16 *** ## marital_combmarried 16.13531 0.96385 16.74 \u0026lt; 2e-16 *** ## marital_combOther -4.63978 1.50160 -3.09 0.00201 ** ## marital_combdivorced 6.75490 1.11278 6.07 1.35e-09 *** ## I(height - mean(heights$height)) 0.89847 0.08329 10.79 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 27.78 on 6739 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.08467, Adjusted R-squared: 0.08413 ## F-statistic: 155.8 on 4 and 6739 DF, p-value: \u0026lt; 2.2e-16 Notice that the mean effects do not change, but rather just the location of the intercept. This is a traditional analysis of covariance model.\nInteractions are simple to add now, they follow the same syntax as the categorical predictors from above. For example, if we wanted to add an interaction between height and marital status, we could do this as follows.\nsummary(lm(afqt ~ marital_comb + I(height - mean(heights$height)) + marital_comb:I(height - mean(heights$height)), data = heights)) ## ## Call: ## lm(formula = afqt ~ marital_comb + I(height - mean(heights$height)) + ## marital_comb:I(height - mean(heights$height)), data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.768 -22.664 -4.183 21.972 78.762 ## ## Coefficients: ## Estimate Std. Error ## (Intercept) 31.32214 0.84911 ## marital_combmarried 16.08587 0.96531 ## marital_combOther -4.58940 1.53070 ## marital_combdivorced 6.66304 1.11478 ## I(height - mean(heights$height)) 0.76180 0.20923 ## marital_combmarried:I(height - mean(heights$height)) 0.22912 0.23745 ## marital_combOther:I(height - mean(heights$height)) 0.21641 0.37137 ## marital_combdivorced:I(height - mean(heights$height)) -0.02469 0.27510 ## t value Pr(\u0026gt;|t|) ## (Intercept) 36.888 \u0026lt; 2e-16 *** ## marital_combmarried 16.664 \u0026lt; 2e-16 *** ## marital_combOther -2.998 0.002725 ** ## marital_combdivorced 5.977 2.39e-09 *** ## I(height - mean(heights$height)) 3.641 0.000274 *** ## marital_combmarried:I(height - mean(heights$height)) 0.965 0.334624 ## marital_combOther:I(height - mean(heights$height)) 0.583 0.560092 ## marital_combdivorced:I(height - mean(heights$height)) -0.090 0.928481 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 27.79 on 6736 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.08494, Adjusted R-squared: 0.08399 ## F-statistic: 89.32 on 7 and 6736 DF, p-value: \u0026lt; 2.2e-16 or\nsummary(lm(afqt ~ marital_comb * I(height - mean(heights$height)), data = heights)) ## ## Call: ## lm(formula = afqt ~ marital_comb * I(height - mean(heights$height)), ## data = heights) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.768 -22.664 -4.183 21.972 78.762 ## ## Coefficients: ## Estimate Std. Error ## (Intercept) 31.32214 0.84911 ## marital_combmarried 16.08587 0.96531 ## marital_combOther -4.58940 1.53070 ## marital_combdivorced 6.66304 1.11478 ## I(height - mean(heights$height)) 0.76180 0.20923 ## marital_combmarried:I(height - mean(heights$height)) 0.22912 0.23745 ## marital_combOther:I(height - mean(heights$height)) 0.21641 0.37137 ## marital_combdivorced:I(height - mean(heights$height)) -0.02469 0.27510 ## t value Pr(\u0026gt;|t|) ## (Intercept) 36.888 \u0026lt; 2e-16 *** ## marital_combmarried 16.664 \u0026lt; 2e-16 *** ## marital_combOther -2.998 0.002725 ** ## marital_combdivorced 5.977 2.39e-09 *** ## I(height - mean(heights$height)) 3.641 0.000274 *** ## marital_combmarried:I(height - mean(heights$height)) 0.965 0.334624 ## marital_combOther:I(height - mean(heights$height)) 0.583 0.560092 ## marital_combdivorced:I(height - mean(heights$height)) -0.090 0.928481 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 27.79 on 6736 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.08494, Adjusted R-squared: 0.08399 ## F-statistic: 89.32 on 7 and 6736 DF, p-value: \u0026lt; 2.2e-16 What do these coefficients mean however? This is best explained with a picture.\nmodel_summary \u0026lt;- augment(lm(afqt ~ marital_comb * I(height - mean(heights$height)), data = heights)) model_summary \u0026lt;- rename(model_summary, \u0026#39;height_center\u0026#39; = `I(height - mean(heights$height))`) model_summary ## # A tibble: 6,744 × 9 ## .rownames afqt marital_comb height_center .fitted .hat .sigma .cooksd ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;I\u0026lt;dbl\u0026gt;\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 6.84 married -7.10 40.4 0.00115 27.8 2.09e-4 ## 2 2 49.4 married 2.90 50.3 0.000390 27.8 4.39e-8 ## 3 3 99.4 married -2.10 45.3 0.000360 27.8 1.70e-4 ## 4 4 44.0 married -4.10 43.3 0.000576 27.8 4.33e-8 ## 5 5 59.7 married -1.10 46.3 0.000301 27.8 8.70e-6 ## 6 6 98.8 divorced 0.896 38.6 0.000737 27.8 4.33e-4 ## 7 7 82.3 married 6.90 54.2 0.00100 27.8 1.28e-4 ## 8 8 50.3 divorced -3.10 35.7 0.000976 27.8 3.37e-5 ## 9 9 89.7 divorced 1.90 39.4 0.000884 27.8 3.63e-4 ## 10 10 96.0 divorced 1.90 39.4 0.000884 27.8 4.59e-4 ## # … with 6,734 more rows, and 1 more variable: .std.resid \u0026lt;dbl\u0026gt; ggplot(model_summary, aes(height_center, afqt)) + geom_jitter(alpha = .1) + geom_line(aes(x = height_center, y = .fitted, color = marital_comb), size = 2) + ylab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + xlab(\u0026quot;Height\u0026quot;) + theme_bw() The figure for the traditional ANCOVA model initially explored would look like:\nmodel_summary \u0026lt;- augment(lm(afqt ~ marital_comb + I(height - mean(heights$height)), data = heights)) model_summary \u0026lt;- rename(model_summary, \u0026#39;height_center\u0026#39; = `I(height - mean(heights$height))`) model_summary ## # A tibble: 6,744 × 9 ## .rownames afqt marital_comb height_center .fitted .hat .sigma .cooksd ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;I\u0026lt;dbl\u0026gt;\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 6.84 married -7.10 41.0 0.000753 27.8 2.29e-4 ## 2 2 49.4 married 2.90 50.0 0.000337 27.8 2.99e-8 ## 3 3 99.4 married -2.10 45.5 0.000320 27.8 2.41e-4 ## 4 4 44.0 married -4.10 43.7 0.000439 27.8 9.09e-9 ## 5 5 59.7 married -1.10 46.4 0.000288 27.8 1.31e-5 ## 6 6 98.8 divorced 0.896 38.9 0.000684 27.8 6.38e-4 ## 7 7 82.3 married 6.90 53.6 0.000674 27.8 1.44e-4 ## 8 8 50.3 divorced -3.10 35.3 0.000736 27.8 4.31e-5 ## 9 9 89.7 divorced 1.90 39.7 0.000716 27.8 4.63e-4 ## 10 10 96.0 divorced 1.90 39.7 0.000716 27.8 5.88e-4 ## # … with 6,734 more rows, and 1 more variable: .std.resid \u0026lt;dbl\u0026gt; ggplot(model_summary, aes(height_center, afqt)) + geom_jitter(alpha = .1) + geom_line(aes(x = height_center, y = .fitted, color = marital_comb), size = 2) + ylab(\u0026quot;Average Armed Forces Qualification Score\u0026quot;) + xlab(\u0026quot;Height\u0026quot;) + theme_bw() Exercises Using the gss_cat data from the forcats package, fit a model that predicts age with marital status, tvhours, and the interaction between the two. Interpret the parameter estimates from this model? Is there evidence that the interaction is adding to the model? Create a figure that explores the interaction between the two variables. Fit another model that predicts age with marital status, party affiliation, and tvhours (main effects) as well as the interaction between marital status and tvhours and party afilliation and tvhours (two second order interactions). Interpret the effects for this model.    ","date":1615939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615939200,"objectID":"fa24f48469663a4873b73b9b38b6d445","permalink":"https://psqf6250.brandonlebeau.org/rcode/adv-model/","publishdate":"2021-03-17T00:00:00Z","relpermalink":"/rcode/adv-model/","section":"rcode","summary":"Advanced Modeling Topics","tags":null,"title":"Advanced Modeling Topics","type":"book"},{"authors":null,"categories":null,"content":"   I want to spend a little bit of time talking about model assumptions. These are important and should be checked for any analysis. The following packages will be used for this set of notes.\nlibrary(modelr) library(broom) library(forcats) library(tidyverse) We are also going to use this model from the advanced model section to explore model assumptions.\nheights2 \u0026lt;- heights %\u0026gt;% mutate( marital_comb = fct_recode(marital, \u0026#39;Other\u0026#39; = \u0026#39;separated\u0026#39;, \u0026#39;Other\u0026#39; = \u0026#39;widowed\u0026#39; ) ) afqt_mod \u0026lt;- lm(afqt ~ marital_comb + height, data = heights2) summary(afqt_mod) ## ## Call: ## lm(formula = afqt ~ marital_comb + height, data = heights2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.150 -22.517 -4.248 22.097 78.355 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -28.99932 5.67144 -5.113 3.25e-07 *** ## marital_combmarried 16.13531 0.96385 16.741 \u0026lt; 2e-16 *** ## marital_combOther -4.63978 1.50160 -3.090 0.00201 ** ## marital_combdivorced 6.75490 1.11278 6.070 1.35e-09 *** ## height 0.89847 0.08329 10.787 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 27.78 on 6739 degrees of freedom ## (262 observations deleted due to missingness) ## Multiple R-squared: 0.08467, Adjusted R-squared: 0.08413 ## F-statistic: 155.8 on 4 and 6739 DF, p-value: \u0026lt; 2.2e-16 plot function with model object One of the nicest features when model building within R, is that many diagnostic plots are very accessible using the plot function. For example:\nplot(afqt_mod) These plots are shown one at a time in an interactive R session, but allow you to check many common assumptions such as normal residuals, linearity, homogeneity of variance, and even leverage.\nYou can see from these figures that there is quite a bit to be desired from our model. First, the residuals are not normally distributed (very heavy tails) and more problematic is that the residuals have a trend to them. This suggests that we are missing an important variable in the model.\nSuppose we add some additional variables to the model keeping the model additive. Note, I am also mean centering many of the continuous variables to ease interpretation slightly.\nheights2 \u0026lt;- heights2 %\u0026gt;% mutate(income2 = ifelse(income == 0, .001, income), height2 = height - mean(height, na.rm = TRUE), education2 = education - mean(education, na.rm = TRUE), weight2 = weight - mean(weight, na.rm = TRUE), log_income = log(income2)) afqt_alt \u0026lt;- lm(afqt ~ marital_comb + height2 + education2 + log_income + weight2, data = heights2) summary(afqt_alt) ## ## Call: ## lm(formula = afqt ~ marital_comb + height2 + education2 + log_income + ## weight2, data = heights2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -80.466 -16.515 -2.036 16.088 101.730 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 32.645765 0.717463 45.502 \u0026lt; 2e-16 *** ## marital_combmarried 9.312248 0.802952 11.598 \u0026lt; 2e-16 *** ## marital_combOther -2.537031 1.231340 -2.060 0.0394 * ## marital_combdivorced 4.790976 0.913836 5.243 1.63e-07 *** ## height2 0.781474 0.077526 10.080 \u0026lt; 2e-16 *** ## education2 5.911616 0.111848 52.854 \u0026lt; 2e-16 *** ## log_income 0.395176 0.038720 10.206 \u0026lt; 2e-16 *** ## weight2 -0.027669 0.007074 -3.911 9.27e-05 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 22.57 on 6637 degrees of freedom ## (361 observations deleted due to missingness) ## Multiple R-squared: 0.3969, Adjusted R-squared: 0.3963 ## F-statistic: 624 on 7 and 6637 DF, p-value: \u0026lt; 2.2e-16 plot(afqt_alt) We could continue to model this variable by including additional predictors or interactions between our current predictors to attempt to remove this strong trend in the residuals. I’m going to stop here however and move on to another topic.\n Exploring individual residuals Evaluating all of the residuals in a single step using the plot function can be useful initially to explore model quality. However, eventually it is useful to explore residuals for specific values to explore why these are large.\nThere are a few options to do this, one uses the broom package, the other uses the modelr package. I show both below.\naug_afqt \u0026lt;- augment(afqt_alt) aug_afqt ## # A tibble: 6,645 × 13 ## .rownames afqt marital_comb height2 education2 log_income weight2 .fitted ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 6.84 married -7.10 -0.218 9.85 -33.3 39.9 ## 2 2 49.4 married 2.90 -3.22 10.5 -32.3 30.2 ## 3 3 99.4 married -2.10 2.78 11.6 6.70 61.1 ## 4 4 44.0 married -4.10 0.782 10.6 8.70 47.3 ## 5 5 59.7 married -1.10 0.782 11.2 1.70 50.1 ## 6 6 98.8 divorced 0.896 4.78 11.5 11.7 70.6 ## 7 7 82.3 married 6.90 2.78 -6.91 36.7 60.0 ## 8 8 50.3 divorced -3.10 -1.22 11.2 -28.3 33.0 ## 9 9 89.7 divorced 1.90 -1.22 11.0 -26.3 36.8 ## 10 10 96.0 divorced 1.90 -0.218 11.9 5.70 42.2 ## # … with 6,635 more rows, and 5 more variables: .resid \u0026lt;dbl\u0026gt;, .hat \u0026lt;dbl\u0026gt;, ## # .sigma \u0026lt;dbl\u0026gt;, .cooksd \u0026lt;dbl\u0026gt;, .std.resid \u0026lt;dbl\u0026gt; height_resid \u0026lt;- heights2 %\u0026gt;% add_residuals(afqt_alt) %\u0026gt;% add_predictions(afqt_alt) height_resid ## # A tibble: 7,006 × 16 ## income height weight age marital sex education afqt marital_comb income2 ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 19000 60 155 53 married fema… 13 6.84 married 1.9 e+4 ## 2 35000 70 156 51 married fema… 10 49.4 married 3.5 e+4 ## 3 105000 65 195 52 married male 16 99.4 married 1.05e+5 ## 4 40000 63 197 54 married fema… 14 44.0 married 4 e+4 ## 5 75000 66 190 49 married male 14 59.7 married 7.5 e+4 ## 6 102000 68 200 49 divorc… fema… 18 98.8 divorced 1.02e+5 ## 7 0 74 225 48 married male 16 82.3 married 1 e-3 ## 8 70000 64 160 54 divorc… fema… 12 50.3 divorced 7 e+4 ## 9 60000 69 162 55 divorc… male 12 89.7 divorced 6 e+4 ## 10 150000 69 194 54 divorc… male 13 96.0 divorced 1.5 e+5 ## # … with 6,996 more rows, and 6 more variables: height2 \u0026lt;dbl\u0026gt;, ## # education2 \u0026lt;dbl\u0026gt;, weight2 \u0026lt;dbl\u0026gt;, log_income \u0026lt;dbl\u0026gt;, resid \u0026lt;dbl\u0026gt;, pred \u0026lt;dbl\u0026gt; The benefit to the augment function from the broom package is that it includes more information. The main benefit fo the add_residuals function from the modelr pacakge is that it includes all of the original data, not just those variables included in the final model. Therefore if you are fitting a model and want to explore trends in residuals based on other data characteristics not currently in the model, using the add_residuals function would likely be better for this use.\nFiltering and Plotting Residuals Now that we have these in a data frame, we could easily plot or filter residuals to explore cases in which the model is not adequatly fitting the dependent variable. For example, maybe we want to explore residuals greater than 50 in absolute value. This can easily be done with dplyr and the filter function.\nfilter(height_resid, abs(resid) \u0026gt; 50) ## # A tibble: 113 × 16 ## income height weight age marital sex education afqt marital_comb income2 ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 60000 69 162 55 divorc… male 12 89.7 divorced 6 e+4 ## 2 150000 69 194 54 divorc… male 13 96.0 divorced 1.5e+5 ## 3 45000 69 240 53 married male 12 98.8 married 4.5e+4 ## 4 0 66 195 50 married fema… 14 99.2 married 1 e-3 ## 5 93000 68 182 48 divorc… male 12 86.9 divorced 9.3e+4 ## 6 43000 64 145 51 divorc… fema… 12 94.8 divorced 4.3e+4 ## 7 52000 72 230 52 married male 12 93.1 married 5.2e+4 ## 8 35000 59 165 49 divorc… fema… 12 80.0 divorced 3.5e+4 ## 9 85000 61 140 55 married fema… 18 15.7 married 8.5e+4 ## 10 0 69 186 55 separa… fema… 12 88.8 Other 1 e-3 ## # … with 103 more rows, and 6 more variables: height2 \u0026lt;dbl\u0026gt;, education2 \u0026lt;dbl\u0026gt;, ## # weight2 \u0026lt;dbl\u0026gt;, log_income \u0026lt;dbl\u0026gt;, resid \u0026lt;dbl\u0026gt;, pred \u0026lt;dbl\u0026gt; You can also plot residuals directly or compared to other predictors.\nggplot(height_resid, aes(resid)) + geom_histogram() + theme_bw() + xlab(\u0026quot;Residuals\u0026quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 361 rows containing non-finite values (stat_bin). ggplot(height_resid, aes(resid, education2)) + geom_point(size = 3) + geom_smooth(size = 1, se = FALSE) + xlab(\u0026quot;Residuals\u0026quot;) + ylab(\u0026quot;Education (mean centered)\u0026quot;) ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; ## Warning: Removed 361 rows containing non-finite values (stat_smooth). ## Warning: Removed 361 rows containing missing values (geom_point).   ","date":1615939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615939200,"objectID":"6abe3dd4de8607a0a5557c6954118349","permalink":"https://psqf6250.brandonlebeau.org/rcode/model-assumptions/","publishdate":"2021-03-17T00:00:00Z","relpermalink":"/rcode/model-assumptions/","section":"rcode","summary":"Model Assumptions","tags":null,"title":"Model Assumptions","type":"book"},{"authors":null,"categories":null,"content":"   I want to spend a little bit of time talking about ways to model non-linear trends within a linear model as well as show an example of conducting a logistic regression within R using the glm function. This set of notes will use the following packages:\nlibrary(modelr) library(broom) library(forcats) library(tidyverse) Modeling non-linear trends Modeling non-linear trends can be important and a great way to increase variance explained. There are many ways to model non-linear trends, including non-linear models, but I am going to focus on a linear modeling framework to include non-linear trends by adding quadratic terms.\nThese types of models are flexible and relatively easy to interpret, however have the drawback that prediction outside of the data at hand (extrapolation) can be problematic. Using the final model from the model assumptions lecture, lets see if we can improve model fit and the trend in the residuals by adding some non-linearity in the form of quadratic terms.\nIf you recall, here is the model that was used last time.\nheights2 \u0026lt;- heights %\u0026gt;% mutate( marital_comb = fct_recode(marital, \u0026#39;Other\u0026#39; = \u0026#39;separated\u0026#39;, \u0026#39;Other\u0026#39; = \u0026#39;widowed\u0026#39; ), income2 = ifelse(income == 0, .001, income), height2 = height - mean(height, na.rm = TRUE), education2 = education - mean(education, na.rm = TRUE), weight2 = weight - mean(weight, na.rm = TRUE), log_income = log(income2) ) afqt_alt \u0026lt;- lm(afqt ~ marital_comb + height2 + education2 + log_income + weight2, data = heights2) summary(afqt_alt) ## ## Call: ## lm(formula = afqt ~ marital_comb + height2 + education2 + log_income + ## weight2, data = heights2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -80.466 -16.515 -2.036 16.088 101.730 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 32.645765 0.717463 45.502 \u0026lt; 2e-16 *** ## marital_combmarried 9.312248 0.802952 11.598 \u0026lt; 2e-16 *** ## marital_combOther -2.537031 1.231340 -2.060 0.0394 * ## marital_combdivorced 4.790976 0.913836 5.243 1.63e-07 *** ## height2 0.781474 0.077526 10.080 \u0026lt; 2e-16 *** ## education2 5.911616 0.111848 52.854 \u0026lt; 2e-16 *** ## log_income 0.395176 0.038720 10.206 \u0026lt; 2e-16 *** ## weight2 -0.027669 0.007074 -3.911 9.27e-05 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 22.57 on 6637 degrees of freedom ## (361 observations deleted due to missingness) ## Multiple R-squared: 0.3969, Adjusted R-squared: 0.3963 ## F-statistic: 624 on 7 and 6637 DF, p-value: \u0026lt; 2.2e-16 Let’s see if there are non-linear trends in the height, weight, or income variables. I am going to add these by specifically creating additional variables and using these as new predictors. You could also create these by using the insulate function I() to do the operation within the model syntax.\nheights2 \u0026lt;- heights2 %\u0026gt;% mutate( height2_quad = height2 ^ 2, weight2_quad = weight2 ^ 2, log_income_quad = log_income ^ 2, education2_quad = education2 ^ 2 ) afqt_alt \u0026lt;- lm(afqt ~ marital_comb + height2 + education2 + log_income + weight2 + education2_quad + height2_quad + weight2_quad + log_income_quad, data = heights2) summary(afqt_alt) ## ## Call: ## lm(formula = afqt ~ marital_comb + height2 + education2 + log_income + ## weight2 + education2_quad + height2_quad + weight2_quad + ## log_income_quad, data = heights2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -77.098 -16.265 -2.331 15.587 91.339 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.665e+01 1.598e+00 10.419 \u0026lt; 2e-16 *** ## marital_combmarried 8.340e+00 7.993e-01 10.434 \u0026lt; 2e-16 *** ## marital_combOther -2.604e+00 1.218e+00 -2.137 0.0326 * ## marital_combdivorced 4.262e+00 9.061e-01 4.703 2.61e-06 *** ## height2 7.488e-01 7.967e-02 9.399 \u0026lt; 2e-16 *** ## education2 5.467e+00 1.173e-01 46.609 \u0026lt; 2e-16 *** ## log_income -3.828e-01 8.307e-02 -4.609 4.12e-06 *** ## weight2 -4.652e-02 8.046e-03 -5.782 7.72e-09 *** ## education2_quad 5.535e-02 2.488e-02 2.224 0.0262 * ## height2_quad -3.018e-02 1.392e-02 -2.169 0.0302 * ## weight2_quad 4.135e-04 8.359e-05 4.947 7.73e-07 *** ## log_income_quad 2.177e-01 2.018e-02 10.791 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 22.33 on 6633 degrees of freedom ## (361 observations deleted due to missingness) ## Multiple R-squared: 0.4102, Adjusted R-squared: 0.4092 ## F-statistic: 419.3 on 11 and 6633 DF, p-value: \u0026lt; 2.2e-16 Alternatively, this model could look like:\nafqt_alt \u0026lt;- lm(afqt ~ marital_comb + height2 + education2 + log_income + weight2 + I(education2^2) + I(height2^2) + I(weight2^2) + I(log_income^2), data = heights2) summary(afqt_alt) ## ## Call: ## lm(formula = afqt ~ marital_comb + height2 + education2 + log_income + ## weight2 + I(education2^2) + I(height2^2) + I(weight2^2) + ## I(log_income^2), data = heights2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -77.098 -16.265 -2.331 15.587 91.339 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.665e+01 1.598e+00 10.419 \u0026lt; 2e-16 *** ## marital_combmarried 8.340e+00 7.993e-01 10.434 \u0026lt; 2e-16 *** ## marital_combOther -2.604e+00 1.218e+00 -2.137 0.0326 * ## marital_combdivorced 4.262e+00 9.061e-01 4.703 2.61e-06 *** ## height2 7.488e-01 7.967e-02 9.399 \u0026lt; 2e-16 *** ## education2 5.467e+00 1.173e-01 46.609 \u0026lt; 2e-16 *** ## log_income -3.828e-01 8.307e-02 -4.609 4.12e-06 *** ## weight2 -4.652e-02 8.046e-03 -5.782 7.72e-09 *** ## I(education2^2) 5.535e-02 2.488e-02 2.224 0.0262 * ## I(height2^2) -3.018e-02 1.392e-02 -2.169 0.0302 * ## I(weight2^2) 4.135e-04 8.359e-05 4.947 7.73e-07 *** ## I(log_income^2) 2.177e-01 2.018e-02 10.791 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 22.33 on 6633 degrees of freedom ## (361 observations deleted due to missingness) ## Multiple R-squared: 0.4102, Adjusted R-squared: 0.4092 ## F-statistic: 419.3 on 11 and 6633 DF, p-value: \u0026lt; 2.2e-16 Let’s see if this improved our model fit.\nplot(afqt_alt) We could also attempt to convert the dependent variable (in a percentile metric) to a z-score.\nheights2 \u0026lt;- heights2 %\u0026gt;% mutate( afqt2 = ifelse(afqt == 0, .00001, ifelse(afqt == 100, 99.9999999, afqt)), afqt3 = ifelse(afqt %in% c(0, 100), NA, afqt), afqt_z = qnorm(afqt2/100), afqt_z3 = qnorm(afqt3/100) ) afqt_alt2 \u0026lt;- lm(afqt_z3 ~ marital_comb + height2 + education2 + log_income + weight2 + education2_quad + height2_quad + weight2_quad + log_income_quad, data = heights2) summary(afqt_alt2) ## ## Call: ## lm(formula = afqt_z3 ~ marital_comb + height2 + education2 + ## log_income + weight2 + education2_quad + height2_quad + weight2_quad + ## log_income_quad, data = heights2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.8910 -0.5105 -0.0064 0.4966 3.2479 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -1.119e+00 5.576e-02 -20.069 \u0026lt; 2e-16 *** ## marital_combmarried 2.942e-01 2.782e-02 10.576 \u0026lt; 2e-16 *** ## marital_combOther -9.070e-02 4.242e-02 -2.138 0.032536 * ## marital_combdivorced 1.701e-01 3.152e-02 5.395 7.09e-08 *** ## height2 2.506e-02 2.769e-03 9.051 \u0026lt; 2e-16 *** ## education2 1.933e-01 4.133e-03 46.769 \u0026lt; 2e-16 *** ## log_income -1.075e-02 2.897e-03 -3.710 0.000209 *** ## weight2 -1.640e-03 2.800e-04 -5.859 4.88e-09 *** ## education2_quad -5.433e-04 8.880e-04 -0.612 0.540682 ## height2_quad -1.316e-03 4.838e-04 -2.720 0.006545 ** ## weight2_quad 1.508e-05 2.906e-06 5.192 2.15e-07 *** ## log_income_quad 7.100e-03 7.042e-04 10.083 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 0.7745 on 6588 degrees of freedom ## (406 observations deleted due to missingness) ## Multiple R-squared: 0.4088, Adjusted R-squared: 0.4078 ## F-statistic: 414.1 on 11 and 6588 DF, p-value: \u0026lt; 2.2e-16 plot(afqt_alt2)  glm function The glm function behaves much like the lm function. The only major difference in model logistics is that we will now need to specify a family argument. This family argument will depend on the type of model being fitted. We are going to perform a logistic regression, therefore this family will be binomial.\nThe data we will use is from Kaggle and is data from Titanic, more specifically the data has characteristics on the passengers and whether they survived the shipwreck or not. You can get a sense of the variables from this website: https://www.kaggle.com/c/titanic/data.\nlibrary(titanic) titanic \u0026lt;- bind_rows(titanic_test, titanic_train) head(titanic) ## PassengerId Pclass Name Sex Age ## 1 892 3 Kelly, Mr. James male 34.5 ## 2 893 3 Wilkes, Mrs. James (Ellen Needs) female 47.0 ## 3 894 2 Myles, Mr. Thomas Francis male 62.0 ## 4 895 3 Wirz, Mr. Albert male 27.0 ## 5 896 3 Hirvonen, Mrs. Alexander (Helga E Lindqvist) female 22.0 ## 6 897 3 Svensson, Mr. Johan Cervin male 14.0 ## SibSp Parch Ticket Fare Cabin Embarked Survived ## 1 0 0 330911 7.8292 Q NA ## 2 1 0 363272 7.0000 S NA ## 3 0 0 240276 9.6875 Q NA ## 4 0 0 315154 8.6625 S NA ## 5 1 1 3101298 12.2875 S NA ## 6 0 0 7538 9.2250 S NA Suppose we were interested in fitting a model that predicted whether a passenger survived or not. Using lm is not appropriate as the dependent variable is not continuous, rather it is dichotomous. Using logistic regression is more appropriate here.\nsurv_mod \u0026lt;- glm(Survived ~ factor(Pclass) + Fare + Sex + Age, data = titanic, family = binomial) summary(surv_mod) ## ## Call: ## glm(formula = Survived ~ factor(Pclass) + Fare + Sex + Age, family = binomial, ## data = titanic) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.7393 -0.6788 -0.3956 0.6486 2.4639 ## ## Coefficients: ## Estimate Std. Error z value Pr(\u0026gt;|z|) ## (Intercept) 3.7225052 0.4645113 8.014 1.11e-15 *** ## factor(Pclass)2 -1.2765903 0.3126370 -4.083 4.44e-05 *** ## factor(Pclass)3 -2.5415762 0.3277677 -7.754 8.89e-15 *** ## Fare 0.0005226 0.0022579 0.231 0.817 ## Sexmale -2.5185052 0.2082017 -12.096 \u0026lt; 2e-16 *** ## Age -0.0367302 0.0077325 -4.750 2.03e-06 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 964.52 on 713 degrees of freedom ## Residual deviance: 647.23 on 708 degrees of freedom ## (595 observations deleted due to missingness) ## AIC: 659.23 ## ## Number of Fisher Scoring iterations: 5 It is common to interpret these in terms of probability, we can do this with the following bit of code:\nprob_mod \u0026lt;- titanic %\u0026gt;% select(Survived, Pclass, Fare, Sex, Age) %\u0026gt;% na.omit() %\u0026gt;% mutate( probability = predict(surv_mod, type = \u0026#39;response\u0026#39;) ) head(prob_mod, n = 15) ## Survived Pclass Fare Sex Age probability ## 419 0 3 7.2500 male 22 0.10509514 ## 420 1 1 71.2833 female 38 0.91404126 ## 421 1 3 7.9250 female 26 0.55726903 ## 422 1 1 53.1000 female 35 0.92162960 ## 423 0 3 8.0500 male 35 0.06793029 ## 425 0 1 51.8625 male 54 0.32031425 ## 426 0 3 21.0750 male 2 0.19781236 ## 427 1 3 11.1333 female 27 0.54860408 ## 428 1 2 30.0708 female 14 0.87516354 ## 429 1 3 16.7000 female 4 0.73937738 ## 430 1 1 26.5500 female 58 0.83285937 ## 431 0 3 8.0500 male 20 0.11224887 ## 432 0 3 31.2750 male 39 0.05987747 ## 433 0 3 7.8542 female 14 0.66168470 ## 434 1 2 16.0000 female 55 0.60685621 We could now plot these probabilities to explore the effects.\nggplot(prob_mod, aes(Age, probability, color = Sex, linetype = Sex)) + geom_line(size = 1) + facet_grid(. ~ Pclass) + theme_bw() + xlab(\u0026quot;Age\u0026quot;) + ylab(\u0026quot;Probability of Survival\u0026quot;)  ","date":1615939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615939200,"objectID":"def1faa6733c48f030283d2aaad0f315","permalink":"https://psqf6250.brandonlebeau.org/rcode/misc-model/","publishdate":"2021-03-17T00:00:00Z","relpermalink":"/rcode/misc-model/","section":"rcode","summary":"Miscellaneous Modeling Topics","tags":null,"title":"Miscellaneous Modeling Topics","type":"book"},{"authors":null,"categories":null,"content":"    Tables can be difficult to create well and more difficult to do them completely reproducible, although this is should be the goal of any analysis. I often fall into a framework where I decide to create a table manually, that is, enter information into a table by hand only to have to recreate this table again, and again, and again. This repeated structure can be time consuming and unintended errors can also creep into the workflow cycle.\nThis section will attempt to tackle this topic of creating reproducible tables. This area has been expanding over the past year with different frameworks to do these functions. For example, there is an initial package release of the gt package that is attempting to create a grammar of tables, similar to the grammar of graphics utilized by ggplot2. Unfortunately, this package is still under active development, therefore the heuristics and functions in the package may change, therefore it is not quite ready for inclusion in the course.\nFortunately, there are at least two other packages that will help us build upon to create flexible, powerful reproducible tables. These packages are called: kableExtra and formattable. This document will primarily use kableExtra, however there are some features in formattable that are cool to include in a table to create a more visual table, particularly if HTML is the desired output.\nThese two packages can be installed the usual way:\ninstall.packages(c(\u0026quot;kableExtra\u0026quot;, \u0026quot;formattable\u0026quot;)) The packages can also be loaded in the typical fashion using the library() function:\nlibrary(kableExtra) library(formattable) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::group_rows() masks kableExtra::group_rows() ## x dplyr::lag() masks stats::lag() Load in Data Let’s start with some data and a basic table, then we will build up this table to include more complex ways to structure the data. I’m going to use the titanic data that were used in the discussion of the glm() function.\nlibrary(titanic) titanic \u0026lt;- bind_rows(titanic_test, titanic_train) head(titanic) ## PassengerId Pclass Name Sex Age ## 1 892 3 Kelly, Mr. James male 34.5 ## 2 893 3 Wilkes, Mrs. James (Ellen Needs) female 47.0 ## 3 894 2 Myles, Mr. Thomas Francis male 62.0 ## 4 895 3 Wirz, Mr. Albert male 27.0 ## 5 896 3 Hirvonen, Mrs. Alexander (Helga E Lindqvist) female 22.0 ## 6 897 3 Svensson, Mr. Johan Cervin male 14.0 ## SibSp Parch Ticket Fare Cabin Embarked Survived ## 1 0 0 330911 7.8292 Q NA ## 2 1 0 363272 7.0000 S NA ## 3 0 0 240276 9.6875 Q NA ## 4 0 0 315154 8.6625 S NA ## 5 1 1 3101298 12.2875 S NA ## 6 0 0 7538 9.2250 S NA Suppose we were interested in exploring summary statistics by the different classes of passengers (Pclass variable). We could compute the summary statistics using dplyr as follows.\ntitanic %\u0026gt;% group_by(Pclass) %\u0026gt;% summarise(avg_age = mean(Age, na.rm = TRUE), sd_age = sd(Age, na.rm = TRUE), avg_fare = mean(Fare, na.rm = TRUE), sd_fare = sd(Fare, na.rm = TRUE), min_fare = min(Fare, na.rm = TRUE), max_fare = max(Fare, na.rm = TRUE), perc_survived = mean(Survived, na.rm = TRUE) * 100, number_passengers = n() ) ## # A tibble: 3 × 9 ## Pclass avg_age sd_age avg_fare sd_fare min_fare max_fare perc_survived ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 39.2 14.5 87.5 80.4 0 512. 63.0 ## 2 2 29.5 13.6 21.2 13.6 0 73.5 47.3 ## 3 3 24.8 12.0 13.3 11.5 0 69.6 24.2 ## # … with 1 more variable: number_passengers \u0026lt;int\u0026gt; This is the format that we used in the past for summary statistics. One function that is handy for creating tables from this output is the kable() function from the knitr package. This function essentially turns the output into a markdown table that will be parsed more easily when you compile the document into HTML, PDF, or even a Word document. Below is how the kable() function can be used.\ntitanic %\u0026gt;% group_by(Pclass) %\u0026gt;% summarise(avg_age = mean(Age, na.rm = TRUE), sd_age = sd(Age, na.rm = TRUE), avg_fare = mean(Fare, na.rm = TRUE), sd_fare = sd(Fare, na.rm = TRUE), min_fare = min(Fare, na.rm = TRUE), max_fare = max(Fare, na.rm = TRUE), perc_survived = mean(Survived, na.rm = TRUE) * 100, number_passengers = n() ) %\u0026gt;% kable()    Pclass  avg_age  sd_age  avg_fare  sd_fare  min_fare  max_fare  perc_survived  number_passengers      1  39.15993  14.54803  87.50899  80.44718  0  512.3292  62.96296  323    2  29.50671  13.63863  21.17920  13.60712  0  73.5000  47.28261  277    3  24.81637  11.95820  13.30289  11.49436  0  69.5500  24.23625  709     No arguments are needed to pass to the kable() function as it can automatically detect the format desired based on the yaml front matter in an Rmd document. There are useful arguments to kable that can make the table format a bit nicer to consume.\nOptional Arguments to kable() The four arguments to kable() that will be discussed in detail are, digits, col.names, align, and caption. You can likely guess what some of these arguments do, but we will go through each in turn.\ndigits argument The digits argument is a way to format numeric output to round values to a specific number of significant digits. The simplest specification is a single numeric value which will round all the numeric data columns to that many decimal points. For example, maybe we want to ensure there are no more than 2 decimal places, this can be achieved by setting digits = 2 as an argument to kable(). Note, I first save the titanic summary output to an object to avoid duplication of this code throughout to focus on the new code.\ntitanic_summary \u0026lt;- titanic %\u0026gt;% group_by(Pclass) %\u0026gt;% summarise(avg_age = mean(Age, na.rm = TRUE), sd_age = sd(Age, na.rm = TRUE), avg_fare = mean(Fare, na.rm = TRUE), sd_fare = sd(Fare, na.rm = TRUE), min_fare = min(Fare, na.rm = TRUE), max_fare = max(Fare, na.rm = TRUE), perc_survived = mean(Survived, na.rm = TRUE) * 100, number_passengers = n() ) kable(titanic_summary, digits = 2)    Pclass  avg_age  sd_age  avg_fare  sd_fare  min_fare  max_fare  perc_survived  number_passengers      1  39.16  14.55  87.51  80.45  0  512.33  62.96  323    2  29.51  13.64  21.18  13.61  0  73.50  47.28  277    3  24.82  11.96  13.30  11.49  0  69.55  24.24  709     The digits argument can also be specified differently for every column in the table. When doing this, a vector of digits, one for each column, are passed directly to the digits argument. For example:\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0))    Pclass  avg_age  sd_age  avg_fare  sd_fare  min_fare  max_fare  perc_survived  number_passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709      col.names argument The col.names argument allows the user control over the names of the column labels. This would be useful here as the names of the columns are not descriptive enough. The col.names argument would be the same length as the number of columns in the resulting table.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;))    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709      align argument The align argument allows the user control over how the data are aligned in each column. The default values typically work well, but sometimes additional control is needed. Numeric columns are right-aligned by default and all other columns are left-aligned. When specifying the alignment operators, l is left-aligned, c is center-aligned, and r is right-aligned. These can be specified compactly such that a single character string is passed to the align argument where there is a character for each column in the resulting table. For example, perhaps we were interested in making the first column center-aligned, this could be done as follows.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;)    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709      caption argument The final argument that is useful to specify is the caption argument. This argument is needed for any sort of cross-referencing of tables (more on this later). The caption argument takes a character string that represents the caption of the table.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;)   Table 1: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709     These are the basic argument for creating simple reproducible tables in R. We will explore more advanced features next that can create more complicated tables as well as add some unique features that can upgrade the tables created. Some of these features are unique to HTML output, but many cross-over to PDF documents as well. These features may not work well with Word documents. This is largely due to the proprietary Word code base that is not open source and is not programmatic.\n   More complicated tables with kableExtra The tables created with kable() are aimed to be simple tables that are relatively quick to create with less focus on the styling of the tables. For some tables, this approach is sufficient. For other tables, the additional formatting or styling is useful to control how the table appears in the final document. This is where the kableExtra package is useful and builds off the of the kable() function that we have already used to create reproducible tables.\nTable styling Adding some basic styling is easy to do by adding a single function call kable_styling() after using the kable() function. Here is an example:\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling()  Table 2: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709     What the kable_styling() function does is explicitly style the resulting table with the bootstrap which is the default style for Rmd documents compiled to HTML. The added bonus of using a theme like bootstrap is you can get a lot of additional features that are defined in the bootstrap theme directly by specifying these options within the kable_styling() function.\n Bootstrap table options The predefined bootstrap table options include striped tables, adding mouse hover effects, add borders around the table, make the table more condensed, or responsive to screen re-sizing. These options can be passed to the argument, bootstrap_options as a character vector. For example, adding stripes to the table, hover effects, a more condensed table, borders, and a responsive table would look like the following.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;, \u0026#39;responsive\u0026#39;, \u0026#39;bordered\u0026#39;))  Table 3: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709      More options to kable_styling There are some additional options to kable_styling() that can come in handy. By default, tables span the full width of the document. This can be adjusted by adding the argument, full_width = FALSE. To show the benefits of this approach, I’ve made a smaller table with fewer columns.\ntitanic_summary_small \u0026lt;- titanic %\u0026gt;% group_by(Pclass) %\u0026gt;% summarise(avg_age = mean(Age, na.rm = TRUE), avg_fare = mean(Fare, na.rm = TRUE), perc_survied = mean(Survived, na.rm = TRUE) * 100, number_passengers = n() ) kable(titanic_summary_small, digits = c(0, 2, 2, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;), full_width = FALSE)  Table 4: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  Avg. Fare  % Survived  Number of Passengers      1  39.16  87.51  62.963  323    2  29.51  21.18  47.283  277    3  24.82  13.30  24.236  709     When you specify a table to only span a portion of the document width, you now also have control over how the table is positioned on the page. The table could be on the left side, right side, or centered. These are passed to an argument called position.\nkable(titanic_summary_small, digits = c(0, 2, 2, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;), full_width = FALSE, position = \u0026#39;right\u0026#39;)  Table 5: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  Avg. Fare  % Survived  Number of Passengers      1  39.16  87.51  62.963  323    2  29.51  21.18  47.283  277    3  24.82  13.30  24.236  709     There are also position arguments that allow the table to float. When a table floats, text can wrap around the table so that the table and text could be compared side by side. These arguments are passed to the position argument as before, however, now these argument names are float_right or float_left.\nkable(titanic_summary_small, digits = c(0, 2, 2, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;), full_width = FALSE, position = \u0026#39;float_right\u0026#39;)  Table 6: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  Avg. Fare  % Survived  Number of Passengers      1  39.16  87.51  62.963  323    2  29.51  21.18  47.283  277    3  24.82  13.30  24.236  709     You could now describe the table in more detail to discuss the relevant findings. For example, we could now say that there are differences in the average age and fare prices across the classes. In addition, the class appears to be highly predictive of the survival rate.\nThe text that wraps around the table appears directly after the code chunk containing the table definition. This is important to keep in mind when writing your document. The text will continue to wrap as well until the end of the table, therefore you need to be a bit careful about this option if you want to ensure that a new section or paragraph is not next to the paragraph.\nThe final argument that I’ll mention briefly is font_size which adjusts the font size of the table. Here I switch back to the larger table with more summary columns, but now specify a smaller font size. The default font size is 12 I believe, therefore if you are trying to get a table to fit on a single page, decreasing the font size like this may be helpful.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;), font_size = 10) Table 7: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709       Column or Row Control It is possible to format entire columns or rows within a table. This can be useful if there is an entire row or column that should be bold, italic, a different background color, or font color. These can be controlled at the column and row levels with the column_spec() or row_spec() functions respectively.\nThese two function behave very similarly, with each function taking a column or row number as the first argument. Ranges of columns or rows are also possible to specify when declaring a column or row number. Subsequent arguments are the formatting arguments for that specific column or row. Examples or arguments are: bold, italic, color, background, width, or angle which make the font bold, italic, change the font color, change the background color, alter the width of the columns, or change the angle of the text respectively.\nSuppose given the table above, we wanted to make the “% Survived” and “Number of Passengers” columns bold and we wished to make the class three row italic change the background color to a light red.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;)) %\u0026gt;% column_spec(8:9, bold = TRUE, width = \u0026#39;0.75in\u0026#39;) %\u0026gt;% row_spec(3, italic = TRUE, background = \u0026quot;#FF6347\u0026quot;)  Table 8: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709     You’ll notice that the bold and italic arguments are logical, specifying TRUE turns the attribute on. Secondly, the identification of the column and rows that are to be formatted is done with column and row numbers respectively. When declaring the row number, the header row is skipped. The header can be formatted using the row_spec(), however you would specify the row number as 0. Finally, names of colors that are valid within R can be used as a character string, (use colors() to see all the colors defined within R), but hex codes can also be specified which can give further control. The color argument works identically to the background argument. Finally, the width argument was used which forced the last two columns to be 0.75 inches wide respectively. This argument can be particularly useful for columns that have text strings that are long.\n Cell Control Cell control is another way to format a table, but this time the formatting is done within the cells with the cell_spec() function. Another way to think about this is conditional logic for specific cells in the table. This process is done before being passed to the kable() function via a call to mutate(). Suppose for example, we wanted to color the cells differently for the percentage survival greater than 50% compared to those less than 50%. Here is an example of doing this.\ntitanic_summary %\u0026gt;% mutate( perc_survived = cell_spec(round(perc_survived, 3), color = ifelse(perc_survived \u0026gt; 50, \u0026#39;#440154\u0026#39;, \u0026#39;#FDE725\u0026#39;)) ) %\u0026gt;% kable(escape = FALSE, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;)) %\u0026gt;% column_spec(8:9, bold = TRUE, width = \u0026#39;0.75in\u0026#39;)  Table 9: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709     A couple of things to note about the cell_spec() function. When using cell_spec(), the additional argument, escape = FALSE to the kable() function must be specified. In addition, notice the round() function used within the mutate() function. This is needed to ensure that the digits are rounded as this column will be ignored by the digits argument from the kable() function. Additional formatting can also still be passed using the column_spec() function after the cell_spec() function was used. This is done here to control the width and bold font specification.\nUsing formattable and kableExtra together The formattable package has a couple cool elements that work with kableExtra. One that I find useful to use is the color_bar() function. The color_bar() function adds a bar chart in addition to the numeric values already depicted in the table. This argument is also used prior to the table being passed to the kable() function. Let’s try to turn the last column, Number of Passengers, to a bar chart that is light red colored. The color_bar() function is a bit unique in that it takes two sets of parentheses specifying the main two arguments. The function takes the following form, color_bar(\"#FF6347\")(number_passengers) where the first argument is the color for the bars and the second argument is the variable to use. Finally, the color_bar() function is specified within a mutate() function call prior to being passed to the kable() function. The argument escape = FALSE also needs to be specified in the kable() function.\ntitanic_summary %\u0026gt;% mutate( perc_survived = cell_spec(round(perc_survived, 3), color = ifelse(perc_survived \u0026gt; 50, \u0026#39;#440154\u0026#39;, \u0026#39;#FDE725\u0026#39;)), number_passengers = color_bar(\u0026quot;#FF6347\u0026quot;)(number_passengers) ) %\u0026gt;% kable(escape = FALSE, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;SD Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;SD Fare\u0026#39;, \u0026#39;Min. Fare\u0026#39;, \u0026#39;Max. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;)) %\u0026gt;% column_spec(8, bold = TRUE, width = \u0026#39;0.75in\u0026#39;) %\u0026gt;% column_spec(9, bold = TRUE)  Table 10: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  SD Age  Avg. Fare  SD Fare  Min. Fare  Max. Fare  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709       Grouped Columns or Rows The last element of the table formatting that will be covered is the ability to add grouped columns or rows. The add_header_above() function gives the user the ability to add additional header columns above the currently defined header(s). This is helpful to add a grouping label that spans multiple columns and remove redundancy in the header labels across columns. For example, if you look at the original titanic_summary data object created previously, there are two columns representing descriptive statistics for the age variable and four columns for the fare variable. The age and fare variable labels can be removed and added as an additional header. The add_header_above() function takes a character string representing the names of the new header labels and the number of columns that these labels should span.\nkable(titanic_summary, digits = c(0, 2, 2, 2, 2, 1, 1, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg.\u0026#39;, \u0026#39;SD\u0026#39;, \u0026#39;Avg.\u0026#39;, \u0026#39;SD\u0026#39;, \u0026#39;Min.\u0026#39;, \u0026#39;Max.\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrrrrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;, \u0026#39;bordered\u0026#39;)) %\u0026gt;% add_header_above(c(\u0026quot;\u0026quot;, \u0026quot;Age\u0026quot; = 2, \u0026quot;Fare\u0026quot; = 4, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;))  Table 11: Descriptive statistics of Titanic passengers by ticket class     Age   Fare       Class  Avg.  SD  Avg.  SD  Min.  Max.  % Survived  Number of Passengers      1  39.16  14.55  87.51  80.45  0  512.3  62.963  323    2  29.51  13.64  21.18  13.61  0  73.5  47.283  277    3  24.82  11.96  13.30  11.49  0  69.6  24.236  709     Group Row Labels Group row labels can also be added to break up a table into different sections with the group_rows() function. This function takes three main arguments, the first being the row label as a character string followed by the starting row to include in the group and the ending row. For example, if the original titanic descriptive statistics was broken up for males and females, this grouping variable could be added to split up the table. The following code generates descriptive statistics for males and females, then combines these into a single data-frame to be included in the table.\ntitanic_summary_male \u0026lt;- titanic %\u0026gt;% filter(Sex == \u0026#39;male\u0026#39;) %\u0026gt;% group_by(Pclass) %\u0026gt;% summarise(avg_age = mean(Age, na.rm = TRUE), avg_fare = mean(Fare, na.rm = TRUE), perc_survied = mean(Survived, na.rm = TRUE) * 100, number_passengers = n() ) titanic_summary_female \u0026lt;- titanic %\u0026gt;% filter(Sex == \u0026#39;female\u0026#39;) %\u0026gt;% group_by(Pclass) %\u0026gt;% summarise(avg_age = mean(Age, na.rm = TRUE), avg_fare = mean(Fare, na.rm = TRUE), perc_survied = mean(Survived, na.rm = TRUE) * 100, number_passengers = n() ) titanic_summary_sex \u0026lt;- dplyr::bind_rows( titanic_summary_male, titanic_summary_female, titanic_summary_small ) titanic_summary_sex ## # A tibble: 9 × 5 ## Pclass avg_age avg_fare perc_survied number_passengers ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 1 41.0 69.9 36.9 179 ## 2 2 30.8 19.9 15.7 171 ## 3 3 26.0 12.4 13.5 493 ## 4 1 37.0 109. 96.8 144 ## 5 2 27.5 23.2 92.1 106 ## 6 3 22.2 15.3 50 216 ## 7 1 39.2 87.5 63.0 323 ## 8 2 29.5 21.2 47.3 277 ## 9 3 24.8 13.3 24.2 709 This table can then be passed to the kable() function and the group_rows function can be used to differentiate between the rows that are male, female, or total.\nkable(titanic_summary_sex, digits = c(0, 2, 2, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrr\u0026#39;, caption = \u0026#39;Descriptive statistics of Titanic passengers by ticket class\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;), full_width = FALSE) %\u0026gt;% kableExtra::group_rows(\u0026#39;Male\u0026#39;, 1, 3) %\u0026gt;% kableExtra::group_rows(\u0026#39;Female\u0026#39;, 4, 6) %\u0026gt;% kableExtra::group_rows(\u0026#39;Total\u0026#39;, 7, 9)  Table 12: Descriptive statistics of Titanic passengers by ticket class    Class  Avg. Age  Avg. Fare  % Survived  Number of Passengers     Male    1  41.03  69.89  36.885  179    2  30.82  19.90  15.741  171    3  25.96  12.42  13.545  493   Female    1  37.04  109.41  96.809  144    2  27.50  23.23  92.105  106    3  22.19  15.32  50.000  216   Total    1  39.16  87.51  62.963  323    2  29.51  21.18  47.283  277    3  24.82  13.30  24.236  709     One note, the addition of kableExtra::group_rows() was used above due to there being two group_rows() function since the dplyr v0.8 was released. The kableExtra::group_rows() syntax tells R to look for the group_rows() function directly within the kableExtra package. This avoids duplicate function names across packages and ensures that the correct function is used in this case.\n  Cross-referencing tables The final topic to discuss briefly is cross-referencing of tables in Rmd documents. Cross-referencing allows the user to allow for the labeling of table numbers to be done dynamically and automatically rather than looking at the table numbers and updating if these change. The chunk label name from the Rmd chunk is used for the identification of the label name for cross-referencing. Specifically, cross-referencing a table would take this general form: @\\ref(tab:chunkname) where the “chunkname” portion would be replaced with the name used for the table chunk. For example, when creating the chunk below to produce the table, the chunk name, “cross-reference” was used, therefore the cross-referencing code would look like the following: @\\ref(tab:cross-reference). Therefore, one could write, explore Table “@(tab:cross-reference)” for descriptive statistics by ticket class for males, females, and total numbers. Note: I put the citation portion in quotes as these do not work in R notebook output, but should work if you compile the Rmd document to HTML or PDF.\nkable(titanic_summary_sex, digits = c(0, 2, 2, 3, 0), col.names = c(\u0026#39;Class\u0026#39;, \u0026#39;Avg. Age\u0026#39;, \u0026#39;Avg. Fare\u0026#39;, \u0026#39;% Survived\u0026#39;, \u0026#39;Number of Passengers\u0026#39;), align = \u0026#39;crrrr\u0026#39;) %\u0026gt;% kable_styling(bootstrap_options = c(\u0026#39;striped\u0026#39;, \u0026#39;hover\u0026#39;, \u0026#39;condensed\u0026#39;), full_width = FALSE) %\u0026gt;% kableExtra::group_rows(\u0026#39;Male\u0026#39;, 1, 3) %\u0026gt;% kableExtra::group_rows(\u0026#39;Female\u0026#39;, 4, 6) %\u0026gt;% kableExtra::group_rows(\u0026#39;Total\u0026#39;, 7, 9)   Class  Avg. Age  Avg. Fare  % Survived  Number of Passengers     Male    1  41.03  69.89  36.885  179    2  30.82  19.90  15.741  171    3  25.96  12.42  13.545  493   Female    1  37.04  109.41  96.809  144    2  27.50  23.23  92.105  106    3  22.19  15.32  50.000  216   Total    1  39.16  87.51  62.963  323    2  29.51  21.18  47.283  277    3  24.82  13.30  24.236  709     The final note about cross-references, is that the table caption needs to be specified as a Rmd chunk option, not within the kable() function. The caption argument is specified the same as when specified with the kable() function, therefore this could be copied and pasted from the previous examples.\n Additional Resources Below are some additional resources for working with reproducible tables in R.\n kableExtra HTML Vignette kableExtra PDF Vignette kableExtra with formattable gt package (in active development)   ","date":1616976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616976000,"objectID":"58b8c1bb79eaaca54e10d18a944a2cfd","permalink":"https://psqf6250.brandonlebeau.org/rcode/reproducible-tables/","publishdate":"2021-03-29T00:00:00Z","relpermalink":"/rcode/reproducible-tables/","section":"rcode","summary":"Reproducible Tables","tags":null,"title":"Reproducible Tables","type":"book"},{"authors":null,"categories":null,"content":"Quiz 1 can be taken on ICON, due January 30th, 2022. The quiz covers content from Week 1.\nQuiz 1 Link\n","date":1643068800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643068800,"objectID":"ac83706d5690d70e2da1268514b156a4","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz1/","publishdate":"2022-01-25T00:00:00Z","relpermalink":"/assignments/quizzes/quiz1/","section":"assignments","summary":"Quiz 1 can be taken on ICON, due January 30th, 2022. The quiz covers content from Week 1.\nQuiz 1 Link","tags":null,"title":"Quiz 1","type":"book"},{"authors":null,"categories":null,"content":"             Interactive graphics can be a great way to enhance the presentation of study results, particularly if the output format is HTML. These can be great for presentations, HTML reports, or online applications like dashboards or shiny apps.\nIn general, interactive graphics make use of Javascript libraries to perform the interactive visualization. One of the more well known Javascript libraries for interactive web based graphics is d3, https://d3js.org/. If you take a look at the example page from the previous url, you can see that there are a lot of options for a large variety of graphics. d3 visualizations are highly flexible and powerful, however they also require fairly strong Javascript skills to fully implement the graphics.\nIn this course, we will create interactive graphics using plotly, https://plot.ly/, was built using Python, but uses Javascript and d3 libraries for their graphics. What is nice about plotly, is that you can create interactive graphics from statis ggplot2 graphics. This is where we will start, but the materials will also walk through the creation of plotly graphics in R by scratch. The primary benefit of creating the plotly graphics by scratch is likely performance based when hosting on the web. If you are creating a single interactive version, first creating a ggplot2 figure and turning it interactive would likely be the most straightforward.\nInteractive graphics with plotly install.packages(\u0026quot;plotly\u0026quot;) Static to Interactive The first example we will show is how to turn a static figure created with ggplot2 into an interactive version with plotly. The ggplotly() function from the plotly package is the ticket to doing this. Below is an example of creating a static scatterplot with ggplot2. Notice that I save this figure into the object named, p. This is then passed to the ggplotly() function to generate the equivalent plotly interactive figure. I did not explicitly print the static image, but I encourage you to print out the static image, named p here, to verify that it is indeed the same figure.\nlibrary(tidyverse) library(plotly) p \u0026lt;- ggplot(data = midwest) + geom_point(mapping = aes(x = popdensity, y = percollege)) ggplotly(p)  {\"x\":{\"data\":[{\"x\":[1270.96154,759,681.409091,1812.11765,324.222222,713.76,313.058824,622.407407,559.875,2983.18966,819.47619,530.7,516.428571,1170.48276,1721.46667,88018.3966,748.615385,533.5,2050.84211,718.086957,778.56,39083.3,544.305556,531.428571,1132.28571,474.840909,475.833333,1612.76,732.307692,363.631579,464.151515,1243.73077,339.96,454.744681,576.555556,352,1003.11765,459.507463,1696.30556,365.827586,1121.81818,893,623.457143,567.35,10947.2759,2468.07692,2189.61111,1342.69048,18443.5,1572.25,726,799.813953,633.887097,855.5,1036.58824,5090.02778,1899.70588,3348.74286,953.58,5538.62222,1187.45714,558.521739,493,1053.71429,620.222222,523.939394,974.869565,749.463415,1102.93939,663.333333,1021.26667,4811.23684,823.538462,621.92,358.714286,198.772727,683.909091,573,960.638889,752.045455,5311.53571,6571.3,1206.86364,3497.76471,288.384615,376.266667,505.931818,384.352941,1456.12121,3171.58974,734.125,1697.25,1092.58333,581.242424,453.484848,410.5,569.724138,1467.95122,7146.26,2309.32,8430.43333,1020.40625,1480.71429,7337.46341,2893.5,393.375,1406.7,1589.45833,741.052632,854.954545,1600.54167,3989.86364,1176.42857,1346.69565,550.777778,1058.96154,2043.94737,1074.77273,1605.63636,5202.56522,1408.30769,5785.11111,2167.91667,7156,712.32,851.304348,897.142857,1100.44828,3090.375,921.515152,4539,2678.05882,1067.5,3154.875,2005.79167,5051.6875,1540.30435,1257.66667,734.117647,977.818182,1418.90476,1126.71429,4894.94444,1286.58065,2040.4375,1339.86364,15853.1333,2974.05556,1586.51852,5025.73077,34659.087,1622.38462,493.761905,1537.375,4540.75,1147.86667,2330,564.625,1515.08,1063,800.391304,751.347826,570.740741,868.5,625.45,4958.92308,1038.72,486.269231,1045.34483,1044.15385,984.64,788.217391,8823.28571,1908.27273,1679.45833,812.083333,1197.21053,1306.95238,703.444444,595.230769,4353.26667,1007.4375,697.6,12696.7692,1048.3125,4421.125,1524.73913,389.333333,1953.04348,790.566667,2997.95833,1235.61905,775.5,1382.55,247.439024,175.921569,1847.12245,900.147059,586.612903,711,147.296296,1472.26471,4297.03846,610,4890.24242,1431.10345,3237.66667,1649.23333,975.818182,445.791667,443.641026,733.882353,1702.44118,360.588235,547.536232,583.282609,2731.73529,927.407407,11634.027,706.322581,265.470588,2142.43333,1181.27273,1277.38235,590.766667,699.02,8291.52941,1677.17647,915.424242,188.214286,1606.58824,3482.69767,6770.0303,409,10012.62,85.05,245.228571,1967.57895,787,2127.34884,3401.32353,104.781818,180.915254,25621.4286,664.53125,644.427273,880.586207,1097.29412,389.375,2440.35484,368.090909,4048.48485,1263.30952,270.787879,5677.96429,749.058824,19701.6727,748.466667,583.78125,113.512821,592.529412,237.636364,579.258065,5689.93939,327.214286,581.647059,4415.54167,3640.175,2031.48276,713,110.693333,2250.64516,1156.20833,1893.51351,6900.90244,60333.9143,775.294118,724.885714,4573.125,1900.28,2434.65854,1984.96667,1857.70833,2292.70968,1248.78571,10409.9643,1105.04167,1385.34615,6147.83333,5776.42308,1475.625,3492.77419,1041.97059,2081.30435,54313.0769,1489.41667,1710.86957,2478.85185,5484.21429,3567.62069,1144.41667,28277.5588,1539.92,1190.53846,3380.375,5469.24,1219.5,34649.12,2114.06452,1111.10714,643.4,1164.32,1050.82353,1063.875,1313.96,1874.66667,1259.58333,3649.90909,1582.43333,16576.8462,2378.23077,3207.5,1567.03704,9349.17241,22017.1905,1323.85714,11033.5833,2678.08333,4894.16,919.48,1408.67857,3882.58333,596.038462,21252.1852,567.76,1156.20833,2001.65854,472.333333,2501.8125,819.52,1372.04348,1608.5,932.653846,4752.83333,1604.52,1166.17241,4349.55172,1690.97561,2581.79167,2295.05714,1810.09091,1796.6,10811.3235,21457.9167,6157.10811,2473.23529,1229.57692,1269.33333,462.416667,4952.56522,1638.26316,3074.57576,1478.24,3061.32432,927.25,382.487805,301.981481,768.867925,157.393258,6081.0625,339.6,246.867925,1490.91304,831.111111,439.541667,980.173913,455.428571,5028.56164,1417.75926,917.5,535.358974,690.557692,2241.65789,153,2047.34091,146.266667,713.971014,892.323529,847.772727,438.043478,130.914894,276.466667,1936.65714,460.638298,8011.3125,943.9,3496.57143,434.486486,375.096154,509.301887,2233.91667,1227.65957,494.487805,456.333333,185.238095,63951.6667,678.388889,503.766667,446.183099,3797.56757,4855.4,507.642857,963.676471,632.236364,1279.27083,208,8751.7,515.323529,3321.66667,274.163636,1142.06818,939.5,179.506329,688.092593,3246.15625,331.596491,587.511628,533.6875,295.116667,2343.75,275.44,3813.12,8962.20588,1024.53333,523.918919,4009.14286,1533.4375],\"y\":[19.6313918,11.2433076,17.0338194,17.2789539,14.475999,18.9046238,11.9173877,16.1971209,14.1076487,41.2958081,13.567226,15.1108627,13.6830103,15.3874693,25.1750412,28.0181167,16.9858076,14.5978891,32.835928,16.1959601,16.8685259,42.7688669,16.8399327,16.9356446,20.2751964,13.6029941,17.8273561,14.7056662,15.5321976,11.3675214,13.0495464,18.3778784,14.0467657,20.6605223,14.3184422,13.7735504,18.7236334,15.1666829,36.6436653,15.0256035,18.3698955,14.7583093,16.4133528,14.3524363,27.5938834,17.6409622,24.8893485,19.3436365,37.8340529,16.8995267,14.5388128,18.476678,14.5031437,17.9492226,27.9280239,28.0541488,33.8185507,19.8618556,14.0083929,19.6994744,16.4493851,17.5348837,13.5054525,14.034565,18.511502,16.4744211,19.9206186,11.723732,20.7244228,15.7185951,18.7793745,25.838414,13.5622441,22.011857,12.1742809,14.2502659,14.3687708,16.5212794,12.7412789,21.5077402,21.3007289,21.184251,15.4883463,28.9881549,14.6365422,13.0760986,15.9511699,16.8789809,19.8795753,20.0448263,17.8795898,17.0571729,24.7300469,20.4582651,15.9600242,15.6807027,15.9287398,16.5530497,24.7568609,21.0595616,22.652364,22.8052176,16.1156797,27.3597862,22.8468145,13.4643978,12.9819635,27.8306241,19.8002103,15.4562536,13.2149823,16.8123574,14.1137248,16.045283,8.54375099,13.2391267,15.5742757,13.9213675,15.581854,21.1970145,17.1676628,18.3723425,11.4249881,20.5498928,11.1452991,12.9935988,13.929867,15.50432,15.5381671,14.9522958,42.1311499,20.4899394,13.1074407,24.2200345,13.2576823,20.2298144,16.9731386,13.1423129,14.8558462,12.771798,17.5460903,10.1458975,22.308069,19.9757478,19.2629151,11.1118012,17.6686138,17.1792531,13.1476522,16.401998,26.7446886,17.7775263,13.5396226,14.4075703,37.7422954,16.9252277,14.6798142,12.1746236,12.6387629,10.7029216,9.78827088,11.1649179,14.6129001,11.0422948,13.842852,24.455887,17.2106825,14.1710559,15.734664,12.6200972,13.5281456,12.8463697,24.611669,10.5895865,14.7000195,14.1338236,10.0140252,18.6080204,15.4816696,9.47158524,36.2454446,15.4219389,12.6449852,21.7585174,12.2726866,22.7230118,16.0805162,13.399963,23.8155668,10.8145974,15.5891252,18.5655038,16.5838347,15.809776,14.1150923,16.2755866,18.0660208,18.9337962,19.039803,11.8278471,14.5760743,17.2519754,18.2258245,21.4208568,23.742011,16.066702,21.4885192,15.8443516,22.6527251,14.6477089,16.9397657,12.0419487,22.8647363,18.7787018,18.912404,20.4206544,26.9787819,26.8725681,20.1454244,11.4331387,21.1730815,30.9753249,16.4441292,16.4684698,24.7650877,14.3082727,36.7600619,15.116835,16.2342399,15.4575777,27.2497358,21.2057826,34.5571857,11.4555097,28.6383762,14.4522145,11.3134379,16.1542355,32.5963872,18.7880617,27.5866359,14.4056678,15.2878703,20.6866911,16.2528217,26.763554,18.5401286,25.0460405,15.084171,35.6088365,13.280021,17.4296096,14.160017,13.4575569,19.0433213,15.6946934,36.9635114,16.9024096,11.6568382,15.9567602,13.6658394,12.9210381,20.0211305,26.9656935,13.8933764,13.363353,19.7081294,17.641192,17.0117257,13.7970398,14.5667198,17.2912268,14.1243101,17.8047443,48.0785102,19.4104036,18.2322106,8.74173036,17.3660604,17.2669455,13.2435395,29.1494085,16.1764706,14.1576729,11.4336901,24.2252343,11.323289,13.9121748,17.784992,19.6893454,15.7631208,13.0905778,11.6793426,14.258027,25.0853882,13.475094,18.1881619,31.5940573,18.7380268,21.0773874,11.8740898,32.204593,16.4765579,14.9341366,31.6279977,31.956732,13.5143719,29.7883109,24.4504965,16.0309861,10.5537945,15.2589751,12.3112711,12.85435,9.33070866,13.4497842,10.9845318,13.8431503,16.771139,23.6828055,12.2083684,18.1793685,13.3233757,18.8616572,23.5504285,13.3788082,18.1757973,15.0270375,23.7026065,11.677498,14.1000841,19.2777119,10.513927,26.5504804,11.3808463,12.1051405,15.3234543,8.84588804,19.338309,11.4884393,10.1076709,13.0943276,12.4445328,21.8818751,11.233264,15.7080088,16.7975615,14.1156575,16.2824097,13.7772608,15.6221022,17.3762105,18.9896041,24.7331393,15.5998451,13.0834179,16.9825108,15.1100169,7.91325578,24.4193518,19.0096756,18.4454309,14.4987147,29.0951102,13.7107444,12.4274917,18.3200156,19.425147,25.8228923,26.2931785,17.9412424,13.6760641,19.7803247,18.1533363,13.84631,20.852313,16.599469,43.6264509,15.9254638,22.4883413,20.9940872,26.2870159,29.8544673,15.6035329,20.8318653,13.5699001,21.6803841,19.8751776,17.3050671,20.483251,18.7317293,15.3240741,22.1656323,14.3912738,20.3282422,14.3909586,30.4885126,16.4620371,13.6317946,17.4417943,19.0711481,21.877375,15.4275441,14.0016473,7.33610822,25.3558337,17.3724213,13.4311741,21.9338239,24.8578251,37.4197798,15.7492355,24.464372,18.5920497,24.6343275,15.527175,22.9065131,17.4993368,19.9064402,16.7559769,28.5880867,19.833921,17.9479167,14.8077953,20.8371926,15.0650908,17.5516579,18.9421311,19.2118611,23.1569039,19.0168872,23.3909001,35.3967841,16.5498688,15.064584,24.9955036,21.6663817],\"text\":[\"popdensity: 1270.9615\npercollege: 19.631392\",\"popdensity: 759.0000\npercollege: 11.243308\",\"popdensity: 681.4091\npercollege: 17.033819\",\"popdensity: 1812.1176\npercollege: 17.278954\",\"popdensity: 324.2222\npercollege: 14.475999\",\"popdensity: 713.7600\npercollege: 18.904624\",\"popdensity: 313.0588\npercollege: 11.917388\",\"popdensity: 622.4074\npercollege: 16.197121\",\"popdensity: 559.8750\npercollege: 14.107649\",\"popdensity: 2983.1897\npercollege: 41.295808\",\"popdensity: 819.4762\npercollege: 13.567226\",\"popdensity: 530.7000\npercollege: 15.110863\",\"popdensity: 516.4286\npercollege: 13.683010\",\"popdensity: 1170.4828\npercollege: 15.387469\",\"popdensity: 1721.4667\npercollege: 25.175041\",\"popdensity: 88018.3966\npercollege: 28.018117\",\"popdensity: 748.6154\npercollege: 16.985808\",\"popdensity: 533.5000\npercollege: 14.597889\",\"popdensity: 2050.8421\npercollege: 32.835928\",\"popdensity: 718.0870\npercollege: 16.195960\",\"popdensity: 778.5600\npercollege: 16.868526\",\"popdensity: 39083.3000\npercollege: 42.768867\",\"popdensity: 544.3056\npercollege: 16.839933\",\"popdensity: 531.4286\npercollege: 16.935645\",\"popdensity: 1132.2857\npercollege: 20.275196\",\"popdensity: 474.8409\npercollege: 13.602994\",\"popdensity: 475.8333\npercollege: 17.827356\",\"popdensity: 1612.7600\npercollege: 14.705666\",\"popdensity: 732.3077\npercollege: 15.532198\",\"popdensity: 363.6316\npercollege: 11.367521\",\"popdensity: 464.1515\npercollege: 13.049546\",\"popdensity: 1243.7308\npercollege: 18.377878\",\"popdensity: 339.9600\npercollege: 14.046766\",\"popdensity: 454.7447\npercollege: 20.660522\",\"popdensity: 576.5556\npercollege: 14.318442\",\"popdensity: 352.0000\npercollege: 13.773550\",\"popdensity: 1003.1177\npercollege: 18.723633\",\"popdensity: 459.5075\npercollege: 15.166683\",\"popdensity: 1696.3056\npercollege: 36.643665\",\"popdensity: 365.8276\npercollege: 15.025604\",\"popdensity: 1121.8182\npercollege: 18.369895\",\"popdensity: 893.0000\npercollege: 14.758309\",\"popdensity: 623.4571\npercollege: 16.413353\",\"popdensity: 567.3500\npercollege: 14.352436\",\"popdensity: 10947.2759\npercollege: 27.593883\",\"popdensity: 2468.0769\npercollege: 17.640962\",\"popdensity: 2189.6111\npercollege: 24.889349\",\"popdensity: 1342.6905\npercollege: 19.343636\",\"popdensity: 18443.5000\npercollege: 37.834053\",\"popdensity: 1572.2500\npercollege: 16.899527\",\"popdensity: 726.0000\npercollege: 14.538813\",\"popdensity: 799.8140\npercollege: 18.476678\",\"popdensity: 633.8871\npercollege: 14.503144\",\"popdensity: 855.5000\npercollege: 17.949223\",\"popdensity: 1036.5882\npercollege: 27.928024\",\"popdensity: 5090.0278\npercollege: 28.054149\",\"popdensity: 1899.7059\npercollege: 33.818551\",\"popdensity: 3348.7429\npercollege: 19.861856\",\"popdensity: 953.5800\npercollege: 14.008393\",\"popdensity: 5538.6222\npercollege: 19.699474\",\"popdensity: 1187.4571\npercollege: 16.449385\",\"popdensity: 558.5217\npercollege: 17.534884\",\"popdensity: 493.0000\npercollege: 13.505453\",\"popdensity: 1053.7143\npercollege: 14.034565\",\"popdensity: 620.2222\npercollege: 18.511502\",\"popdensity: 523.9394\npercollege: 16.474421\",\"popdensity: 974.8696\npercollege: 19.920619\",\"popdensity: 749.4634\npercollege: 11.723732\",\"popdensity: 1102.9394\npercollege: 20.724423\",\"popdensity: 663.3333\npercollege: 15.718595\",\"popdensity: 1021.2667\npercollege: 18.779374\",\"popdensity: 4811.2368\npercollege: 25.838414\",\"popdensity: 823.5385\npercollege: 13.562244\",\"popdensity: 621.9200\npercollege: 22.011857\",\"popdensity: 358.7143\npercollege: 12.174281\",\"popdensity: 198.7727\npercollege: 14.250266\",\"popdensity: 683.9091\npercollege: 14.368771\",\"popdensity: 573.0000\npercollege: 16.521279\",\"popdensity: 960.6389\npercollege: 12.741279\",\"popdensity: 752.0455\npercollege: 21.507740\",\"popdensity: 5311.5357\npercollege: 21.300729\",\"popdensity: 6571.3000\npercollege: 21.184251\",\"popdensity: 1206.8636\npercollege: 15.488346\",\"popdensity: 3497.7647\npercollege: 28.988155\",\"popdensity: 288.3846\npercollege: 14.636542\",\"popdensity: 376.2667\npercollege: 13.076099\",\"popdensity: 505.9318\npercollege: 15.951170\",\"popdensity: 384.3529\npercollege: 16.878981\",\"popdensity: 1456.1212\npercollege: 19.879575\",\"popdensity: 3171.5897\npercollege: 20.044826\",\"popdensity: 734.1250\npercollege: 17.879590\",\"popdensity: 1697.2500\npercollege: 17.057173\",\"popdensity: 1092.5833\npercollege: 24.730047\",\"popdensity: 581.2424\npercollege: 20.458265\",\"popdensity: 453.4848\npercollege: 15.960024\",\"popdensity: 410.5000\npercollege: 15.680703\",\"popdensity: 569.7241\npercollege: 15.928740\",\"popdensity: 1467.9512\npercollege: 16.553050\",\"popdensity: 7146.2600\npercollege: 24.756861\",\"popdensity: 2309.3200\npercollege: 21.059562\",\"popdensity: 8430.4333\npercollege: 22.652364\",\"popdensity: 1020.4062\npercollege: 22.805218\",\"popdensity: 1480.7143\npercollege: 16.115680\",\"popdensity: 7337.4634\npercollege: 27.359786\",\"popdensity: 2893.5000\npercollege: 22.846815\",\"popdensity: 393.3750\npercollege: 13.464398\",\"popdensity: 1406.7000\npercollege: 12.981964\",\"popdensity: 1589.4583\npercollege: 27.830624\",\"popdensity: 741.0526\npercollege: 19.800210\",\"popdensity: 854.9545\npercollege: 15.456254\",\"popdensity: 1600.5417\npercollege: 13.214982\",\"popdensity: 3989.8636\npercollege: 16.812357\",\"popdensity: 1176.4286\npercollege: 14.113725\",\"popdensity: 1346.6956\npercollege: 16.045283\",\"popdensity: 550.7778\npercollege: 8.543751\",\"popdensity: 1058.9615\npercollege: 13.239127\",\"popdensity: 2043.9474\npercollege: 15.574276\",\"popdensity: 1074.7727\npercollege: 13.921368\",\"popdensity: 1605.6364\npercollege: 15.581854\",\"popdensity: 5202.5652\npercollege: 21.197015\",\"popdensity: 1408.3077\npercollege: 17.167663\",\"popdensity: 5785.1111\npercollege: 18.372342\",\"popdensity: 2167.9167\npercollege: 11.424988\",\"popdensity: 7156.0000\npercollege: 20.549893\",\"popdensity: 712.3200\npercollege: 11.145299\",\"popdensity: 851.3043\npercollege: 12.993599\",\"popdensity: 897.1429\npercollege: 13.929867\",\"popdensity: 1100.4483\npercollege: 15.504320\",\"popdensity: 3090.3750\npercollege: 15.538167\",\"popdensity: 921.5152\npercollege: 14.952296\",\"popdensity: 4539.0000\npercollege: 42.131150\",\"popdensity: 2678.0588\npercollege: 20.489939\",\"popdensity: 1067.5000\npercollege: 13.107441\",\"popdensity: 3154.8750\npercollege: 24.220035\",\"popdensity: 2005.7917\npercollege: 13.257682\",\"popdensity: 5051.6875\npercollege: 20.229814\",\"popdensity: 1540.3044\npercollege: 16.973139\",\"popdensity: 1257.6667\npercollege: 13.142313\",\"popdensity: 734.1176\npercollege: 14.855846\",\"popdensity: 977.8182\npercollege: 12.771798\",\"popdensity: 1418.9048\npercollege: 17.546090\",\"popdensity: 1126.7143\npercollege: 10.145898\",\"popdensity: 4894.9444\npercollege: 22.308069\",\"popdensity: 1286.5807\npercollege: 19.975748\",\"popdensity: 2040.4375\npercollege: 19.262915\",\"popdensity: 1339.8636\npercollege: 11.111801\",\"popdensity: 15853.1333\npercollege: 17.668614\",\"popdensity: 2974.0556\npercollege: 17.179253\",\"popdensity: 1586.5185\npercollege: 13.147652\",\"popdensity: 5025.7308\npercollege: 16.401998\",\"popdensity: 34659.0870\npercollege: 26.744689\",\"popdensity: 1622.3846\npercollege: 17.777526\",\"popdensity: 493.7619\npercollege: 13.539623\",\"popdensity: 1537.3750\npercollege: 14.407570\",\"popdensity: 4540.7500\npercollege: 37.742295\",\"popdensity: 1147.8667\npercollege: 16.925228\",\"popdensity: 2330.0000\npercollege: 14.679814\",\"popdensity: 564.6250\npercollege: 12.174624\",\"popdensity: 1515.0800\npercollege: 12.638763\",\"popdensity: 1063.0000\npercollege: 10.702922\",\"popdensity: 800.3913\npercollege: 9.788271\",\"popdensity: 751.3478\npercollege: 11.164918\",\"popdensity: 570.7407\npercollege: 14.612900\",\"popdensity: 868.5000\npercollege: 11.042295\",\"popdensity: 625.4500\npercollege: 13.842852\",\"popdensity: 4958.9231\npercollege: 24.455887\",\"popdensity: 1038.7200\npercollege: 17.210683\",\"popdensity: 486.2692\npercollege: 14.171056\",\"popdensity: 1045.3448\npercollege: 15.734664\",\"popdensity: 1044.1538\npercollege: 12.620097\",\"popdensity: 984.6400\npercollege: 13.528146\",\"popdensity: 788.2174\npercollege: 12.846370\",\"popdensity: 8823.2857\npercollege: 24.611669\",\"popdensity: 1908.2727\npercollege: 10.589586\",\"popdensity: 1679.4583\npercollege: 14.700019\",\"popdensity: 812.0833\npercollege: 14.133824\",\"popdensity: 1197.2105\npercollege: 10.014025\",\"popdensity: 1306.9524\npercollege: 18.608020\",\"popdensity: 703.4444\npercollege: 15.481670\",\"popdensity: 595.2308\npercollege: 9.471585\",\"popdensity: 4353.2667\npercollege: 36.245445\",\"popdensity: 1007.4375\npercollege: 15.421939\",\"popdensity: 697.6000\npercollege: 12.644985\",\"popdensity: 12696.7692\npercollege: 21.758517\",\"popdensity: 1048.3125\npercollege: 12.272687\",\"popdensity: 4421.1250\npercollege: 22.723012\",\"popdensity: 1524.7391\npercollege: 16.080516\",\"popdensity: 389.3333\npercollege: 13.399963\",\"popdensity: 1953.0435\npercollege: 23.815567\",\"popdensity: 790.5667\npercollege: 10.814597\",\"popdensity: 2997.9583\npercollege: 15.589125\",\"popdensity: 1235.6191\npercollege: 18.565504\",\"popdensity: 775.5000\npercollege: 16.583835\",\"popdensity: 1382.5500\npercollege: 15.809776\",\"popdensity: 247.4390\npercollege: 14.115092\",\"popdensity: 175.9216\npercollege: 16.275587\",\"popdensity: 1847.1225\npercollege: 18.066021\",\"popdensity: 900.1471\npercollege: 18.933796\",\"popdensity: 586.6129\npercollege: 19.039803\",\"popdensity: 711.0000\npercollege: 11.827847\",\"popdensity: 147.2963\npercollege: 14.576074\",\"popdensity: 1472.2647\npercollege: 17.251975\",\"popdensity: 4297.0385\npercollege: 18.225825\",\"popdensity: 610.0000\npercollege: 21.420857\",\"popdensity: 4890.2424\npercollege: 23.742011\",\"popdensity: 1431.1035\npercollege: 16.066702\",\"popdensity: 3237.6667\npercollege: 21.488519\",\"popdensity: 1649.2333\npercollege: 15.844352\",\"popdensity: 975.8182\npercollege: 22.652725\",\"popdensity: 445.7917\npercollege: 14.647709\",\"popdensity: 443.6410\npercollege: 16.939766\",\"popdensity: 733.8824\npercollege: 12.041949\",\"popdensity: 1702.4412\npercollege: 22.864736\",\"popdensity: 360.5882\npercollege: 18.778702\",\"popdensity: 547.5362\npercollege: 18.912404\",\"popdensity: 583.2826\npercollege: 20.420654\",\"popdensity: 2731.7353\npercollege: 26.978782\",\"popdensity: 927.4074\npercollege: 26.872568\",\"popdensity: 11634.0270\npercollege: 20.145424\",\"popdensity: 706.3226\npercollege: 11.433139\",\"popdensity: 265.4706\npercollege: 21.173081\",\"popdensity: 2142.4333\npercollege: 30.975325\",\"popdensity: 1181.2727\npercollege: 16.444129\",\"popdensity: 1277.3824\npercollege: 16.468470\",\"popdensity: 590.7667\npercollege: 24.765088\",\"popdensity: 699.0200\npercollege: 14.308273\",\"popdensity: 8291.5294\npercollege: 36.760062\",\"popdensity: 1677.1765\npercollege: 15.116835\",\"popdensity: 915.4242\npercollege: 16.234240\",\"popdensity: 188.2143\npercollege: 15.457578\",\"popdensity: 1606.5882\npercollege: 27.249736\",\"popdensity: 3482.6977\npercollege: 21.205783\",\"popdensity: 6770.0303\npercollege: 34.557186\",\"popdensity: 409.0000\npercollege: 11.455510\",\"popdensity: 10012.6200\npercollege: 28.638376\",\"popdensity: 85.0500\npercollege: 14.452215\",\"popdensity: 245.2286\npercollege: 11.313438\",\"popdensity: 1967.5790\npercollege: 16.154235\",\"popdensity: 787.0000\npercollege: 32.596387\",\"popdensity: 2127.3488\npercollege: 18.788062\",\"popdensity: 3401.3235\npercollege: 27.586636\",\"popdensity: 104.7818\npercollege: 14.405668\",\"popdensity: 180.9153\npercollege: 15.287870\",\"popdensity: 25621.4286\npercollege: 20.686691\",\"popdensity: 664.5312\npercollege: 16.252822\",\"popdensity: 644.4273\npercollege: 26.763554\",\"popdensity: 880.5862\npercollege: 18.540129\",\"popdensity: 1097.2941\npercollege: 25.046041\",\"popdensity: 389.3750\npercollege: 15.084171\",\"popdensity: 2440.3548\npercollege: 35.608837\",\"popdensity: 368.0909\npercollege: 13.280021\",\"popdensity: 4048.4848\npercollege: 17.429610\",\"popdensity: 1263.3095\npercollege: 14.160017\",\"popdensity: 270.7879\npercollege: 13.457557\",\"popdensity: 5677.9643\npercollege: 19.043321\",\"popdensity: 749.0588\npercollege: 15.694693\",\"popdensity: 19701.6727\npercollege: 36.963511\",\"popdensity: 748.4667\npercollege: 16.902410\",\"popdensity: 583.7812\npercollege: 11.656838\",\"popdensity: 113.5128\npercollege: 15.956760\",\"popdensity: 592.5294\npercollege: 13.665839\",\"popdensity: 237.6364\npercollege: 12.921038\",\"popdensity: 579.2581\npercollege: 20.021131\",\"popdensity: 5689.9394\npercollege: 26.965694\",\"popdensity: 327.2143\npercollege: 13.893376\",\"popdensity: 581.6471\npercollege: 13.363353\",\"popdensity: 4415.5417\npercollege: 19.708129\",\"popdensity: 3640.1750\npercollege: 17.641192\",\"popdensity: 2031.4828\npercollege: 17.011726\",\"popdensity: 713.0000\npercollege: 13.797040\",\"popdensity: 110.6933\npercollege: 14.566720\",\"popdensity: 2250.6452\npercollege: 17.291227\",\"popdensity: 1156.2083\npercollege: 14.124310\",\"popdensity: 1893.5135\npercollege: 17.804744\",\"popdensity: 6900.9024\npercollege: 48.078510\",\"popdensity: 60333.9143\npercollege: 19.410404\",\"popdensity: 775.2941\npercollege: 18.232211\",\"popdensity: 724.8857\npercollege: 8.741730\",\"popdensity: 4573.1250\npercollege: 17.366060\",\"popdensity: 1900.2800\npercollege: 17.266945\",\"popdensity: 2434.6585\npercollege: 13.243540\",\"popdensity: 1984.9667\npercollege: 29.149408\",\"popdensity: 1857.7083\npercollege: 16.176471\",\"popdensity: 2292.7097\npercollege: 14.157673\",\"popdensity: 1248.7857\npercollege: 11.433690\",\"popdensity: 10409.9643\npercollege: 24.225234\",\"popdensity: 1105.0417\npercollege: 11.323289\",\"popdensity: 1385.3462\npercollege: 13.912175\",\"popdensity: 6147.8333\npercollege: 17.784992\",\"popdensity: 5776.4231\npercollege: 19.689345\",\"popdensity: 1475.6250\npercollege: 15.763121\",\"popdensity: 3492.7742\npercollege: 13.090578\",\"popdensity: 1041.9706\npercollege: 11.679343\",\"popdensity: 2081.3043\npercollege: 14.258027\",\"popdensity: 54313.0769\npercollege: 25.085388\",\"popdensity: 1489.4167\npercollege: 13.475094\",\"popdensity: 1710.8696\npercollege: 18.188162\",\"popdensity: 2478.8519\npercollege: 31.594057\",\"popdensity: 5484.2143\npercollege: 18.738027\",\"popdensity: 3567.6207\npercollege: 21.077387\",\"popdensity: 1144.4167\npercollege: 11.874090\",\"popdensity: 28277.5588\npercollege: 32.204593\",\"popdensity: 1539.9200\npercollege: 16.476558\",\"popdensity: 1190.5385\npercollege: 14.934137\",\"popdensity: 3380.3750\npercollege: 31.627998\",\"popdensity: 5469.2400\npercollege: 31.956732\",\"popdensity: 1219.5000\npercollege: 13.514372\",\"popdensity: 34649.1200\npercollege: 29.788311\",\"popdensity: 2114.0645\npercollege: 24.450496\",\"popdensity: 1111.1071\npercollege: 16.030986\",\"popdensity: 643.4000\npercollege: 10.553795\",\"popdensity: 1164.3200\npercollege: 15.258975\",\"popdensity: 1050.8235\npercollege: 12.311271\",\"popdensity: 1063.8750\npercollege: 12.854350\",\"popdensity: 1313.9600\npercollege: 9.330709\",\"popdensity: 1874.6667\npercollege: 13.449784\",\"popdensity: 1259.5833\npercollege: 10.984532\",\"popdensity: 3649.9091\npercollege: 13.843150\",\"popdensity: 1582.4333\npercollege: 16.771139\",\"popdensity: 16576.8462\npercollege: 23.682806\",\"popdensity: 2378.2308\npercollege: 12.208368\",\"popdensity: 3207.5000\npercollege: 18.179368\",\"popdensity: 1567.0370\npercollege: 13.323376\",\"popdensity: 9349.1724\npercollege: 18.861657\",\"popdensity: 22017.1905\npercollege: 23.550428\",\"popdensity: 1323.8571\npercollege: 13.378808\",\"popdensity: 11033.5833\npercollege: 18.175797\",\"popdensity: 2678.0833\npercollege: 15.027038\",\"popdensity: 4894.1600\npercollege: 23.702607\",\"popdensity: 919.4800\npercollege: 11.677498\",\"popdensity: 1408.6786\npercollege: 14.100084\",\"popdensity: 3882.5833\npercollege: 19.277712\",\"popdensity: 596.0385\npercollege: 10.513927\",\"popdensity: 21252.1852\npercollege: 26.550480\",\"popdensity: 567.7600\npercollege: 11.380846\",\"popdensity: 1156.2083\npercollege: 12.105140\",\"popdensity: 2001.6585\npercollege: 15.323454\",\"popdensity: 472.3333\npercollege: 8.845888\",\"popdensity: 2501.8125\npercollege: 19.338309\",\"popdensity: 819.5200\npercollege: 11.488439\",\"popdensity: 1372.0435\npercollege: 10.107671\",\"popdensity: 1608.5000\npercollege: 13.094328\",\"popdensity: 932.6538\npercollege: 12.444533\",\"popdensity: 4752.8333\npercollege: 21.881875\",\"popdensity: 1604.5200\npercollege: 11.233264\",\"popdensity: 1166.1724\npercollege: 15.708009\",\"popdensity: 4349.5517\npercollege: 16.797562\",\"popdensity: 1690.9756\npercollege: 14.115657\",\"popdensity: 2581.7917\npercollege: 16.282410\",\"popdensity: 2295.0571\npercollege: 13.777261\",\"popdensity: 1810.0909\npercollege: 15.622102\",\"popdensity: 1796.6000\npercollege: 17.376210\",\"popdensity: 10811.3235\npercollege: 18.989604\",\"popdensity: 21457.9167\npercollege: 24.733139\",\"popdensity: 6157.1081\npercollege: 15.599845\",\"popdensity: 2473.2353\npercollege: 13.083418\",\"popdensity: 1229.5769\npercollege: 16.982511\",\"popdensity: 1269.3333\npercollege: 15.110017\",\"popdensity: 462.4167\npercollege: 7.913256\",\"popdensity: 4952.5652\npercollege: 24.419352\",\"popdensity: 1638.2632\npercollege: 19.009676\",\"popdensity: 3074.5758\npercollege: 18.445431\",\"popdensity: 1478.2400\npercollege: 14.498715\",\"popdensity: 3061.3243\npercollege: 29.095110\",\"popdensity: 927.2500\npercollege: 13.710744\",\"popdensity: 382.4878\npercollege: 12.427492\",\"popdensity: 301.9815\npercollege: 18.320016\",\"popdensity: 768.8679\npercollege: 19.425147\",\"popdensity: 157.3933\npercollege: 25.822892\",\"popdensity: 6081.0625\npercollege: 26.293178\",\"popdensity: 339.6000\npercollege: 17.941242\",\"popdensity: 246.8679\npercollege: 13.676064\",\"popdensity: 1490.9130\npercollege: 19.780325\",\"popdensity: 831.1111\npercollege: 18.153336\",\"popdensity: 439.5417\npercollege: 13.846310\",\"popdensity: 980.1739\npercollege: 20.852313\",\"popdensity: 455.4286\npercollege: 16.599469\",\"popdensity: 5028.5616\npercollege: 43.626451\",\"popdensity: 1417.7593\npercollege: 15.925464\",\"popdensity: 917.5000\npercollege: 22.488341\",\"popdensity: 535.3590\npercollege: 20.994087\",\"popdensity: 690.5577\npercollege: 26.287016\",\"popdensity: 2241.6579\npercollege: 29.854467\",\"popdensity: 153.0000\npercollege: 15.603533\",\"popdensity: 2047.3409\npercollege: 20.831865\",\"popdensity: 146.2667\npercollege: 13.569900\",\"popdensity: 713.9710\npercollege: 21.680384\",\"popdensity: 892.3235\npercollege: 19.875178\",\"popdensity: 847.7727\npercollege: 17.305067\",\"popdensity: 438.0435\npercollege: 20.483251\",\"popdensity: 130.9149\npercollege: 18.731729\",\"popdensity: 276.4667\npercollege: 15.324074\",\"popdensity: 1936.6571\npercollege: 22.165632\",\"popdensity: 460.6383\npercollege: 14.391274\",\"popdensity: 8011.3125\npercollege: 20.328242\",\"popdensity: 943.9000\npercollege: 14.390959\",\"popdensity: 3496.5714\npercollege: 30.488513\",\"popdensity: 434.4865\npercollege: 16.462037\",\"popdensity: 375.0962\npercollege: 13.631795\",\"popdensity: 509.3019\npercollege: 17.441794\",\"popdensity: 2233.9167\npercollege: 19.071148\",\"popdensity: 1227.6596\npercollege: 21.877375\",\"popdensity: 494.4878\npercollege: 15.427544\",\"popdensity: 456.3333\npercollege: 14.001647\",\"popdensity: 185.2381\npercollege: 7.336108\",\"popdensity: 63951.6667\npercollege: 25.355834\",\"popdensity: 678.3889\npercollege: 17.372421\",\"popdensity: 503.7667\npercollege: 13.431174\",\"popdensity: 446.1831\npercollege: 21.933824\",\"popdensity: 3797.5676\npercollege: 24.857825\",\"popdensity: 4855.4000\npercollege: 37.419780\",\"popdensity: 507.6429\npercollege: 15.749235\",\"popdensity: 963.6765\npercollege: 24.464372\",\"popdensity: 632.2364\npercollege: 18.592050\",\"popdensity: 1279.2708\npercollege: 24.634328\",\"popdensity: 208.0000\npercollege: 15.527175\",\"popdensity: 8751.7000\npercollege: 22.906513\",\"popdensity: 515.3235\npercollege: 17.499337\",\"popdensity: 3321.6667\npercollege: 19.906440\",\"popdensity: 274.1636\npercollege: 16.755977\",\"popdensity: 1142.0682\npercollege: 28.588087\",\"popdensity: 939.5000\npercollege: 19.833921\",\"popdensity: 179.5063\npercollege: 17.947917\",\"popdensity: 688.0926\npercollege: 14.807795\",\"popdensity: 3246.1562\npercollege: 20.837193\",\"popdensity: 331.5965\npercollege: 15.065091\",\"popdensity: 587.5116\npercollege: 17.551658\",\"popdensity: 533.6875\npercollege: 18.942131\",\"popdensity: 295.1167\npercollege: 19.211861\",\"popdensity: 2343.7500\npercollege: 23.156904\",\"popdensity: 275.4400\npercollege: 19.016887\",\"popdensity: 3813.1200\npercollege: 23.390900\",\"popdensity: 8962.2059\npercollege: 35.396784\",\"popdensity: 1024.5333\npercollege: 16.549869\",\"popdensity: 523.9189\npercollege: 15.064584\",\"popdensity: 4009.1429\npercollege: 24.995504\",\"popdensity: 1533.4375\npercollege: 21.666382\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.958904109589,\"r\":7.30593607305936,\"b\":40.9132420091324,\"l\":37.2602739726027},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-4311.61733,92415.06393],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"25000\",\"50000\",\"75000\"],\"tickvals\":[0,25000,50000,75000],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"25000\",\"50000\",\"75000\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"popdensity\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[5.298988121,50.115630299],\"tickmode\":\"array\",\"ticktext\":[\"10\",\"20\",\"30\",\"40\",\"50\"],\"tickvals\":[10,20,30,40,50],\"categoryorder\":\"array\",\"categoryarray\":[\"10\",\"20\",\"30\",\"40\",\"50\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"percollege\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1c7a6d6f28bc\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"1c7a6d6f28bc\",\"visdat\":{\"1c7a6d6f28bc\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} The interactive version allows you to hover over the points to see the specific values. In addition, there are specific ways to interact with the figure that show up just above the figure itself. These options include, zoom, pan around the image, toggle spike lines, save a png static image, compare points on hover, etc. There are also options to select data points, these are most useful when you link plots together in web-based applications so that a single image can be used to select the points that will show up in subsequent figures. This will be explored in more detail later.\nCustomized Interactive Plot This is an example of a customized interactive plot to show that the ggplotly() function does a great job of translating a figure that has been customized by adding a color aesthetic, custom axis labels and breaks, and applying a new theme. ggplotly() can handle all of these manipulations which makes it highly flexible.\np \u0026lt;- ggplot(midwest, aes(x = popdensity, y = percollege, color = state)) + geom_point() + scale_x_continuous(\u0026quot;Population Density\u0026quot;, breaks = seq(0, 80000, 20000)) + scale_y_continuous(\u0026quot;Percent College Graduates\u0026quot;) + scale_color_discrete(\u0026quot;State\u0026quot;) + theme_bw() ggplotly(p)  {\"x\":{\"data\":[{\"x\":[1270.96154,759,681.409091,1812.11765,324.222222,713.76,313.058824,622.407407,559.875,2983.18966,819.47619,530.7,516.428571,1170.48276,1721.46667,88018.3966,748.615385,533.5,2050.84211,718.086957,778.56,39083.3,544.305556,531.428571,1132.28571,474.840909,475.833333,1612.76,732.307692,363.631579,464.151515,1243.73077,339.96,454.744681,576.555556,352,1003.11765,459.507463,1696.30556,365.827586,1121.81818,893,623.457143,567.35,10947.2759,2468.07692,2189.61111,1342.69048,18443.5,1572.25,726,799.813953,633.887097,855.5,1036.58824,5090.02778,1899.70588,3348.74286,953.58,5538.62222,1187.45714,558.521739,493,1053.71429,620.222222,523.939394,974.869565,749.463415,1102.93939,663.333333,1021.26667,4811.23684,823.538462,621.92,358.714286,198.772727,683.909091,573,960.638889,752.045455,5311.53571,6571.3,1206.86364,3497.76471,288.384615,376.266667,505.931818,384.352941,1456.12121,3171.58974,734.125,1697.25,1092.58333,581.242424,453.484848,410.5,569.724138,1467.95122,7146.26,2309.32,8430.43333,1020.40625],\"y\":[19.6313918,11.2433076,17.0338194,17.2789539,14.475999,18.9046238,11.9173877,16.1971209,14.1076487,41.2958081,13.567226,15.1108627,13.6830103,15.3874693,25.1750412,28.0181167,16.9858076,14.5978891,32.835928,16.1959601,16.8685259,42.7688669,16.8399327,16.9356446,20.2751964,13.6029941,17.8273561,14.7056662,15.5321976,11.3675214,13.0495464,18.3778784,14.0467657,20.6605223,14.3184422,13.7735504,18.7236334,15.1666829,36.6436653,15.0256035,18.3698955,14.7583093,16.4133528,14.3524363,27.5938834,17.6409622,24.8893485,19.3436365,37.8340529,16.8995267,14.5388128,18.476678,14.5031437,17.9492226,27.9280239,28.0541488,33.8185507,19.8618556,14.0083929,19.6994744,16.4493851,17.5348837,13.5054525,14.034565,18.511502,16.4744211,19.9206186,11.723732,20.7244228,15.7185951,18.7793745,25.838414,13.5622441,22.011857,12.1742809,14.2502659,14.3687708,16.5212794,12.7412789,21.5077402,21.3007289,21.184251,15.4883463,28.9881549,14.6365422,13.0760986,15.9511699,16.8789809,19.8795753,20.0448263,17.8795898,17.0571729,24.7300469,20.4582651,15.9600242,15.6807027,15.9287398,16.5530497,24.7568609,21.0595616,22.652364,22.8052176],\"text\":[\"popdensity: 1270.9615\npercollege: 19.631392\nstate: IL\",\"popdensity: 759.0000\npercollege: 11.243308\nstate: IL\",\"popdensity: 681.4091\npercollege: 17.033819\nstate: IL\",\"popdensity: 1812.1176\npercollege: 17.278954\nstate: IL\",\"popdensity: 324.2222\npercollege: 14.475999\nstate: IL\",\"popdensity: 713.7600\npercollege: 18.904624\nstate: IL\",\"popdensity: 313.0588\npercollege: 11.917388\nstate: IL\",\"popdensity: 622.4074\npercollege: 16.197121\nstate: IL\",\"popdensity: 559.8750\npercollege: 14.107649\nstate: IL\",\"popdensity: 2983.1897\npercollege: 41.295808\nstate: IL\",\"popdensity: 819.4762\npercollege: 13.567226\nstate: IL\",\"popdensity: 530.7000\npercollege: 15.110863\nstate: IL\",\"popdensity: 516.4286\npercollege: 13.683010\nstate: IL\",\"popdensity: 1170.4828\npercollege: 15.387469\nstate: IL\",\"popdensity: 1721.4667\npercollege: 25.175041\nstate: IL\",\"popdensity: 88018.3966\npercollege: 28.018117\nstate: IL\",\"popdensity: 748.6154\npercollege: 16.985808\nstate: IL\",\"popdensity: 533.5000\npercollege: 14.597889\nstate: IL\",\"popdensity: 2050.8421\npercollege: 32.835928\nstate: IL\",\"popdensity: 718.0870\npercollege: 16.195960\nstate: IL\",\"popdensity: 778.5600\npercollege: 16.868526\nstate: IL\",\"popdensity: 39083.3000\npercollege: 42.768867\nstate: IL\",\"popdensity: 544.3056\npercollege: 16.839933\nstate: IL\",\"popdensity: 531.4286\npercollege: 16.935645\nstate: IL\",\"popdensity: 1132.2857\npercollege: 20.275196\nstate: IL\",\"popdensity: 474.8409\npercollege: 13.602994\nstate: IL\",\"popdensity: 475.8333\npercollege: 17.827356\nstate: IL\",\"popdensity: 1612.7600\npercollege: 14.705666\nstate: IL\",\"popdensity: 732.3077\npercollege: 15.532198\nstate: IL\",\"popdensity: 363.6316\npercollege: 11.367521\nstate: IL\",\"popdensity: 464.1515\npercollege: 13.049546\nstate: IL\",\"popdensity: 1243.7308\npercollege: 18.377878\nstate: IL\",\"popdensity: 339.9600\npercollege: 14.046766\nstate: IL\",\"popdensity: 454.7447\npercollege: 20.660522\nstate: IL\",\"popdensity: 576.5556\npercollege: 14.318442\nstate: IL\",\"popdensity: 352.0000\npercollege: 13.773550\nstate: IL\",\"popdensity: 1003.1177\npercollege: 18.723633\nstate: IL\",\"popdensity: 459.5075\npercollege: 15.166683\nstate: IL\",\"popdensity: 1696.3056\npercollege: 36.643665\nstate: IL\",\"popdensity: 365.8276\npercollege: 15.025604\nstate: IL\",\"popdensity: 1121.8182\npercollege: 18.369895\nstate: IL\",\"popdensity: 893.0000\npercollege: 14.758309\nstate: IL\",\"popdensity: 623.4571\npercollege: 16.413353\nstate: IL\",\"popdensity: 567.3500\npercollege: 14.352436\nstate: IL\",\"popdensity: 10947.2759\npercollege: 27.593883\nstate: IL\",\"popdensity: 2468.0769\npercollege: 17.640962\nstate: IL\",\"popdensity: 2189.6111\npercollege: 24.889349\nstate: IL\",\"popdensity: 1342.6905\npercollege: 19.343636\nstate: IL\",\"popdensity: 18443.5000\npercollege: 37.834053\nstate: IL\",\"popdensity: 1572.2500\npercollege: 16.899527\nstate: IL\",\"popdensity: 726.0000\npercollege: 14.538813\nstate: IL\",\"popdensity: 799.8140\npercollege: 18.476678\nstate: IL\",\"popdensity: 633.8871\npercollege: 14.503144\nstate: IL\",\"popdensity: 855.5000\npercollege: 17.949223\nstate: IL\",\"popdensity: 1036.5882\npercollege: 27.928024\nstate: IL\",\"popdensity: 5090.0278\npercollege: 28.054149\nstate: IL\",\"popdensity: 1899.7059\npercollege: 33.818551\nstate: IL\",\"popdensity: 3348.7429\npercollege: 19.861856\nstate: IL\",\"popdensity: 953.5800\npercollege: 14.008393\nstate: IL\",\"popdensity: 5538.6222\npercollege: 19.699474\nstate: IL\",\"popdensity: 1187.4571\npercollege: 16.449385\nstate: IL\",\"popdensity: 558.5217\npercollege: 17.534884\nstate: IL\",\"popdensity: 493.0000\npercollege: 13.505453\nstate: IL\",\"popdensity: 1053.7143\npercollege: 14.034565\nstate: IL\",\"popdensity: 620.2222\npercollege: 18.511502\nstate: IL\",\"popdensity: 523.9394\npercollege: 16.474421\nstate: IL\",\"popdensity: 974.8696\npercollege: 19.920619\nstate: IL\",\"popdensity: 749.4634\npercollege: 11.723732\nstate: IL\",\"popdensity: 1102.9394\npercollege: 20.724423\nstate: IL\",\"popdensity: 663.3333\npercollege: 15.718595\nstate: IL\",\"popdensity: 1021.2667\npercollege: 18.779374\nstate: IL\",\"popdensity: 4811.2368\npercollege: 25.838414\nstate: IL\",\"popdensity: 823.5385\npercollege: 13.562244\nstate: IL\",\"popdensity: 621.9200\npercollege: 22.011857\nstate: IL\",\"popdensity: 358.7143\npercollege: 12.174281\nstate: IL\",\"popdensity: 198.7727\npercollege: 14.250266\nstate: IL\",\"popdensity: 683.9091\npercollege: 14.368771\nstate: IL\",\"popdensity: 573.0000\npercollege: 16.521279\nstate: IL\",\"popdensity: 960.6389\npercollege: 12.741279\nstate: IL\",\"popdensity: 752.0455\npercollege: 21.507740\nstate: IL\",\"popdensity: 5311.5357\npercollege: 21.300729\nstate: IL\",\"popdensity: 6571.3000\npercollege: 21.184251\nstate: IL\",\"popdensity: 1206.8636\npercollege: 15.488346\nstate: IL\",\"popdensity: 3497.7647\npercollege: 28.988155\nstate: IL\",\"popdensity: 288.3846\npercollege: 14.636542\nstate: IL\",\"popdensity: 376.2667\npercollege: 13.076099\nstate: IL\",\"popdensity: 505.9318\npercollege: 15.951170\nstate: IL\",\"popdensity: 384.3529\npercollege: 16.878981\nstate: IL\",\"popdensity: 1456.1212\npercollege: 19.879575\nstate: IL\",\"popdensity: 3171.5897\npercollege: 20.044826\nstate: IL\",\"popdensity: 734.1250\npercollege: 17.879590\nstate: IL\",\"popdensity: 1697.2500\npercollege: 17.057173\nstate: IL\",\"popdensity: 1092.5833\npercollege: 24.730047\nstate: IL\",\"popdensity: 581.2424\npercollege: 20.458265\nstate: IL\",\"popdensity: 453.4848\npercollege: 15.960024\nstate: IL\",\"popdensity: 410.5000\npercollege: 15.680703\nstate: IL\",\"popdensity: 569.7241\npercollege: 15.928740\nstate: IL\",\"popdensity: 1467.9512\npercollege: 16.553050\nstate: IL\",\"popdensity: 7146.2600\npercollege: 24.756861\nstate: IL\",\"popdensity: 2309.3200\npercollege: 21.059562\nstate: IL\",\"popdensity: 8430.4333\npercollege: 22.652364\nstate: IL\",\"popdensity: 1020.4062\npercollege: 22.805218\nstate: IL\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(248,118,109,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(248,118,109,1)\"}},\"hoveron\":\"points\",\"name\":\"IL\",\"legendgroup\":\"IL\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1480.71429,7337.46341,2893.5,393.375,1406.7,1589.45833,741.052632,854.954545,1600.54167,3989.86364,1176.42857,1346.69565,550.777778,1058.96154,2043.94737,1074.77273,1605.63636,5202.56522,1408.30769,5785.11111,2167.91667,7156,712.32,851.304348,897.142857,1100.44828,3090.375,921.515152,4539,2678.05882,1067.5,3154.875,2005.79167,5051.6875,1540.30435,1257.66667,734.117647,977.818182,1418.90476,1126.71429,4894.94444,1286.58065,2040.4375,1339.86364,15853.1333,2974.05556,1586.51852,5025.73077,34659.087,1622.38462,493.761905,1537.375,4540.75,1147.86667,2330,564.625,1515.08,1063,800.391304,751.347826,570.740741,868.5,625.45,4958.92308,1038.72,486.269231,1045.34483,1044.15385,984.64,788.217391,8823.28571,1908.27273,1679.45833,812.083333,1197.21053,1306.95238,703.444444,595.230769,4353.26667,1007.4375,697.6,12696.7692,1048.3125,4421.125,1524.73913,389.333333,1953.04348,790.566667,2997.95833,1235.61905,775.5,1382.55],\"y\":[16.1156797,27.3597862,22.8468145,13.4643978,12.9819635,27.8306241,19.8002103,15.4562536,13.2149823,16.8123574,14.1137248,16.045283,8.54375099,13.2391267,15.5742757,13.9213675,15.581854,21.1970145,17.1676628,18.3723425,11.4249881,20.5498928,11.1452991,12.9935988,13.929867,15.50432,15.5381671,14.9522958,42.1311499,20.4899394,13.1074407,24.2200345,13.2576823,20.2298144,16.9731386,13.1423129,14.8558462,12.771798,17.5460903,10.1458975,22.308069,19.9757478,19.2629151,11.1118012,17.6686138,17.1792531,13.1476522,16.401998,26.7446886,17.7775263,13.5396226,14.4075703,37.7422954,16.9252277,14.6798142,12.1746236,12.6387629,10.7029216,9.78827088,11.1649179,14.6129001,11.0422948,13.842852,24.455887,17.2106825,14.1710559,15.734664,12.6200972,13.5281456,12.8463697,24.611669,10.5895865,14.7000195,14.1338236,10.0140252,18.6080204,15.4816696,9.47158524,36.2454446,15.4219389,12.6449852,21.7585174,12.2726866,22.7230118,16.0805162,13.399963,23.8155668,10.8145974,15.5891252,18.5655038,16.5838347,15.809776],\"text\":[\"popdensity: 1480.7143\npercollege: 16.115680\nstate: IN\",\"popdensity: 7337.4634\npercollege: 27.359786\nstate: IN\",\"popdensity: 2893.5000\npercollege: 22.846815\nstate: IN\",\"popdensity: 393.3750\npercollege: 13.464398\nstate: IN\",\"popdensity: 1406.7000\npercollege: 12.981964\nstate: IN\",\"popdensity: 1589.4583\npercollege: 27.830624\nstate: IN\",\"popdensity: 741.0526\npercollege: 19.800210\nstate: IN\",\"popdensity: 854.9545\npercollege: 15.456254\nstate: IN\",\"popdensity: 1600.5417\npercollege: 13.214982\nstate: IN\",\"popdensity: 3989.8636\npercollege: 16.812357\nstate: IN\",\"popdensity: 1176.4286\npercollege: 14.113725\nstate: IN\",\"popdensity: 1346.6956\npercollege: 16.045283\nstate: IN\",\"popdensity: 550.7778\npercollege: 8.543751\nstate: IN\",\"popdensity: 1058.9615\npercollege: 13.239127\nstate: IN\",\"popdensity: 2043.9474\npercollege: 15.574276\nstate: IN\",\"popdensity: 1074.7727\npercollege: 13.921368\nstate: IN\",\"popdensity: 1605.6364\npercollege: 15.581854\nstate: IN\",\"popdensity: 5202.5652\npercollege: 21.197015\nstate: IN\",\"popdensity: 1408.3077\npercollege: 17.167663\nstate: IN\",\"popdensity: 5785.1111\npercollege: 18.372342\nstate: IN\",\"popdensity: 2167.9167\npercollege: 11.424988\nstate: IN\",\"popdensity: 7156.0000\npercollege: 20.549893\nstate: IN\",\"popdensity: 712.3200\npercollege: 11.145299\nstate: IN\",\"popdensity: 851.3043\npercollege: 12.993599\nstate: IN\",\"popdensity: 897.1429\npercollege: 13.929867\nstate: IN\",\"popdensity: 1100.4483\npercollege: 15.504320\nstate: IN\",\"popdensity: 3090.3750\npercollege: 15.538167\nstate: IN\",\"popdensity: 921.5152\npercollege: 14.952296\nstate: IN\",\"popdensity: 4539.0000\npercollege: 42.131150\nstate: IN\",\"popdensity: 2678.0588\npercollege: 20.489939\nstate: IN\",\"popdensity: 1067.5000\npercollege: 13.107441\nstate: IN\",\"popdensity: 3154.8750\npercollege: 24.220035\nstate: IN\",\"popdensity: 2005.7917\npercollege: 13.257682\nstate: IN\",\"popdensity: 5051.6875\npercollege: 20.229814\nstate: IN\",\"popdensity: 1540.3044\npercollege: 16.973139\nstate: IN\",\"popdensity: 1257.6667\npercollege: 13.142313\nstate: IN\",\"popdensity: 734.1176\npercollege: 14.855846\nstate: IN\",\"popdensity: 977.8182\npercollege: 12.771798\nstate: IN\",\"popdensity: 1418.9048\npercollege: 17.546090\nstate: IN\",\"popdensity: 1126.7143\npercollege: 10.145898\nstate: IN\",\"popdensity: 4894.9444\npercollege: 22.308069\nstate: IN\",\"popdensity: 1286.5807\npercollege: 19.975748\nstate: IN\",\"popdensity: 2040.4375\npercollege: 19.262915\nstate: IN\",\"popdensity: 1339.8636\npercollege: 11.111801\nstate: IN\",\"popdensity: 15853.1333\npercollege: 17.668614\nstate: IN\",\"popdensity: 2974.0556\npercollege: 17.179253\nstate: IN\",\"popdensity: 1586.5185\npercollege: 13.147652\nstate: IN\",\"popdensity: 5025.7308\npercollege: 16.401998\nstate: IN\",\"popdensity: 34659.0870\npercollege: 26.744689\nstate: IN\",\"popdensity: 1622.3846\npercollege: 17.777526\nstate: IN\",\"popdensity: 493.7619\npercollege: 13.539623\nstate: IN\",\"popdensity: 1537.3750\npercollege: 14.407570\nstate: IN\",\"popdensity: 4540.7500\npercollege: 37.742295\nstate: IN\",\"popdensity: 1147.8667\npercollege: 16.925228\nstate: IN\",\"popdensity: 2330.0000\npercollege: 14.679814\nstate: IN\",\"popdensity: 564.6250\npercollege: 12.174624\nstate: IN\",\"popdensity: 1515.0800\npercollege: 12.638763\nstate: IN\",\"popdensity: 1063.0000\npercollege: 10.702922\nstate: IN\",\"popdensity: 800.3913\npercollege: 9.788271\nstate: IN\",\"popdensity: 751.3478\npercollege: 11.164918\nstate: IN\",\"popdensity: 570.7407\npercollege: 14.612900\nstate: IN\",\"popdensity: 868.5000\npercollege: 11.042295\nstate: IN\",\"popdensity: 625.4500\npercollege: 13.842852\nstate: IN\",\"popdensity: 4958.9231\npercollege: 24.455887\nstate: IN\",\"popdensity: 1038.7200\npercollege: 17.210683\nstate: IN\",\"popdensity: 486.2692\npercollege: 14.171056\nstate: IN\",\"popdensity: 1045.3448\npercollege: 15.734664\nstate: IN\",\"popdensity: 1044.1538\npercollege: 12.620097\nstate: IN\",\"popdensity: 984.6400\npercollege: 13.528146\nstate: IN\",\"popdensity: 788.2174\npercollege: 12.846370\nstate: IN\",\"popdensity: 8823.2857\npercollege: 24.611669\nstate: IN\",\"popdensity: 1908.2727\npercollege: 10.589586\nstate: IN\",\"popdensity: 1679.4583\npercollege: 14.700019\nstate: IN\",\"popdensity: 812.0833\npercollege: 14.133824\nstate: IN\",\"popdensity: 1197.2105\npercollege: 10.014025\nstate: IN\",\"popdensity: 1306.9524\npercollege: 18.608020\nstate: IN\",\"popdensity: 703.4444\npercollege: 15.481670\nstate: IN\",\"popdensity: 595.2308\npercollege: 9.471585\nstate: IN\",\"popdensity: 4353.2667\npercollege: 36.245445\nstate: IN\",\"popdensity: 1007.4375\npercollege: 15.421939\nstate: IN\",\"popdensity: 697.6000\npercollege: 12.644985\nstate: IN\",\"popdensity: 12696.7692\npercollege: 21.758517\nstate: IN\",\"popdensity: 1048.3125\npercollege: 12.272687\nstate: IN\",\"popdensity: 4421.1250\npercollege: 22.723012\nstate: IN\",\"popdensity: 1524.7391\npercollege: 16.080516\nstate: IN\",\"popdensity: 389.3333\npercollege: 13.399963\nstate: IN\",\"popdensity: 1953.0435\npercollege: 23.815567\nstate: IN\",\"popdensity: 790.5667\npercollege: 10.814597\nstate: IN\",\"popdensity: 2997.9583\npercollege: 15.589125\nstate: IN\",\"popdensity: 1235.6191\npercollege: 18.565504\nstate: IN\",\"popdensity: 775.5000\npercollege: 16.583835\nstate: IN\",\"popdensity: 1382.5500\npercollege: 15.809776\nstate: IN\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(163,165,0,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(163,165,0,1)\"}},\"hoveron\":\"points\",\"name\":\"IN\",\"legendgroup\":\"IN\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[247.439024,175.921569,1847.12245,900.147059,586.612903,711,147.296296,1472.26471,4297.03846,610,4890.24242,1431.10345,3237.66667,1649.23333,975.818182,445.791667,443.641026,733.882353,1702.44118,360.588235,547.536232,583.282609,2731.73529,927.407407,11634.027,706.322581,265.470588,2142.43333,1181.27273,1277.38235,590.766667,699.02,8291.52941,1677.17647,915.424242,188.214286,1606.58824,3482.69767,6770.0303,409,10012.62,85.05,245.228571,1967.57895,787,2127.34884,3401.32353,104.781818,180.915254,25621.4286,664.53125,644.427273,880.586207,1097.29412,389.375,2440.35484,368.090909,4048.48485,1263.30952,270.787879,5677.96429,749.058824,19701.6727,748.466667,583.78125,113.512821,592.529412,237.636364,579.258065,5689.93939,327.214286,581.647059,4415.54167,3640.175,2031.48276,713,110.693333,2250.64516,1156.20833,1893.51351,6900.90244,60333.9143,775.294118],\"y\":[14.1150923,16.2755866,18.0660208,18.9337962,19.039803,11.8278471,14.5760743,17.2519754,18.2258245,21.4208568,23.742011,16.066702,21.4885192,15.8443516,22.6527251,14.6477089,16.9397657,12.0419487,22.8647363,18.7787018,18.912404,20.4206544,26.9787819,26.8725681,20.1454244,11.4331387,21.1730815,30.9753249,16.4441292,16.4684698,24.7650877,14.3082727,36.7600619,15.116835,16.2342399,15.4575777,27.2497358,21.2057826,34.5571857,11.4555097,28.6383762,14.4522145,11.3134379,16.1542355,32.5963872,18.7880617,27.5866359,14.4056678,15.2878703,20.6866911,16.2528217,26.763554,18.5401286,25.0460405,15.084171,35.6088365,13.280021,17.4296096,14.160017,13.4575569,19.0433213,15.6946934,36.9635114,16.9024096,11.6568382,15.9567602,13.6658394,12.9210381,20.0211305,26.9656935,13.8933764,13.363353,19.7081294,17.641192,17.0117257,13.7970398,14.5667198,17.2912268,14.1243101,17.8047443,48.0785102,19.4104036,18.2322106],\"text\":[\"popdensity: 247.4390\npercollege: 14.115092\nstate: MI\",\"popdensity: 175.9216\npercollege: 16.275587\nstate: MI\",\"popdensity: 1847.1225\npercollege: 18.066021\nstate: MI\",\"popdensity: 900.1471\npercollege: 18.933796\nstate: MI\",\"popdensity: 586.6129\npercollege: 19.039803\nstate: MI\",\"popdensity: 711.0000\npercollege: 11.827847\nstate: MI\",\"popdensity: 147.2963\npercollege: 14.576074\nstate: MI\",\"popdensity: 1472.2647\npercollege: 17.251975\nstate: MI\",\"popdensity: 4297.0385\npercollege: 18.225825\nstate: MI\",\"popdensity: 610.0000\npercollege: 21.420857\nstate: MI\",\"popdensity: 4890.2424\npercollege: 23.742011\nstate: MI\",\"popdensity: 1431.1035\npercollege: 16.066702\nstate: MI\",\"popdensity: 3237.6667\npercollege: 21.488519\nstate: MI\",\"popdensity: 1649.2333\npercollege: 15.844352\nstate: MI\",\"popdensity: 975.8182\npercollege: 22.652725\nstate: MI\",\"popdensity: 445.7917\npercollege: 14.647709\nstate: MI\",\"popdensity: 443.6410\npercollege: 16.939766\nstate: MI\",\"popdensity: 733.8824\npercollege: 12.041949\nstate: MI\",\"popdensity: 1702.4412\npercollege: 22.864736\nstate: MI\",\"popdensity: 360.5882\npercollege: 18.778702\nstate: MI\",\"popdensity: 547.5362\npercollege: 18.912404\nstate: MI\",\"popdensity: 583.2826\npercollege: 20.420654\nstate: MI\",\"popdensity: 2731.7353\npercollege: 26.978782\nstate: MI\",\"popdensity: 927.4074\npercollege: 26.872568\nstate: MI\",\"popdensity: 11634.0270\npercollege: 20.145424\nstate: MI\",\"popdensity: 706.3226\npercollege: 11.433139\nstate: MI\",\"popdensity: 265.4706\npercollege: 21.173081\nstate: MI\",\"popdensity: 2142.4333\npercollege: 30.975325\nstate: MI\",\"popdensity: 1181.2727\npercollege: 16.444129\nstate: MI\",\"popdensity: 1277.3824\npercollege: 16.468470\nstate: MI\",\"popdensity: 590.7667\npercollege: 24.765088\nstate: MI\",\"popdensity: 699.0200\npercollege: 14.308273\nstate: MI\",\"popdensity: 8291.5294\npercollege: 36.760062\nstate: MI\",\"popdensity: 1677.1765\npercollege: 15.116835\nstate: MI\",\"popdensity: 915.4242\npercollege: 16.234240\nstate: MI\",\"popdensity: 188.2143\npercollege: 15.457578\nstate: MI\",\"popdensity: 1606.5882\npercollege: 27.249736\nstate: MI\",\"popdensity: 3482.6977\npercollege: 21.205783\nstate: MI\",\"popdensity: 6770.0303\npercollege: 34.557186\nstate: MI\",\"popdensity: 409.0000\npercollege: 11.455510\nstate: MI\",\"popdensity: 10012.6200\npercollege: 28.638376\nstate: MI\",\"popdensity: 85.0500\npercollege: 14.452215\nstate: MI\",\"popdensity: 245.2286\npercollege: 11.313438\nstate: MI\",\"popdensity: 1967.5790\npercollege: 16.154235\nstate: MI\",\"popdensity: 787.0000\npercollege: 32.596387\nstate: MI\",\"popdensity: 2127.3488\npercollege: 18.788062\nstate: MI\",\"popdensity: 3401.3235\npercollege: 27.586636\nstate: MI\",\"popdensity: 104.7818\npercollege: 14.405668\nstate: MI\",\"popdensity: 180.9153\npercollege: 15.287870\nstate: MI\",\"popdensity: 25621.4286\npercollege: 20.686691\nstate: MI\",\"popdensity: 664.5312\npercollege: 16.252822\nstate: MI\",\"popdensity: 644.4273\npercollege: 26.763554\nstate: MI\",\"popdensity: 880.5862\npercollege: 18.540129\nstate: MI\",\"popdensity: 1097.2941\npercollege: 25.046041\nstate: MI\",\"popdensity: 389.3750\npercollege: 15.084171\nstate: MI\",\"popdensity: 2440.3548\npercollege: 35.608837\nstate: MI\",\"popdensity: 368.0909\npercollege: 13.280021\nstate: MI\",\"popdensity: 4048.4848\npercollege: 17.429610\nstate: MI\",\"popdensity: 1263.3095\npercollege: 14.160017\nstate: MI\",\"popdensity: 270.7879\npercollege: 13.457557\nstate: MI\",\"popdensity: 5677.9643\npercollege: 19.043321\nstate: MI\",\"popdensity: 749.0588\npercollege: 15.694693\nstate: MI\",\"popdensity: 19701.6727\npercollege: 36.963511\nstate: MI\",\"popdensity: 748.4667\npercollege: 16.902410\nstate: MI\",\"popdensity: 583.7812\npercollege: 11.656838\nstate: MI\",\"popdensity: 113.5128\npercollege: 15.956760\nstate: MI\",\"popdensity: 592.5294\npercollege: 13.665839\nstate: MI\",\"popdensity: 237.6364\npercollege: 12.921038\nstate: MI\",\"popdensity: 579.2581\npercollege: 20.021131\nstate: MI\",\"popdensity: 5689.9394\npercollege: 26.965694\nstate: MI\",\"popdensity: 327.2143\npercollege: 13.893376\nstate: MI\",\"popdensity: 581.6471\npercollege: 13.363353\nstate: MI\",\"popdensity: 4415.5417\npercollege: 19.708129\nstate: MI\",\"popdensity: 3640.1750\npercollege: 17.641192\nstate: MI\",\"popdensity: 2031.4828\npercollege: 17.011726\nstate: MI\",\"popdensity: 713.0000\npercollege: 13.797040\nstate: MI\",\"popdensity: 110.6933\npercollege: 14.566720\nstate: MI\",\"popdensity: 2250.6452\npercollege: 17.291227\nstate: MI\",\"popdensity: 1156.2083\npercollege: 14.124310\nstate: MI\",\"popdensity: 1893.5135\npercollege: 17.804744\nstate: MI\",\"popdensity: 6900.9024\npercollege: 48.078510\nstate: MI\",\"popdensity: 60333.9143\npercollege: 19.410404\nstate: MI\",\"popdensity: 775.2941\npercollege: 18.232211\nstate: MI\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,191,125,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(0,191,125,1)\"}},\"hoveron\":\"points\",\"name\":\"MI\",\"legendgroup\":\"MI\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[724.885714,4573.125,1900.28,2434.65854,1984.96667,1857.70833,2292.70968,1248.78571,10409.9643,1105.04167,1385.34615,6147.83333,5776.42308,1475.625,3492.77419,1041.97059,2081.30435,54313.0769,1489.41667,1710.86957,2478.85185,5484.21429,3567.62069,1144.41667,28277.5588,1539.92,1190.53846,3380.375,5469.24,1219.5,34649.12,2114.06452,1111.10714,643.4,1164.32,1050.82353,1063.875,1313.96,1874.66667,1259.58333,3649.90909,1582.43333,16576.8462,2378.23077,3207.5,1567.03704,9349.17241,22017.1905,1323.85714,11033.5833,2678.08333,4894.16,919.48,1408.67857,3882.58333,596.038462,21252.1852,567.76,1156.20833,2001.65854,472.333333,2501.8125,819.52,1372.04348,1608.5,932.653846,4752.83333,1604.52,1166.17241,4349.55172,1690.97561,2581.79167,2295.05714,1810.09091,1796.6,10811.3235,21457.9167,6157.10811,2473.23529,1229.57692,1269.33333,462.416667,4952.56522,1638.26316,3074.57576,1478.24,3061.32432,927.25],\"y\":[8.74173036,17.3660604,17.2669455,13.2435395,29.1494085,16.1764706,14.1576729,11.4336901,24.2252343,11.323289,13.9121748,17.784992,19.6893454,15.7631208,13.0905778,11.6793426,14.258027,25.0853882,13.475094,18.1881619,31.5940573,18.7380268,21.0773874,11.8740898,32.204593,16.4765579,14.9341366,31.6279977,31.956732,13.5143719,29.7883109,24.4504965,16.0309861,10.5537945,15.2589751,12.3112711,12.85435,9.33070866,13.4497842,10.9845318,13.8431503,16.771139,23.6828055,12.2083684,18.1793685,13.3233757,18.8616572,23.5504285,13.3788082,18.1757973,15.0270375,23.7026065,11.677498,14.1000841,19.2777119,10.513927,26.5504804,11.3808463,12.1051405,15.3234543,8.84588804,19.338309,11.4884393,10.1076709,13.0943276,12.4445328,21.8818751,11.233264,15.7080088,16.7975615,14.1156575,16.2824097,13.7772608,15.6221022,17.3762105,18.9896041,24.7331393,15.5998451,13.0834179,16.9825108,15.1100169,7.91325578,24.4193518,19.0096756,18.4454309,14.4987147,29.0951102,13.7107444],\"text\":[\"popdensity: 724.8857\npercollege: 8.741730\nstate: OH\",\"popdensity: 4573.1250\npercollege: 17.366060\nstate: OH\",\"popdensity: 1900.2800\npercollege: 17.266945\nstate: OH\",\"popdensity: 2434.6585\npercollege: 13.243540\nstate: OH\",\"popdensity: 1984.9667\npercollege: 29.149408\nstate: OH\",\"popdensity: 1857.7083\npercollege: 16.176471\nstate: OH\",\"popdensity: 2292.7097\npercollege: 14.157673\nstate: OH\",\"popdensity: 1248.7857\npercollege: 11.433690\nstate: OH\",\"popdensity: 10409.9643\npercollege: 24.225234\nstate: OH\",\"popdensity: 1105.0417\npercollege: 11.323289\nstate: OH\",\"popdensity: 1385.3462\npercollege: 13.912175\nstate: OH\",\"popdensity: 6147.8333\npercollege: 17.784992\nstate: OH\",\"popdensity: 5776.4231\npercollege: 19.689345\nstate: OH\",\"popdensity: 1475.6250\npercollege: 15.763121\nstate: OH\",\"popdensity: 3492.7742\npercollege: 13.090578\nstate: OH\",\"popdensity: 1041.9706\npercollege: 11.679343\nstate: OH\",\"popdensity: 2081.3043\npercollege: 14.258027\nstate: OH\",\"popdensity: 54313.0769\npercollege: 25.085388\nstate: OH\",\"popdensity: 1489.4167\npercollege: 13.475094\nstate: OH\",\"popdensity: 1710.8696\npercollege: 18.188162\nstate: OH\",\"popdensity: 2478.8519\npercollege: 31.594057\nstate: OH\",\"popdensity: 5484.2143\npercollege: 18.738027\nstate: OH\",\"popdensity: 3567.6207\npercollege: 21.077387\nstate: OH\",\"popdensity: 1144.4167\npercollege: 11.874090\nstate: OH\",\"popdensity: 28277.5588\npercollege: 32.204593\nstate: OH\",\"popdensity: 1539.9200\npercollege: 16.476558\nstate: OH\",\"popdensity: 1190.5385\npercollege: 14.934137\nstate: OH\",\"popdensity: 3380.3750\npercollege: 31.627998\nstate: OH\",\"popdensity: 5469.2400\npercollege: 31.956732\nstate: OH\",\"popdensity: 1219.5000\npercollege: 13.514372\nstate: OH\",\"popdensity: 34649.1200\npercollege: 29.788311\nstate: OH\",\"popdensity: 2114.0645\npercollege: 24.450496\nstate: OH\",\"popdensity: 1111.1071\npercollege: 16.030986\nstate: OH\",\"popdensity: 643.4000\npercollege: 10.553795\nstate: OH\",\"popdensity: 1164.3200\npercollege: 15.258975\nstate: OH\",\"popdensity: 1050.8235\npercollege: 12.311271\nstate: OH\",\"popdensity: 1063.8750\npercollege: 12.854350\nstate: OH\",\"popdensity: 1313.9600\npercollege: 9.330709\nstate: OH\",\"popdensity: 1874.6667\npercollege: 13.449784\nstate: OH\",\"popdensity: 1259.5833\npercollege: 10.984532\nstate: OH\",\"popdensity: 3649.9091\npercollege: 13.843150\nstate: OH\",\"popdensity: 1582.4333\npercollege: 16.771139\nstate: OH\",\"popdensity: 16576.8462\npercollege: 23.682806\nstate: OH\",\"popdensity: 2378.2308\npercollege: 12.208368\nstate: OH\",\"popdensity: 3207.5000\npercollege: 18.179368\nstate: OH\",\"popdensity: 1567.0370\npercollege: 13.323376\nstate: OH\",\"popdensity: 9349.1724\npercollege: 18.861657\nstate: OH\",\"popdensity: 22017.1905\npercollege: 23.550428\nstate: OH\",\"popdensity: 1323.8571\npercollege: 13.378808\nstate: OH\",\"popdensity: 11033.5833\npercollege: 18.175797\nstate: OH\",\"popdensity: 2678.0833\npercollege: 15.027038\nstate: OH\",\"popdensity: 4894.1600\npercollege: 23.702607\nstate: OH\",\"popdensity: 919.4800\npercollege: 11.677498\nstate: OH\",\"popdensity: 1408.6786\npercollege: 14.100084\nstate: OH\",\"popdensity: 3882.5833\npercollege: 19.277712\nstate: OH\",\"popdensity: 596.0385\npercollege: 10.513927\nstate: OH\",\"popdensity: 21252.1852\npercollege: 26.550480\nstate: OH\",\"popdensity: 567.7600\npercollege: 11.380846\nstate: OH\",\"popdensity: 1156.2083\npercollege: 12.105140\nstate: OH\",\"popdensity: 2001.6585\npercollege: 15.323454\nstate: OH\",\"popdensity: 472.3333\npercollege: 8.845888\nstate: OH\",\"popdensity: 2501.8125\npercollege: 19.338309\nstate: OH\",\"popdensity: 819.5200\npercollege: 11.488439\nstate: OH\",\"popdensity: 1372.0435\npercollege: 10.107671\nstate: OH\",\"popdensity: 1608.5000\npercollege: 13.094328\nstate: OH\",\"popdensity: 932.6538\npercollege: 12.444533\nstate: OH\",\"popdensity: 4752.8333\npercollege: 21.881875\nstate: OH\",\"popdensity: 1604.5200\npercollege: 11.233264\nstate: OH\",\"popdensity: 1166.1724\npercollege: 15.708009\nstate: OH\",\"popdensity: 4349.5517\npercollege: 16.797562\nstate: OH\",\"popdensity: 1690.9756\npercollege: 14.115657\nstate: OH\",\"popdensity: 2581.7917\npercollege: 16.282410\nstate: OH\",\"popdensity: 2295.0571\npercollege: 13.777261\nstate: OH\",\"popdensity: 1810.0909\npercollege: 15.622102\nstate: OH\",\"popdensity: 1796.6000\npercollege: 17.376210\nstate: OH\",\"popdensity: 10811.3235\npercollege: 18.989604\nstate: OH\",\"popdensity: 21457.9167\npercollege: 24.733139\nstate: OH\",\"popdensity: 6157.1081\npercollege: 15.599845\nstate: OH\",\"popdensity: 2473.2353\npercollege: 13.083418\nstate: OH\",\"popdensity: 1229.5769\npercollege: 16.982511\nstate: OH\",\"popdensity: 1269.3333\npercollege: 15.110017\nstate: OH\",\"popdensity: 462.4167\npercollege: 7.913256\nstate: OH\",\"popdensity: 4952.5652\npercollege: 24.419352\nstate: OH\",\"popdensity: 1638.2632\npercollege: 19.009676\nstate: OH\",\"popdensity: 3074.5758\npercollege: 18.445431\nstate: OH\",\"popdensity: 1478.2400\npercollege: 14.498715\nstate: OH\",\"popdensity: 3061.3243\npercollege: 29.095110\nstate: OH\",\"popdensity: 927.2500\npercollege: 13.710744\nstate: OH\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,176,246,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(0,176,246,1)\"}},\"hoveron\":\"points\",\"name\":\"OH\",\"legendgroup\":\"OH\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[382.487805,301.981481,768.867925,157.393258,6081.0625,339.6,246.867925,1490.91304,831.111111,439.541667,980.173913,455.428571,5028.56164,1417.75926,917.5,535.358974,690.557692,2241.65789,153,2047.34091,146.266667,713.971014,892.323529,847.772727,438.043478,130.914894,276.466667,1936.65714,460.638298,8011.3125,943.9,3496.57143,434.486486,375.096154,509.301887,2233.91667,1227.65957,494.487805,456.333333,185.238095,63951.6667,678.388889,503.766667,446.183099,3797.56757,4855.4,507.642857,963.676471,632.236364,1279.27083,208,8751.7,515.323529,3321.66667,274.163636,1142.06818,939.5,179.506329,688.092593,3246.15625,331.596491,587.511628,533.6875,295.116667,2343.75,275.44,3813.12,8962.20588,1024.53333,523.918919,4009.14286,1533.4375],\"y\":[12.4274917,18.3200156,19.425147,25.8228923,26.2931785,17.9412424,13.6760641,19.7803247,18.1533363,13.84631,20.852313,16.599469,43.6264509,15.9254638,22.4883413,20.9940872,26.2870159,29.8544673,15.6035329,20.8318653,13.5699001,21.6803841,19.8751776,17.3050671,20.483251,18.7317293,15.3240741,22.1656323,14.3912738,20.3282422,14.3909586,30.4885126,16.4620371,13.6317946,17.4417943,19.0711481,21.877375,15.4275441,14.0016473,7.33610822,25.3558337,17.3724213,13.4311741,21.9338239,24.8578251,37.4197798,15.7492355,24.464372,18.5920497,24.6343275,15.527175,22.9065131,17.4993368,19.9064402,16.7559769,28.5880867,19.833921,17.9479167,14.8077953,20.8371926,15.0650908,17.5516579,18.9421311,19.2118611,23.1569039,19.0168872,23.3909001,35.3967841,16.5498688,15.064584,24.9955036,21.6663817],\"text\":[\"popdensity: 382.4878\npercollege: 12.427492\nstate: WI\",\"popdensity: 301.9815\npercollege: 18.320016\nstate: WI\",\"popdensity: 768.8679\npercollege: 19.425147\nstate: WI\",\"popdensity: 157.3933\npercollege: 25.822892\nstate: WI\",\"popdensity: 6081.0625\npercollege: 26.293178\nstate: WI\",\"popdensity: 339.6000\npercollege: 17.941242\nstate: WI\",\"popdensity: 246.8679\npercollege: 13.676064\nstate: WI\",\"popdensity: 1490.9130\npercollege: 19.780325\nstate: WI\",\"popdensity: 831.1111\npercollege: 18.153336\nstate: WI\",\"popdensity: 439.5417\npercollege: 13.846310\nstate: WI\",\"popdensity: 980.1739\npercollege: 20.852313\nstate: WI\",\"popdensity: 455.4286\npercollege: 16.599469\nstate: WI\",\"popdensity: 5028.5616\npercollege: 43.626451\nstate: WI\",\"popdensity: 1417.7593\npercollege: 15.925464\nstate: WI\",\"popdensity: 917.5000\npercollege: 22.488341\nstate: WI\",\"popdensity: 535.3590\npercollege: 20.994087\nstate: WI\",\"popdensity: 690.5577\npercollege: 26.287016\nstate: WI\",\"popdensity: 2241.6579\npercollege: 29.854467\nstate: WI\",\"popdensity: 153.0000\npercollege: 15.603533\nstate: WI\",\"popdensity: 2047.3409\npercollege: 20.831865\nstate: WI\",\"popdensity: 146.2667\npercollege: 13.569900\nstate: WI\",\"popdensity: 713.9710\npercollege: 21.680384\nstate: WI\",\"popdensity: 892.3235\npercollege: 19.875178\nstate: WI\",\"popdensity: 847.7727\npercollege: 17.305067\nstate: WI\",\"popdensity: 438.0435\npercollege: 20.483251\nstate: WI\",\"popdensity: 130.9149\npercollege: 18.731729\nstate: WI\",\"popdensity: 276.4667\npercollege: 15.324074\nstate: WI\",\"popdensity: 1936.6571\npercollege: 22.165632\nstate: WI\",\"popdensity: 460.6383\npercollege: 14.391274\nstate: WI\",\"popdensity: 8011.3125\npercollege: 20.328242\nstate: WI\",\"popdensity: 943.9000\npercollege: 14.390959\nstate: WI\",\"popdensity: 3496.5714\npercollege: 30.488513\nstate: WI\",\"popdensity: 434.4865\npercollege: 16.462037\nstate: WI\",\"popdensity: 375.0962\npercollege: 13.631795\nstate: WI\",\"popdensity: 509.3019\npercollege: 17.441794\nstate: WI\",\"popdensity: 2233.9167\npercollege: 19.071148\nstate: WI\",\"popdensity: 1227.6596\npercollege: 21.877375\nstate: WI\",\"popdensity: 494.4878\npercollege: 15.427544\nstate: WI\",\"popdensity: 456.3333\npercollege: 14.001647\nstate: WI\",\"popdensity: 185.2381\npercollege: 7.336108\nstate: WI\",\"popdensity: 63951.6667\npercollege: 25.355834\nstate: WI\",\"popdensity: 678.3889\npercollege: 17.372421\nstate: WI\",\"popdensity: 503.7667\npercollege: 13.431174\nstate: WI\",\"popdensity: 446.1831\npercollege: 21.933824\nstate: WI\",\"popdensity: 3797.5676\npercollege: 24.857825\nstate: WI\",\"popdensity: 4855.4000\npercollege: 37.419780\nstate: WI\",\"popdensity: 507.6429\npercollege: 15.749235\nstate: WI\",\"popdensity: 963.6765\npercollege: 24.464372\nstate: WI\",\"popdensity: 632.2364\npercollege: 18.592050\nstate: WI\",\"popdensity: 1279.2708\npercollege: 24.634328\nstate: WI\",\"popdensity: 208.0000\npercollege: 15.527175\nstate: WI\",\"popdensity: 8751.7000\npercollege: 22.906513\nstate: WI\",\"popdensity: 515.3235\npercollege: 17.499337\nstate: WI\",\"popdensity: 3321.6667\npercollege: 19.906440\nstate: WI\",\"popdensity: 274.1636\npercollege: 16.755977\nstate: WI\",\"popdensity: 1142.0682\npercollege: 28.588087\nstate: WI\",\"popdensity: 939.5000\npercollege: 19.833921\nstate: WI\",\"popdensity: 179.5063\npercollege: 17.947917\nstate: WI\",\"popdensity: 688.0926\npercollege: 14.807795\nstate: WI\",\"popdensity: 3246.1562\npercollege: 20.837193\nstate: WI\",\"popdensity: 331.5965\npercollege: 15.065091\nstate: WI\",\"popdensity: 587.5116\npercollege: 17.551658\nstate: WI\",\"popdensity: 533.6875\npercollege: 18.942131\nstate: WI\",\"popdensity: 295.1167\npercollege: 19.211861\nstate: WI\",\"popdensity: 2343.7500\npercollege: 23.156904\nstate: WI\",\"popdensity: 275.4400\npercollege: 19.016887\nstate: WI\",\"popdensity: 3813.1200\npercollege: 23.390900\nstate: WI\",\"popdensity: 8962.2059\npercollege: 35.396784\nstate: WI\",\"popdensity: 1024.5333\npercollege: 16.549869\nstate: WI\",\"popdensity: 523.9189\npercollege: 15.064584\nstate: WI\",\"popdensity: 4009.1429\npercollege: 24.995504\nstate: WI\",\"popdensity: 1533.4375\npercollege: 21.666382\nstate: WI\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(231,107,243,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(231,107,243,1)\"}},\"hoveron\":\"points\",\"name\":\"WI\",\"legendgroup\":\"WI\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.958904109589,\"r\":7.30593607305936,\"b\":40.9132420091324,\"l\":37.2602739726027},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-4311.61733,92415.06393],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20000\",\"40000\",\"60000\",\"80000\"],\"tickvals\":[0,20000,40000,60000,80000],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20000\",\"40000\",\"60000\",\"80000\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Population Density\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[5.298988121,50.115630299],\"tickmode\":\"array\",\"ticktext\":[\"10\",\"20\",\"30\",\"40\",\"50\"],\"tickvals\":[10,20,30,40,50],\"categoryorder\":\"array\",\"categoryarray\":[\"10\",\"20\",\"30\",\"40\",\"50\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Percent College Graduates\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":true,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"title\":{\"text\":\"State\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1c7a4142a6e3\":{\"x\":{},\"y\":{},\"colour\":{},\"type\":\"scatter\"}},\"cur_data\":\"1c7a4142a6e3\",\"visdat\":{\"1c7a4142a6e3\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}   Your Turn Using the starwars data, create a static ggplot and use the ggplotly function to turn it interactive.    Creating plotly figures manually Using the ggplotly() function is a great way to create interactive graphics using what you already know about creating static figures with ggplot2. However, there may be instances where the ggplotly() function does not work or that there are additional features that you want to take advantage of. In these cases, knowing a bit about creating interactive graphics from the ground up using plotly is helpful.\nWe will read in some data about the lord of the rings that comes from Jenny Bryan: https://github.com/jennybc/lotr. These data can be read directly from GitHub with the following command. As you can see from the data, the data contains a row for each film, chapter, and character from the lord of the rings about the number of words that character spoke in each chapter of each of the three films.\nlotr \u0026lt;- read_tsv(\u0026#39;https://raw.githubusercontent.com/jennybc/lotr/master/lotr_clean.tsv\u0026#39;) ## Rows: 682 Columns: 5 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;\\t\u0026quot; ## chr (4): Film, Chapter, Character, Race ## dbl (1): Words ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. lotr ## # A tibble: 682 × 5 ## Film Chapter Character Race Words ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 The Fellowship Of The Ring 01: Prologue Bilbo Hobbit 4 ## 2 The Fellowship Of The Ring 01: Prologue Elrond Elf 5 ## 3 The Fellowship Of The Ring 01: Prologue Galadriel Elf 460 ## 4 The Fellowship Of The Ring 02: Concerning Hobbits Bilbo Hobbit 214 ## 5 The Fellowship Of The Ring 03: The Shire Bilbo Hobbit 70 ## 6 The Fellowship Of The Ring 03: The Shire Frodo Hobbit 128 ## 7 The Fellowship Of The Ring 03: The Shire Gandalf Wizard 197 ## 8 The Fellowship Of The Ring 03: The Shire Hobbit Kids Hobbit 10 ## 9 The Fellowship Of The Ring 03: The Shire Hobbits Hobbit 12 ## 10 The Fellowship Of The Ring 04: Very Old Friends Bilbo Hobbit 339 ## # … with 672 more rows Let’s now build a histogram from the ground up using plotly. The primary function to define the figure attributes is plot_ly(). This function behaves similarly to the ggplot() function from the ggplot2 package. The primary arguments are the data to be used for plotting and the aesthetic attributes. As we are creating a histrogram, only the x aesthetic needs to be defined. One difference between plotly and ggplot2 is that the aesthetics passed to the plot_ly() function need to have a ~ before the variable name. Notice here that the x aesthetic is defined as ~Words meaning that we want the Words variable to be placed on the x-axis. After specifying the data and aesthetics, we need to tell plotly what type of figure we’d like. In this example, the add_histogram() function is used with no arguments to create a histrogram.\nplot_ly(lotr, x = ~Words) %\u0026gt;% add_histogram()  {\"x\":{\"visdat\":{\"1c7a5f2f8750\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a5f2f8750\",\"attrs\":{\"1c7a5f2f8750\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"histogram\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Words\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[4,5,460,214,70,128,197,10,12,339,64,8,326,32,12,8,1,19,2,15,1,7,182,148,6,33,60,107,12,17,21,53,53,61,3,10,17,55,28,139,541,3,84,43,40,85,274,21,37,58,32,48,20,43,14,9,76,68,38,76,13,6,39,30,19,96,29,28,25,17,33,12,9,20,22,7,53,16,13,12,24,5,48,131,5,9,34,7,36,5,107,104,63,33,260,102,1,25,47,39,24,57,40,220,167,24,85,38,34,4,24,18,8,12,11,65,105,3,48,7,7,12,15,68,47,3,17,10,3,30,61,6,18,19,8,68,31,31,30,202,52,7,9,11,7,39,349,6,8,10,7,22,5,8,89,37,8,13,45,17,4,83,7,4,26,27,19,84,51,7,2,16,149,61,135,19,41,6,49,36,214,1,83,13,99,166,81,20,5,1,13,64,103,16,37,79,202,54,48,31,2,3,2,2,6,6,18,17,2,72,72,102,59,34,12,15,50,2,9,39,5,46,97,123,181,10,2,19,26,51,59,35,25,2,24,37,29,187,11,13,10,88,8,81,3,6,13,44,10,68,20,14,33,13,68,156,24,7,33,16,3,18,28,36,54,69,68,298,73,63,4,7,226,39,68,63,122,18,28,151,15,166,21,56,24,28,55,59,24,3,165,21,29,49,22,36,13,51,68,18,31,45,52,4,81,87,76,39,91,3,68,33,76,6,59,97,119,55,11,9,10,5,45,3,5,10,50,22,1,14,4,2,15,22,49,66,8,9,50,8,14,188,190,143,75,63,8,132,6,250,35,92,89,16,64,69,9,51,5,2,206,6,78,65,13,36,12,30,64,18,7,34,14,37,23,24,17,4,18,1,50,37,1,7,30,5,12,6,17,58,29,31,6,34,1,22,58,6,46,1,23,6,5,8,31,15,20,53,73,6,20,21,5,7,63,3,1,16,12,22,186,4,10,35,7,77,56,95,18,54,30,36,69,11,12,13,18,77,1,22,36,51,3,111,23,2,301,98,20,4,8,15,40,21,78,73,1,52,46,65,13,50,20,255,22,135,104,22,36,7,100,30,151,202,36,268,22,30,56,163,2,75,8,20,5,4,61,30,3,18,7,6,28,5,10,18,21,36,4,15,19,16,3,73,1,66,34,17,13,13,8,15,114,72,8,9,9,4,80,66,89,53,32,43,184,20,31,29,5,59,26,89,56,12,9,21,12,30,24,54,15,168,7,4,42,32,18,20,9,20,16,10,60,6,45,123,8,3,21,63,75,43,32,40,81,19,46,7,25,15,21,7,14,6,60,51,1,22,10,83,13,5,68,21,15,48,55,36,10,17,48,7,9,13,2,17,15,2,71,42,9,2,9,8,3,26,54,17,8,5,12,19,4,1,1,6,6,5,8,38,9,15,3,1,11,16,64,23,96,35,82,8,59,24,2,17,17,17,16,104,46,30,56,23,32,5,1,87,5,103,16,8,16,44,85,2,2,9,10,6,7,38,2,1,37,31,4,1,1,45,11,98,4,2,2,27,56,6,132,17,42,14],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} You’ll notice you get the same elements as the figures created with ggplotly() like zoom, pan, data specifics on hover, etc.\nGrouped bar plot Building off the histogram example above, let’s create a bar chart. In the plotly syntax, the add_histogram() function is used for true histograms and for bar charts. Very confusing! The primary difference is that bar charts are created when a categorical variable is placed on the x-axis. In the example below, the character race is placed on the x-axis. In addition, the Film is specified with different colors, this allows the creation of bars for each unique Film and by default are placed as dodged bar charts.\nplot_ly(lotr, x = ~Race, color = ~Film) %\u0026gt;% add_histogram()  {\"x\":{\"visdat\":{\"1c7a9cbc285\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a9cbc285\",\"attrs\":{\"1c7a9cbc285\":{\"x\":{},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"histogram\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Race\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Orc\",\"Wizard\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"Hobbit\",\"Elf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Hobbit\",\"Orc\",\"Wizard\",\"Wizard\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Man\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Elf\",\"Hobbit\",\"Elf\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Wizard\",\"Elf\",\"Wizard\",\"Man\",\"Man\",\"Elf\",\"Man\",\"Man\",\"Elf\",\"Man\",\"Man\",\"Elf\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Elf\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Man\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Elf\",\"Hobbit\",\"Wizard\",\"Man\",\"Man\",\"Wizard\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Elf\",\"Wizard\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Elf\",\"Dwarf\",\"Elf\",\"Elf\",\"Hobbit\",\"Man\",\"Man\",\"Elf\",\"Elf\",\"Elf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Elf\",\"Orc\",\"Wizard\",\"Man\",\"Elf\",\"Elf\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Wizard\",\"Man\",\"Man\",\"Elf\",\"Orc\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Elf\",\"Hobbit\"],\"type\":\"histogram\",\"name\":\"The Fellowship Of The Ring\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Dwarf\",\"Hobbit\",\"Hobbit\",\"Man\",\"Wizard\",\"Dwarf\",\"Man\",\"Wizard\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Man\",\"Elf\",\"Elf\",\"Elf\",\"Elf\",\"Man\",\"Wizard\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Man\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Man\",\"Man\",\"Man\",\"Orc\",\"Man\",\"Wizard\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Man\",\"Orc\",\"Man\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Man\",\"Orc\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Wizard\",\"Orc\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Man\",\"Elf\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Elf\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Wizard\",\"Man\",\"Orc\",\"Man\",\"Orc\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Man\",\"Hobbit\",\"Elf\",\"Hobbit\",\"Man\",\"Man\",\"Hobbit\",\"Man\",\"Wizard\",\"Man\",\"Wizard\",\"Orc\",\"Hobbit\",\"Orc\",\"Man\",\"Man\",\"Hobbit\",\"Wizard\",\"Man\",\"Orc\",\"Hobbit\",\"Man\",\"Man\",\"Orc\",\"Hobbit\",\"Man\",\"Man\",\"Wizard\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Orc\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Orc\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Orc\",\"Hobbit\",\"Orc\",\"Man\",\"Man\",\"Wizard\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Hobbit\",\"Orc\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Wizard\",\"Dwarf\",\"Hobbit\",\"Orc\",\"Hobbit\",\"Man\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Dwarf\",\"Hobbit\",\"Man\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Elf\",\"Hobbit\",\"Elf\",\"Wizard\",\"Hobbit\"],\"type\":\"histogram\",\"name\":\"The Return Of The King\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Man\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Orc\",\"Orc\",\"Hobbit\",\"Hobbit\",\"Orc\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Orc\",\"Wizard\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Orc\",\"Elf\",\"Hobbit\",\"Orc\",\"Hobbit\",\"Orc\",\"Orc\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Dwarf\",\"Hobbit\",\"Orc\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Wizard\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Wizard\",\"Dwarf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Dwarf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Man\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Dwarf\",\"Man\",\"Man\",\"Dwarf\",\"Man\",\"Man\",\"Elf\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Man\",\"Elf\",\"Orc\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Elf\",\"Elf\",\"Elf\",\"Elf\",\"Man\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Man\",\"Man\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Elf\",\"Man\",\"Man\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Dwarf\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Man\",\"Wizard\",\"Dwarf\",\"Man\",\"Man\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Hobbit\",\"Man\",\"Man\",\"Dwarf\",\"Elf\",\"Hobbit\",\"Hobbit\",\"Man\",\"Hobbit\",\"Hobbit\",\"Hobbit\",\"Wizard\",\"Hobbit\",\"Hobbit\",\"Hobbit\"],\"type\":\"histogram\",\"name\":\"The Two Towers\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}  Bar plot of proportions As we discussed when talking about static visualizations, dodged bar charts can be difficult to explore differences across the films due to differences in how popular each race is across the movies. In this case, normalizing the bar chart and stacking them based on the proportion each movie contains out of the total for each race. plotly does not do this by default, instead computations of these proportions need to be done first, then this summarized data can be plotted. Below is an example of doing this. First, the counts are calculated by race and film, then this is joined using another count just of race. This second count is how the standardization will be done. I encourage you to explore the lotr_prop data to understand what the data looks like.\nThese data are then passed to the plot_ly function after calculating the individual proportion of each race and film. To plot these bars, the add_bars() function is used to create the bars and finally, using the layout() function, the argument barmode = \"stack\" is used to create the final figure show. I encourage you to explore intermediate steps to understand what the output looks like in each step along the way.\n## number of diamonds by cut and clarity (n) lotr_count \u0026lt;- count(lotr, Race, Film) ## number of diamonds by cut (nn) lotr_prop \u0026lt;- left_join(lotr_count, count(lotr_count, Race, wt = n), by = \u0026#39;Race\u0026#39;) lotr_prop %\u0026gt;% mutate(prop = n.x / n.y) %\u0026gt;% plot_ly(x = ~Race, y = ~prop, color = ~Film, width = 900) %\u0026gt;% add_bars() %\u0026gt;% layout(barmode = \u0026quot;stack\u0026quot;)  {\"x\":{\"visdat\":{\"1c7a4f5c1eb1\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a4f5c1eb1\",\"attrs\":{\"1c7a4f5c1eb1\":{\"x\":{},\"y\":{},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\",\"inherit\":true}},\"layout\":{\"width\":900,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"barmode\":\"stack\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Race\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Orc\",\"Wizard\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"prop\"},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Orc\",\"Wizard\"],\"y\":[0.239130434782609,0.449275362318841,0.443965517241379,0.166666666666667,0.103448275862069,0.439393939393939],\"type\":\"bar\",\"name\":\"The Fellowship Of The Ring\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Orc\",\"Wizard\"],\"y\":[0.347826086956522,0.27536231884058,0.314655172413793,0.408333333333333,0.551724137931034,0.378787878787879],\"type\":\"bar\",\"name\":\"The Return Of The King\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Dwarf\",\"Elf\",\"Hobbit\",\"Man\",\"Orc\",\"Wizard\"],\"y\":[0.41304347826087,0.27536231884058,0.241379310344828,0.425,0.344827586206897,0.181818181818182],\"type\":\"bar\",\"name\":\"The Two Towers\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}   Your Turn Using the gss_cat data, create a histrogram for the tvhours variable. Using the gss_cat data, create a bar chart showing the partyid variable by the marital status.  Scatterplots by Hand Scatterplots are similar to the bar charts, the main difference is that variables are passed to both the x and y axes and the add_markers() function is used to create the scatterplot. Markers are plotly’s equivalent to points from ggplot2.\nplot_ly(midwest, x = ~popdensity, y = ~percollege) %\u0026gt;% add_markers()  {\"x\":{\"visdat\":{\"1c7a57135505\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a57135505\",\"attrs\":{\"1c7a57135505\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"mode\":\"markers\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"popdensity\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"percollege\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1270.96154,759,681.409091,1812.11765,324.222222,713.76,313.058824,622.407407,559.875,2983.18966,819.47619,530.7,516.428571,1170.48276,1721.46667,88018.3966,748.615385,533.5,2050.84211,718.086957,778.56,39083.3,544.305556,531.428571,1132.28571,474.840909,475.833333,1612.76,732.307692,363.631579,464.151515,1243.73077,339.96,454.744681,576.555556,352,1003.11765,459.507463,1696.30556,365.827586,1121.81818,893,623.457143,567.35,10947.2759,2468.07692,2189.61111,1342.69048,18443.5,1572.25,726,799.813953,633.887097,855.5,1036.58824,5090.02778,1899.70588,3348.74286,953.58,5538.62222,1187.45714,558.521739,493,1053.71429,620.222222,523.939394,974.869565,749.463415,1102.93939,663.333333,1021.26667,4811.23684,823.538462,621.92,358.714286,198.772727,683.909091,573,960.638889,752.045455,5311.53571,6571.3,1206.86364,3497.76471,288.384615,376.266667,505.931818,384.352941,1456.12121,3171.58974,734.125,1697.25,1092.58333,581.242424,453.484848,410.5,569.724138,1467.95122,7146.26,2309.32,8430.43333,1020.40625,1480.71429,7337.46341,2893.5,393.375,1406.7,1589.45833,741.052632,854.954545,1600.54167,3989.86364,1176.42857,1346.69565,550.777778,1058.96154,2043.94737,1074.77273,1605.63636,5202.56522,1408.30769,5785.11111,2167.91667,7156,712.32,851.304348,897.142857,1100.44828,3090.375,921.515152,4539,2678.05882,1067.5,3154.875,2005.79167,5051.6875,1540.30435,1257.66667,734.117647,977.818182,1418.90476,1126.71429,4894.94444,1286.58065,2040.4375,1339.86364,15853.1333,2974.05556,1586.51852,5025.73077,34659.087,1622.38462,493.761905,1537.375,4540.75,1147.86667,2330,564.625,1515.08,1063,800.391304,751.347826,570.740741,868.5,625.45,4958.92308,1038.72,486.269231,1045.34483,1044.15385,984.64,788.217391,8823.28571,1908.27273,1679.45833,812.083333,1197.21053,1306.95238,703.444444,595.230769,4353.26667,1007.4375,697.6,12696.7692,1048.3125,4421.125,1524.73913,389.333333,1953.04348,790.566667,2997.95833,1235.61905,775.5,1382.55,247.439024,175.921569,1847.12245,900.147059,586.612903,711,147.296296,1472.26471,4297.03846,610,4890.24242,1431.10345,3237.66667,1649.23333,975.818182,445.791667,443.641026,733.882353,1702.44118,360.588235,547.536232,583.282609,2731.73529,927.407407,11634.027,706.322581,265.470588,2142.43333,1181.27273,1277.38235,590.766667,699.02,8291.52941,1677.17647,915.424242,188.214286,1606.58824,3482.69767,6770.0303,409,10012.62,85.05,245.228571,1967.57895,787,2127.34884,3401.32353,104.781818,180.915254,25621.4286,664.53125,644.427273,880.586207,1097.29412,389.375,2440.35484,368.090909,4048.48485,1263.30952,270.787879,5677.96429,749.058824,19701.6727,748.466667,583.78125,113.512821,592.529412,237.636364,579.258065,5689.93939,327.214286,581.647059,4415.54167,3640.175,2031.48276,713,110.693333,2250.64516,1156.20833,1893.51351,6900.90244,60333.9143,775.294118,724.885714,4573.125,1900.28,2434.65854,1984.96667,1857.70833,2292.70968,1248.78571,10409.9643,1105.04167,1385.34615,6147.83333,5776.42308,1475.625,3492.77419,1041.97059,2081.30435,54313.0769,1489.41667,1710.86957,2478.85185,5484.21429,3567.62069,1144.41667,28277.5588,1539.92,1190.53846,3380.375,5469.24,1219.5,34649.12,2114.06452,1111.10714,643.4,1164.32,1050.82353,1063.875,1313.96,1874.66667,1259.58333,3649.90909,1582.43333,16576.8462,2378.23077,3207.5,1567.03704,9349.17241,22017.1905,1323.85714,11033.5833,2678.08333,4894.16,919.48,1408.67857,3882.58333,596.038462,21252.1852,567.76,1156.20833,2001.65854,472.333333,2501.8125,819.52,1372.04348,1608.5,932.653846,4752.83333,1604.52,1166.17241,4349.55172,1690.97561,2581.79167,2295.05714,1810.09091,1796.6,10811.3235,21457.9167,6157.10811,2473.23529,1229.57692,1269.33333,462.416667,4952.56522,1638.26316,3074.57576,1478.24,3061.32432,927.25,382.487805,301.981481,768.867925,157.393258,6081.0625,339.6,246.867925,1490.91304,831.111111,439.541667,980.173913,455.428571,5028.56164,1417.75926,917.5,535.358974,690.557692,2241.65789,153,2047.34091,146.266667,713.971014,892.323529,847.772727,438.043478,130.914894,276.466667,1936.65714,460.638298,8011.3125,943.9,3496.57143,434.486486,375.096154,509.301887,2233.91667,1227.65957,494.487805,456.333333,185.238095,63951.6667,678.388889,503.766667,446.183099,3797.56757,4855.4,507.642857,963.676471,632.236364,1279.27083,208,8751.7,515.323529,3321.66667,274.163636,1142.06818,939.5,179.506329,688.092593,3246.15625,331.596491,587.511628,533.6875,295.116667,2343.75,275.44,3813.12,8962.20588,1024.53333,523.918919,4009.14286,1533.4375],\"y\":[19.6313918,11.2433076,17.0338194,17.2789539,14.475999,18.9046238,11.9173877,16.1971209,14.1076487,41.2958081,13.567226,15.1108627,13.6830103,15.3874693,25.1750412,28.0181167,16.9858076,14.5978891,32.835928,16.1959601,16.8685259,42.7688669,16.8399327,16.9356446,20.2751964,13.6029941,17.8273561,14.7056662,15.5321976,11.3675214,13.0495464,18.3778784,14.0467657,20.6605223,14.3184422,13.7735504,18.7236334,15.1666829,36.6436653,15.0256035,18.3698955,14.7583093,16.4133528,14.3524363,27.5938834,17.6409622,24.8893485,19.3436365,37.8340529,16.8995267,14.5388128,18.476678,14.5031437,17.9492226,27.9280239,28.0541488,33.8185507,19.8618556,14.0083929,19.6994744,16.4493851,17.5348837,13.5054525,14.034565,18.511502,16.4744211,19.9206186,11.723732,20.7244228,15.7185951,18.7793745,25.838414,13.5622441,22.011857,12.1742809,14.2502659,14.3687708,16.5212794,12.7412789,21.5077402,21.3007289,21.184251,15.4883463,28.9881549,14.6365422,13.0760986,15.9511699,16.8789809,19.8795753,20.0448263,17.8795898,17.0571729,24.7300469,20.4582651,15.9600242,15.6807027,15.9287398,16.5530497,24.7568609,21.0595616,22.652364,22.8052176,16.1156797,27.3597862,22.8468145,13.4643978,12.9819635,27.8306241,19.8002103,15.4562536,13.2149823,16.8123574,14.1137248,16.045283,8.54375099,13.2391267,15.5742757,13.9213675,15.581854,21.1970145,17.1676628,18.3723425,11.4249881,20.5498928,11.1452991,12.9935988,13.929867,15.50432,15.5381671,14.9522958,42.1311499,20.4899394,13.1074407,24.2200345,13.2576823,20.2298144,16.9731386,13.1423129,14.8558462,12.771798,17.5460903,10.1458975,22.308069,19.9757478,19.2629151,11.1118012,17.6686138,17.1792531,13.1476522,16.401998,26.7446886,17.7775263,13.5396226,14.4075703,37.7422954,16.9252277,14.6798142,12.1746236,12.6387629,10.7029216,9.78827088,11.1649179,14.6129001,11.0422948,13.842852,24.455887,17.2106825,14.1710559,15.734664,12.6200972,13.5281456,12.8463697,24.611669,10.5895865,14.7000195,14.1338236,10.0140252,18.6080204,15.4816696,9.47158524,36.2454446,15.4219389,12.6449852,21.7585174,12.2726866,22.7230118,16.0805162,13.399963,23.8155668,10.8145974,15.5891252,18.5655038,16.5838347,15.809776,14.1150923,16.2755866,18.0660208,18.9337962,19.039803,11.8278471,14.5760743,17.2519754,18.2258245,21.4208568,23.742011,16.066702,21.4885192,15.8443516,22.6527251,14.6477089,16.9397657,12.0419487,22.8647363,18.7787018,18.912404,20.4206544,26.9787819,26.8725681,20.1454244,11.4331387,21.1730815,30.9753249,16.4441292,16.4684698,24.7650877,14.3082727,36.7600619,15.116835,16.2342399,15.4575777,27.2497358,21.2057826,34.5571857,11.4555097,28.6383762,14.4522145,11.3134379,16.1542355,32.5963872,18.7880617,27.5866359,14.4056678,15.2878703,20.6866911,16.2528217,26.763554,18.5401286,25.0460405,15.084171,35.6088365,13.280021,17.4296096,14.160017,13.4575569,19.0433213,15.6946934,36.9635114,16.9024096,11.6568382,15.9567602,13.6658394,12.9210381,20.0211305,26.9656935,13.8933764,13.363353,19.7081294,17.641192,17.0117257,13.7970398,14.5667198,17.2912268,14.1243101,17.8047443,48.0785102,19.4104036,18.2322106,8.74173036,17.3660604,17.2669455,13.2435395,29.1494085,16.1764706,14.1576729,11.4336901,24.2252343,11.323289,13.9121748,17.784992,19.6893454,15.7631208,13.0905778,11.6793426,14.258027,25.0853882,13.475094,18.1881619,31.5940573,18.7380268,21.0773874,11.8740898,32.204593,16.4765579,14.9341366,31.6279977,31.956732,13.5143719,29.7883109,24.4504965,16.0309861,10.5537945,15.2589751,12.3112711,12.85435,9.33070866,13.4497842,10.9845318,13.8431503,16.771139,23.6828055,12.2083684,18.1793685,13.3233757,18.8616572,23.5504285,13.3788082,18.1757973,15.0270375,23.7026065,11.677498,14.1000841,19.2777119,10.513927,26.5504804,11.3808463,12.1051405,15.3234543,8.84588804,19.338309,11.4884393,10.1076709,13.0943276,12.4445328,21.8818751,11.233264,15.7080088,16.7975615,14.1156575,16.2824097,13.7772608,15.6221022,17.3762105,18.9896041,24.7331393,15.5998451,13.0834179,16.9825108,15.1100169,7.91325578,24.4193518,19.0096756,18.4454309,14.4987147,29.0951102,13.7107444,12.4274917,18.3200156,19.425147,25.8228923,26.2931785,17.9412424,13.6760641,19.7803247,18.1533363,13.84631,20.852313,16.599469,43.6264509,15.9254638,22.4883413,20.9940872,26.2870159,29.8544673,15.6035329,20.8318653,13.5699001,21.6803841,19.8751776,17.3050671,20.483251,18.7317293,15.3240741,22.1656323,14.3912738,20.3282422,14.3909586,30.4885126,16.4620371,13.6317946,17.4417943,19.0711481,21.877375,15.4275441,14.0016473,7.33610822,25.3558337,17.3724213,13.4311741,21.9338239,24.8578251,37.4197798,15.7492355,24.464372,18.5920497,24.6343275,15.527175,22.9065131,17.4993368,19.9064402,16.7559769,28.5880867,19.833921,17.9479167,14.8077953,20.8371926,15.0650908,17.5516579,18.9421311,19.2118611,23.1569039,19.0168872,23.3909001,35.3967841,16.5498688,15.064584,24.9955036,21.6663817],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} Change symbols Changing symbols (i.e. shape of points in ggplot2 language) can be done by passing a character variable to the symbol argument/aesthetic within the add_markers() function. The symbol argument/aesthetic should also be able to be specified in the plot_ly() function globally instead of in the add_markers() function.\nplot_ly(midwest, x = ~popdensity, y = ~percollege) %\u0026gt;% add_markers(symbol = ~state)  {\"x\":{\"visdat\":{\"1c7a481852c0\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a481852c0\",\"attrs\":{\"1c7a481852c0\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"mode\":\"markers\",\"symbol\":{},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"popdensity\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"percollege\"},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1270.96154,759,681.409091,1812.11765,324.222222,713.76,313.058824,622.407407,559.875,2983.18966,819.47619,530.7,516.428571,1170.48276,1721.46667,88018.3966,748.615385,533.5,2050.84211,718.086957,778.56,39083.3,544.305556,531.428571,1132.28571,474.840909,475.833333,1612.76,732.307692,363.631579,464.151515,1243.73077,339.96,454.744681,576.555556,352,1003.11765,459.507463,1696.30556,365.827586,1121.81818,893,623.457143,567.35,10947.2759,2468.07692,2189.61111,1342.69048,18443.5,1572.25,726,799.813953,633.887097,855.5,1036.58824,5090.02778,1899.70588,3348.74286,953.58,5538.62222,1187.45714,558.521739,493,1053.71429,620.222222,523.939394,974.869565,749.463415,1102.93939,663.333333,1021.26667,4811.23684,823.538462,621.92,358.714286,198.772727,683.909091,573,960.638889,752.045455,5311.53571,6571.3,1206.86364,3497.76471,288.384615,376.266667,505.931818,384.352941,1456.12121,3171.58974,734.125,1697.25,1092.58333,581.242424,453.484848,410.5,569.724138,1467.95122,7146.26,2309.32,8430.43333,1020.40625],\"y\":[19.6313918,11.2433076,17.0338194,17.2789539,14.475999,18.9046238,11.9173877,16.1971209,14.1076487,41.2958081,13.567226,15.1108627,13.6830103,15.3874693,25.1750412,28.0181167,16.9858076,14.5978891,32.835928,16.1959601,16.8685259,42.7688669,16.8399327,16.9356446,20.2751964,13.6029941,17.8273561,14.7056662,15.5321976,11.3675214,13.0495464,18.3778784,14.0467657,20.6605223,14.3184422,13.7735504,18.7236334,15.1666829,36.6436653,15.0256035,18.3698955,14.7583093,16.4133528,14.3524363,27.5938834,17.6409622,24.8893485,19.3436365,37.8340529,16.8995267,14.5388128,18.476678,14.5031437,17.9492226,27.9280239,28.0541488,33.8185507,19.8618556,14.0083929,19.6994744,16.4493851,17.5348837,13.5054525,14.034565,18.511502,16.4744211,19.9206186,11.723732,20.7244228,15.7185951,18.7793745,25.838414,13.5622441,22.011857,12.1742809,14.2502659,14.3687708,16.5212794,12.7412789,21.5077402,21.3007289,21.184251,15.4883463,28.9881549,14.6365422,13.0760986,15.9511699,16.8789809,19.8795753,20.0448263,17.8795898,17.0571729,24.7300469,20.4582651,15.9600242,15.6807027,15.9287398,16.5530497,24.7568609,21.0595616,22.652364,22.8052176],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"IL\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"symbol\":\"circle\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1480.71429,7337.46341,2893.5,393.375,1406.7,1589.45833,741.052632,854.954545,1600.54167,3989.86364,1176.42857,1346.69565,550.777778,1058.96154,2043.94737,1074.77273,1605.63636,5202.56522,1408.30769,5785.11111,2167.91667,7156,712.32,851.304348,897.142857,1100.44828,3090.375,921.515152,4539,2678.05882,1067.5,3154.875,2005.79167,5051.6875,1540.30435,1257.66667,734.117647,977.818182,1418.90476,1126.71429,4894.94444,1286.58065,2040.4375,1339.86364,15853.1333,2974.05556,1586.51852,5025.73077,34659.087,1622.38462,493.761905,1537.375,4540.75,1147.86667,2330,564.625,1515.08,1063,800.391304,751.347826,570.740741,868.5,625.45,4958.92308,1038.72,486.269231,1045.34483,1044.15385,984.64,788.217391,8823.28571,1908.27273,1679.45833,812.083333,1197.21053,1306.95238,703.444444,595.230769,4353.26667,1007.4375,697.6,12696.7692,1048.3125,4421.125,1524.73913,389.333333,1953.04348,790.566667,2997.95833,1235.61905,775.5,1382.55],\"y\":[16.1156797,27.3597862,22.8468145,13.4643978,12.9819635,27.8306241,19.8002103,15.4562536,13.2149823,16.8123574,14.1137248,16.045283,8.54375099,13.2391267,15.5742757,13.9213675,15.581854,21.1970145,17.1676628,18.3723425,11.4249881,20.5498928,11.1452991,12.9935988,13.929867,15.50432,15.5381671,14.9522958,42.1311499,20.4899394,13.1074407,24.2200345,13.2576823,20.2298144,16.9731386,13.1423129,14.8558462,12.771798,17.5460903,10.1458975,22.308069,19.9757478,19.2629151,11.1118012,17.6686138,17.1792531,13.1476522,16.401998,26.7446886,17.7775263,13.5396226,14.4075703,37.7422954,16.9252277,14.6798142,12.1746236,12.6387629,10.7029216,9.78827088,11.1649179,14.6129001,11.0422948,13.842852,24.455887,17.2106825,14.1710559,15.734664,12.6200972,13.5281456,12.8463697,24.611669,10.5895865,14.7000195,14.1338236,10.0140252,18.6080204,15.4816696,9.47158524,36.2454446,15.4219389,12.6449852,21.7585174,12.2726866,22.7230118,16.0805162,13.399963,23.8155668,10.8145974,15.5891252,18.5655038,16.5838347,15.809776],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"IN\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"symbol\":\"triangle-up\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[247.439024,175.921569,1847.12245,900.147059,586.612903,711,147.296296,1472.26471,4297.03846,610,4890.24242,1431.10345,3237.66667,1649.23333,975.818182,445.791667,443.641026,733.882353,1702.44118,360.588235,547.536232,583.282609,2731.73529,927.407407,11634.027,706.322581,265.470588,2142.43333,1181.27273,1277.38235,590.766667,699.02,8291.52941,1677.17647,915.424242,188.214286,1606.58824,3482.69767,6770.0303,409,10012.62,85.05,245.228571,1967.57895,787,2127.34884,3401.32353,104.781818,180.915254,25621.4286,664.53125,644.427273,880.586207,1097.29412,389.375,2440.35484,368.090909,4048.48485,1263.30952,270.787879,5677.96429,749.058824,19701.6727,748.466667,583.78125,113.512821,592.529412,237.636364,579.258065,5689.93939,327.214286,581.647059,4415.54167,3640.175,2031.48276,713,110.693333,2250.64516,1156.20833,1893.51351,6900.90244,60333.9143,775.294118],\"y\":[14.1150923,16.2755866,18.0660208,18.9337962,19.039803,11.8278471,14.5760743,17.2519754,18.2258245,21.4208568,23.742011,16.066702,21.4885192,15.8443516,22.6527251,14.6477089,16.9397657,12.0419487,22.8647363,18.7787018,18.912404,20.4206544,26.9787819,26.8725681,20.1454244,11.4331387,21.1730815,30.9753249,16.4441292,16.4684698,24.7650877,14.3082727,36.7600619,15.116835,16.2342399,15.4575777,27.2497358,21.2057826,34.5571857,11.4555097,28.6383762,14.4522145,11.3134379,16.1542355,32.5963872,18.7880617,27.5866359,14.4056678,15.2878703,20.6866911,16.2528217,26.763554,18.5401286,25.0460405,15.084171,35.6088365,13.280021,17.4296096,14.160017,13.4575569,19.0433213,15.6946934,36.9635114,16.9024096,11.6568382,15.9567602,13.6658394,12.9210381,20.0211305,26.9656935,13.8933764,13.363353,19.7081294,17.641192,17.0117257,13.7970398,14.5667198,17.2912268,14.1243101,17.8047443,48.0785102,19.4104036,18.2322106],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"MI\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"symbol\":\"square\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[724.885714,4573.125,1900.28,2434.65854,1984.96667,1857.70833,2292.70968,1248.78571,10409.9643,1105.04167,1385.34615,6147.83333,5776.42308,1475.625,3492.77419,1041.97059,2081.30435,54313.0769,1489.41667,1710.86957,2478.85185,5484.21429,3567.62069,1144.41667,28277.5588,1539.92,1190.53846,3380.375,5469.24,1219.5,34649.12,2114.06452,1111.10714,643.4,1164.32,1050.82353,1063.875,1313.96,1874.66667,1259.58333,3649.90909,1582.43333,16576.8462,2378.23077,3207.5,1567.03704,9349.17241,22017.1905,1323.85714,11033.5833,2678.08333,4894.16,919.48,1408.67857,3882.58333,596.038462,21252.1852,567.76,1156.20833,2001.65854,472.333333,2501.8125,819.52,1372.04348,1608.5,932.653846,4752.83333,1604.52,1166.17241,4349.55172,1690.97561,2581.79167,2295.05714,1810.09091,1796.6,10811.3235,21457.9167,6157.10811,2473.23529,1229.57692,1269.33333,462.416667,4952.56522,1638.26316,3074.57576,1478.24,3061.32432,927.25],\"y\":[8.74173036,17.3660604,17.2669455,13.2435395,29.1494085,16.1764706,14.1576729,11.4336901,24.2252343,11.323289,13.9121748,17.784992,19.6893454,15.7631208,13.0905778,11.6793426,14.258027,25.0853882,13.475094,18.1881619,31.5940573,18.7380268,21.0773874,11.8740898,32.204593,16.4765579,14.9341366,31.6279977,31.956732,13.5143719,29.7883109,24.4504965,16.0309861,10.5537945,15.2589751,12.3112711,12.85435,9.33070866,13.4497842,10.9845318,13.8431503,16.771139,23.6828055,12.2083684,18.1793685,13.3233757,18.8616572,23.5504285,13.3788082,18.1757973,15.0270375,23.7026065,11.677498,14.1000841,19.2777119,10.513927,26.5504804,11.3808463,12.1051405,15.3234543,8.84588804,19.338309,11.4884393,10.1076709,13.0943276,12.4445328,21.8818751,11.233264,15.7080088,16.7975615,14.1156575,16.2824097,13.7772608,15.6221022,17.3762105,18.9896041,24.7331393,15.5998451,13.0834179,16.9825108,15.1100169,7.91325578,24.4193518,19.0096756,18.4454309,14.4987147,29.0951102,13.7107444],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"OH\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"symbol\":\"cross-thin-open\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"line\":{\"color\":\"rgba(214,39,40,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[382.487805,301.981481,768.867925,157.393258,6081.0625,339.6,246.867925,1490.91304,831.111111,439.541667,980.173913,455.428571,5028.56164,1417.75926,917.5,535.358974,690.557692,2241.65789,153,2047.34091,146.266667,713.971014,892.323529,847.772727,438.043478,130.914894,276.466667,1936.65714,460.638298,8011.3125,943.9,3496.57143,434.486486,375.096154,509.301887,2233.91667,1227.65957,494.487805,456.333333,185.238095,63951.6667,678.388889,503.766667,446.183099,3797.56757,4855.4,507.642857,963.676471,632.236364,1279.27083,208,8751.7,515.323529,3321.66667,274.163636,1142.06818,939.5,179.506329,688.092593,3246.15625,331.596491,587.511628,533.6875,295.116667,2343.75,275.44,3813.12,8962.20588,1024.53333,523.918919,4009.14286,1533.4375],\"y\":[12.4274917,18.3200156,19.425147,25.8228923,26.2931785,17.9412424,13.6760641,19.7803247,18.1533363,13.84631,20.852313,16.599469,43.6264509,15.9254638,22.4883413,20.9940872,26.2870159,29.8544673,15.6035329,20.8318653,13.5699001,21.6803841,19.8751776,17.3050671,20.483251,18.7317293,15.3240741,22.1656323,14.3912738,20.3282422,14.3909586,30.4885126,16.4620371,13.6317946,17.4417943,19.0711481,21.877375,15.4275441,14.0016473,7.33610822,25.3558337,17.3724213,13.4311741,21.9338239,24.8578251,37.4197798,15.7492355,24.464372,18.5920497,24.6343275,15.527175,22.9065131,17.4993368,19.9064402,16.7559769,28.5880867,19.833921,17.9479167,14.8077953,20.8371926,15.0650908,17.5516579,18.9421311,19.2118611,23.1569039,19.0168872,23.3909001,35.3967841,16.5498688,15.064584,24.9955036,21.6663817],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"WI\",\"marker\":{\"color\":\"rgba(148,103,189,1)\",\"symbol\":\"square-x-open\",\"line\":{\"color\":\"rgba(148,103,189,1)\"}},\"error_y\":{\"color\":\"rgba(148,103,189,1)\"},\"error_x\":{\"color\":\"rgba(148,103,189,1)\"},\"line\":{\"color\":\"rgba(148,103,189,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}  Change colors Changing of colors can be done similarly to the markers/points shown above. In particular, the color argument/aesthetic can be specified with a variable name. The default color values for a discrete/categorical variable is Set2 from the RColorBrewer package; http://colorbrewer2.org/#type=qualitative\u0026amp;scheme=Set2\u0026amp;n=3.\nplot_ly(midwest, x = ~popdensity, y = ~percollege) %\u0026gt;% add_markers(color = ~state, color = ~state)  {\"x\":{\"visdat\":{\"1c7a17a11af5\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a17a11af5\",\"attrs\":{\"1c7a17a11af5\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"mode\":\"markers\",\"color\":{},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"popdensity\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"percollege\"},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1270.96154,759,681.409091,1812.11765,324.222222,713.76,313.058824,622.407407,559.875,2983.18966,819.47619,530.7,516.428571,1170.48276,1721.46667,88018.3966,748.615385,533.5,2050.84211,718.086957,778.56,39083.3,544.305556,531.428571,1132.28571,474.840909,475.833333,1612.76,732.307692,363.631579,464.151515,1243.73077,339.96,454.744681,576.555556,352,1003.11765,459.507463,1696.30556,365.827586,1121.81818,893,623.457143,567.35,10947.2759,2468.07692,2189.61111,1342.69048,18443.5,1572.25,726,799.813953,633.887097,855.5,1036.58824,5090.02778,1899.70588,3348.74286,953.58,5538.62222,1187.45714,558.521739,493,1053.71429,620.222222,523.939394,974.869565,749.463415,1102.93939,663.333333,1021.26667,4811.23684,823.538462,621.92,358.714286,198.772727,683.909091,573,960.638889,752.045455,5311.53571,6571.3,1206.86364,3497.76471,288.384615,376.266667,505.931818,384.352941,1456.12121,3171.58974,734.125,1697.25,1092.58333,581.242424,453.484848,410.5,569.724138,1467.95122,7146.26,2309.32,8430.43333,1020.40625],\"y\":[19.6313918,11.2433076,17.0338194,17.2789539,14.475999,18.9046238,11.9173877,16.1971209,14.1076487,41.2958081,13.567226,15.1108627,13.6830103,15.3874693,25.1750412,28.0181167,16.9858076,14.5978891,32.835928,16.1959601,16.8685259,42.7688669,16.8399327,16.9356446,20.2751964,13.6029941,17.8273561,14.7056662,15.5321976,11.3675214,13.0495464,18.3778784,14.0467657,20.6605223,14.3184422,13.7735504,18.7236334,15.1666829,36.6436653,15.0256035,18.3698955,14.7583093,16.4133528,14.3524363,27.5938834,17.6409622,24.8893485,19.3436365,37.8340529,16.8995267,14.5388128,18.476678,14.5031437,17.9492226,27.9280239,28.0541488,33.8185507,19.8618556,14.0083929,19.6994744,16.4493851,17.5348837,13.5054525,14.034565,18.511502,16.4744211,19.9206186,11.723732,20.7244228,15.7185951,18.7793745,25.838414,13.5622441,22.011857,12.1742809,14.2502659,14.3687708,16.5212794,12.7412789,21.5077402,21.3007289,21.184251,15.4883463,28.9881549,14.6365422,13.0760986,15.9511699,16.8789809,19.8795753,20.0448263,17.8795898,17.0571729,24.7300469,20.4582651,15.9600242,15.6807027,15.9287398,16.5530497,24.7568609,21.0595616,22.652364,22.8052176],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"IL\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1480.71429,7337.46341,2893.5,393.375,1406.7,1589.45833,741.052632,854.954545,1600.54167,3989.86364,1176.42857,1346.69565,550.777778,1058.96154,2043.94737,1074.77273,1605.63636,5202.56522,1408.30769,5785.11111,2167.91667,7156,712.32,851.304348,897.142857,1100.44828,3090.375,921.515152,4539,2678.05882,1067.5,3154.875,2005.79167,5051.6875,1540.30435,1257.66667,734.117647,977.818182,1418.90476,1126.71429,4894.94444,1286.58065,2040.4375,1339.86364,15853.1333,2974.05556,1586.51852,5025.73077,34659.087,1622.38462,493.761905,1537.375,4540.75,1147.86667,2330,564.625,1515.08,1063,800.391304,751.347826,570.740741,868.5,625.45,4958.92308,1038.72,486.269231,1045.34483,1044.15385,984.64,788.217391,8823.28571,1908.27273,1679.45833,812.083333,1197.21053,1306.95238,703.444444,595.230769,4353.26667,1007.4375,697.6,12696.7692,1048.3125,4421.125,1524.73913,389.333333,1953.04348,790.566667,2997.95833,1235.61905,775.5,1382.55],\"y\":[16.1156797,27.3597862,22.8468145,13.4643978,12.9819635,27.8306241,19.8002103,15.4562536,13.2149823,16.8123574,14.1137248,16.045283,8.54375099,13.2391267,15.5742757,13.9213675,15.581854,21.1970145,17.1676628,18.3723425,11.4249881,20.5498928,11.1452991,12.9935988,13.929867,15.50432,15.5381671,14.9522958,42.1311499,20.4899394,13.1074407,24.2200345,13.2576823,20.2298144,16.9731386,13.1423129,14.8558462,12.771798,17.5460903,10.1458975,22.308069,19.9757478,19.2629151,11.1118012,17.6686138,17.1792531,13.1476522,16.401998,26.7446886,17.7775263,13.5396226,14.4075703,37.7422954,16.9252277,14.6798142,12.1746236,12.6387629,10.7029216,9.78827088,11.1649179,14.6129001,11.0422948,13.842852,24.455887,17.2106825,14.1710559,15.734664,12.6200972,13.5281456,12.8463697,24.611669,10.5895865,14.7000195,14.1338236,10.0140252,18.6080204,15.4816696,9.47158524,36.2454446,15.4219389,12.6449852,21.7585174,12.2726866,22.7230118,16.0805162,13.399963,23.8155668,10.8145974,15.5891252,18.5655038,16.5838347,15.809776],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"IN\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[247.439024,175.921569,1847.12245,900.147059,586.612903,711,147.296296,1472.26471,4297.03846,610,4890.24242,1431.10345,3237.66667,1649.23333,975.818182,445.791667,443.641026,733.882353,1702.44118,360.588235,547.536232,583.282609,2731.73529,927.407407,11634.027,706.322581,265.470588,2142.43333,1181.27273,1277.38235,590.766667,699.02,8291.52941,1677.17647,915.424242,188.214286,1606.58824,3482.69767,6770.0303,409,10012.62,85.05,245.228571,1967.57895,787,2127.34884,3401.32353,104.781818,180.915254,25621.4286,664.53125,644.427273,880.586207,1097.29412,389.375,2440.35484,368.090909,4048.48485,1263.30952,270.787879,5677.96429,749.058824,19701.6727,748.466667,583.78125,113.512821,592.529412,237.636364,579.258065,5689.93939,327.214286,581.647059,4415.54167,3640.175,2031.48276,713,110.693333,2250.64516,1156.20833,1893.51351,6900.90244,60333.9143,775.294118],\"y\":[14.1150923,16.2755866,18.0660208,18.9337962,19.039803,11.8278471,14.5760743,17.2519754,18.2258245,21.4208568,23.742011,16.066702,21.4885192,15.8443516,22.6527251,14.6477089,16.9397657,12.0419487,22.8647363,18.7787018,18.912404,20.4206544,26.9787819,26.8725681,20.1454244,11.4331387,21.1730815,30.9753249,16.4441292,16.4684698,24.7650877,14.3082727,36.7600619,15.116835,16.2342399,15.4575777,27.2497358,21.2057826,34.5571857,11.4555097,28.6383762,14.4522145,11.3134379,16.1542355,32.5963872,18.7880617,27.5866359,14.4056678,15.2878703,20.6866911,16.2528217,26.763554,18.5401286,25.0460405,15.084171,35.6088365,13.280021,17.4296096,14.160017,13.4575569,19.0433213,15.6946934,36.9635114,16.9024096,11.6568382,15.9567602,13.6658394,12.9210381,20.0211305,26.9656935,13.8933764,13.363353,19.7081294,17.641192,17.0117257,13.7970398,14.5667198,17.2912268,14.1243101,17.8047443,48.0785102,19.4104036,18.2322106],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"MI\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"line\":{\"color\":\"rgba(141,160,203,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[724.885714,4573.125,1900.28,2434.65854,1984.96667,1857.70833,2292.70968,1248.78571,10409.9643,1105.04167,1385.34615,6147.83333,5776.42308,1475.625,3492.77419,1041.97059,2081.30435,54313.0769,1489.41667,1710.86957,2478.85185,5484.21429,3567.62069,1144.41667,28277.5588,1539.92,1190.53846,3380.375,5469.24,1219.5,34649.12,2114.06452,1111.10714,643.4,1164.32,1050.82353,1063.875,1313.96,1874.66667,1259.58333,3649.90909,1582.43333,16576.8462,2378.23077,3207.5,1567.03704,9349.17241,22017.1905,1323.85714,11033.5833,2678.08333,4894.16,919.48,1408.67857,3882.58333,596.038462,21252.1852,567.76,1156.20833,2001.65854,472.333333,2501.8125,819.52,1372.04348,1608.5,932.653846,4752.83333,1604.52,1166.17241,4349.55172,1690.97561,2581.79167,2295.05714,1810.09091,1796.6,10811.3235,21457.9167,6157.10811,2473.23529,1229.57692,1269.33333,462.416667,4952.56522,1638.26316,3074.57576,1478.24,3061.32432,927.25],\"y\":[8.74173036,17.3660604,17.2669455,13.2435395,29.1494085,16.1764706,14.1576729,11.4336901,24.2252343,11.323289,13.9121748,17.784992,19.6893454,15.7631208,13.0905778,11.6793426,14.258027,25.0853882,13.475094,18.1881619,31.5940573,18.7380268,21.0773874,11.8740898,32.204593,16.4765579,14.9341366,31.6279977,31.956732,13.5143719,29.7883109,24.4504965,16.0309861,10.5537945,15.2589751,12.3112711,12.85435,9.33070866,13.4497842,10.9845318,13.8431503,16.771139,23.6828055,12.2083684,18.1793685,13.3233757,18.8616572,23.5504285,13.3788082,18.1757973,15.0270375,23.7026065,11.677498,14.1000841,19.2777119,10.513927,26.5504804,11.3808463,12.1051405,15.3234543,8.84588804,19.338309,11.4884393,10.1076709,13.0943276,12.4445328,21.8818751,11.233264,15.7080088,16.7975615,14.1156575,16.2824097,13.7772608,15.6221022,17.3762105,18.9896041,24.7331393,15.5998451,13.0834179,16.9825108,15.1100169,7.91325578,24.4193518,19.0096756,18.4454309,14.4987147,29.0951102,13.7107444],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"OH\",\"marker\":{\"color\":\"rgba(231,138,195,1)\",\"line\":{\"color\":\"rgba(231,138,195,1)\"}},\"textfont\":{\"color\":\"rgba(231,138,195,1)\"},\"error_y\":{\"color\":\"rgba(231,138,195,1)\"},\"error_x\":{\"color\":\"rgba(231,138,195,1)\"},\"line\":{\"color\":\"rgba(231,138,195,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[382.487805,301.981481,768.867925,157.393258,6081.0625,339.6,246.867925,1490.91304,831.111111,439.541667,980.173913,455.428571,5028.56164,1417.75926,917.5,535.358974,690.557692,2241.65789,153,2047.34091,146.266667,713.971014,892.323529,847.772727,438.043478,130.914894,276.466667,1936.65714,460.638298,8011.3125,943.9,3496.57143,434.486486,375.096154,509.301887,2233.91667,1227.65957,494.487805,456.333333,185.238095,63951.6667,678.388889,503.766667,446.183099,3797.56757,4855.4,507.642857,963.676471,632.236364,1279.27083,208,8751.7,515.323529,3321.66667,274.163636,1142.06818,939.5,179.506329,688.092593,3246.15625,331.596491,587.511628,533.6875,295.116667,2343.75,275.44,3813.12,8962.20588,1024.53333,523.918919,4009.14286,1533.4375],\"y\":[12.4274917,18.3200156,19.425147,25.8228923,26.2931785,17.9412424,13.6760641,19.7803247,18.1533363,13.84631,20.852313,16.599469,43.6264509,15.9254638,22.4883413,20.9940872,26.2870159,29.8544673,15.6035329,20.8318653,13.5699001,21.6803841,19.8751776,17.3050671,20.483251,18.7317293,15.3240741,22.1656323,14.3912738,20.3282422,14.3909586,30.4885126,16.4620371,13.6317946,17.4417943,19.0711481,21.877375,15.4275441,14.0016473,7.33610822,25.3558337,17.3724213,13.4311741,21.9338239,24.8578251,37.4197798,15.7492355,24.464372,18.5920497,24.6343275,15.527175,22.9065131,17.4993368,19.9064402,16.7559769,28.5880867,19.833921,17.9479167,14.8077953,20.8371926,15.0650908,17.5516579,18.9421311,19.2118611,23.1569039,19.0168872,23.3909001,35.3967841,16.5498688,15.064584,24.9955036,21.6663817],\"type\":\"scatter\",\"mode\":\"markers\",\"name\":\"WI\",\"marker\":{\"color\":\"rgba(166,216,84,1)\",\"line\":{\"color\":\"rgba(166,216,84,1)\"}},\"textfont\":{\"color\":\"rgba(166,216,84,1)\"},\"error_y\":{\"color\":\"rgba(166,216,84,1)\"},\"error_x\":{\"color\":\"rgba(166,216,84,1)\"},\"line\":{\"color\":\"rgba(166,216,84,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}   Line Graph Line graphs have the same specification as the scatterplots in that the x and y axes have to be specified and the add_lines() function is used. In the example below, I first summarise the number of tropical storms that occurred each year from 1975 to 2015, then plot these values with a line plot. Not shown in the examples, but if there are multiple trajectories that you wish to plot, you can distinguish these with color or linetype aesthetics similar to the changing of markers or colors shown with scatterplots.\nstorms_yearly \u0026lt;- storms %\u0026gt;% group_by(year) %\u0026gt;% summarise(num = length(unique(name))) plot_ly(storms_yearly, x = ~year, y = ~num) %\u0026gt;% add_lines()  {\"x\":{\"visdat\":{\"1c7a1aaf923e\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c7a1aaf923e\",\"attrs\":{\"1c7a1aaf923e\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"mode\":\"lines\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"year\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"num\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015],\"y\":[3,2,3,4,7,8,5,5,4,10,10,4,3,10,11,12,9,7,6,11,21,10,7,12,10,16,17,12,20,13,21,9,16,14,10,20,15,17,14,7,11],\"type\":\"scatter\",\"mode\":\"lines\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}   Your Turn Using the gss_cat data, create a scatterplot showing the age and tvhours variables. Compute the average time spent watching tv by year and marital status. Then, plot the average time spent watching tv by year and marital status.  Subplots There are a few different ways to create subplots or facetted plots using ggplot2 terminology. In all of these elements, the subplot() function from plotly will be used. Three ways will be shown to create subplots, one that manually creates each unique plotly figure and combine with subplot(), a second will create a function that can be passed to a list, and the final will use facetting within ggplot2 and pass to the subplot() function.\nManually create multiple plotly figures The first way to create multiple figures side by side is to manually create multiple plotly figures, save these as objects, then use the subplot() function to combine them into a single figure. Below, I’m going to use the tropical storm data from the line plot example, and instead of calculating the number of storms each year, I’m going to calculate the maximum wind speed and minimum pressure for each year and plot these values.\nOne thing to note about this figure, the two axes are different which may not be best practice in combining figures as this can complicate interpretation. I also specified the name argument to the add_lines() function for each figure created. This allowed for the creation of the legend that differentiates the two different figures.\nstorm_summary \u0026lt;- storms %\u0026gt;% group_by(year) %\u0026gt;% summarise(max_wind = max(wind), min_pressure = min(pressure)) p1 \u0026lt;- plot_ly(storm_summary, x = ~year, y = ~max_wind) %\u0026gt;% add_lines(name = \u0026#39;Max Wind\u0026#39;) p2 \u0026lt;- plot_ly(storm_summary, x = ~year, y = ~min_pressure) %\u0026gt;% add_lines(name = \u0026#39;Min Pressure\u0026#39;) subplot(p1, p2)  {\"x\":{\"data\":[{\"x\":[1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015],\"y\":[100,105,150,80,150,90,115,115,100,115,125,75,110,160,140,105,115,150,100,75,130,125,110,155,135,120,125,125,145,145,160,105,150,135,115,135,120,100,80,125,135],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"Max Wind\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015],\"y\":[963,957,926,980,924,970,946,950,962,949,920,987,958,888,918,956,944,922,960,979,916,933,946,905,921,939,934,934,915,910,882,955,905,935,943,924,940,940,979,940,931],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"Min Pressure\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,0.48],\"automargin\":true,\"anchor\":\"y\"},\"xaxis2\":{\"domain\":[0.52,1],\"automargin\":true,\"anchor\":\"y2\"},\"yaxis2\":{\"domain\":[0,1],\"automargin\":true,\"anchor\":\"x2\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"anchor\":\"x\"},\"annotations\":[],\"shapes\":[],\"images\":[],\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":true},\"attrs\":{\"1c7a9c15478\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"Max Wind\",\"inherit\":true},\"1c7a73909748\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"Min Pressure\",\"inherit\":true}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}  Function to data list Another way to create subplots, is to create a function that creates a single plot for a specific panel. Then, this function is passed to the data after the data has been split into a list of data corresponding to the data for each film using the group_split() function from dplyr. Finally, the lapply() function is used to iterate over this list and apply the one_plot function to each element of the list. This functionally creates a histogram of the words for each of the three movies. These are then combined together using the subplot() function, forced to span one row and the legend is omitted since I added the text label at the top of each function with the add_annotations() function. The add_annotations() function takes a text argument, in this case the specific film, and position arguments. I’ve found the specification of the position arguments is best done through trial and error.\none_plot \u0026lt;- function(d) { plot_ly(d, x = ~Words) %\u0026gt;% add_histogram() %\u0026gt;% add_annotations( ~unique(Film), x = 0.5, y = 1, xref = \u0026quot;paper\u0026quot;, yref = \u0026quot;paper\u0026quot;, showarrow = FALSE ) } lotr %\u0026gt;% group_split(Film) %\u0026gt;% lapply(one_plot) %\u0026gt;% subplot(nrows = 1, shareX = TRUE, titleX = FALSE) %\u0026gt;% hide_legend()  {\"x\":{\"data\":[{\"x\":[4,5,460,214,70,128,197,10,12,339,64,8,326,32,12,8,1,19,2,15,1,7,182,148,6,33,60,107,12,17,21,53,53,61,3,10,17,55,28,139,541,3,84,43,40,85,274,21,37,58,32,48,20,43,14,9,76,68,38,76,13,6,39,30,19,96,29,28,25,17,33,12,9,20,22,7,53,16,13,12,24,5,48,131,5,9,34,7,36,5,107,104,63,33,260,102,1,25,47,39,24,57,40,220,167,24,85,38,34,4,24,18,8,12,11,65,105,3,48,7,7,12,15,68,47,3,17,10,3,30,61,6,18,19,8,68,31,31,30,202,52,7,9,11,7,39,349,6,8,10,7,22,5,8,89,37,8,13,45,17,4,83,7,4,26,27,19,84,51,7,2,16,149,61,135,19,41,6,49,36,214,1,83,13,99,166,81,20,5,1,13,64,103,16,37,79,202,54,48,31,2,3,2,2,6,6,18,17,2,72,72,102,59,34,12,15,50],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[13,18,77,1,22,36,51,3,111,23,2,301,98,20,4,8,15,40,21,78,73,1,52,46,65,13,50,20,255,22,135,104,22,36,7,100,30,151,202,36,268,22,30,56,163,2,75,8,20,5,4,61,30,3,18,7,6,28,5,10,18,21,36,4,15,19,16,3,73,1,66,34,17,13,13,8,15,114,72,8,9,9,4,80,66,89,53,32,43,184,20,31,29,5,59,26,89,56,12,9,21,12,30,24,54,15,168,7,4,42,32,18,20,9,20,16,10,60,6,45,123,8,3,21,63,75,43,32,40,81,19,46,7,25,15,21,7,14,6,60,51,1,22,10,83,13,5,68,21,15,48,55,36,10,17,48,7,9,13,2,17,15,2,71,42,9,2,9,8,3,26,54,17,8,5,12,19,4,1,1,6,6,5,8,38,9,15,3,1,11,16,64,23,96,35,82,8,59,24,2,17,17,17,16,104,46,30,56,23,32,5,1,87,5,103,16,8,16,44,85,2,2,9,10,6,7,38,2,1,37,31,4,1,1,45,11,98,4,2,2,27,56,6,132,17,42,14],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"frame\":null},{\"x\":[2,9,39,5,46,97,123,181,10,2,19,26,51,59,35,25,2,24,37,29,187,11,13,10,88,8,81,3,6,13,44,10,68,20,14,33,13,68,156,24,7,33,16,3,18,28,36,54,69,68,298,73,63,4,7,226,39,68,63,122,18,28,151,15,166,21,56,24,28,55,59,24,3,165,21,29,49,22,36,13,51,68,18,31,45,52,4,81,87,76,39,91,3,68,33,76,6,59,97,119,55,11,9,10,5,45,3,5,10,50,22,1,14,4,2,15,22,49,66,8,9,50,8,14,188,190,143,75,63,8,132,6,250,35,92,89,16,64,69,9,51,5,2,206,6,78,65,13,36,12,30,64,18,7,34,14,37,23,24,17,4,18,1,50,37,1,7,30,5,12,6,17,58,29,31,6,34,1,22,58,6,46,1,23,6,5,8,31,15,20,53,73,6,20,21,5,7,63,3,1,16,12,22,186,4,10,35,7,77,56,95,18,54,30,36,69,11,12],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x3\",\"yaxis\":\"y3\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,0.313333333333333],\"automargin\":true,\"anchor\":\"y\"},\"xaxis2\":{\"domain\":[0.353333333333333,0.646666666666667],\"automargin\":true,\"anchor\":\"y2\"},\"xaxis3\":{\"domain\":[0.686666666666667,1],\"automargin\":true,\"anchor\":\"y3\"},\"yaxis3\":{\"domain\":[0,1],\"automargin\":true,\"anchor\":\"x3\"},\"yaxis2\":{\"domain\":[0,1],\"automargin\":true,\"anchor\":\"x2\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"anchor\":\"x\"},\"annotations\":[{\"text\":\"The Fellowship Of The Ring\",\"x\":0.156666666666667,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"showarrow\":false},{\"text\":\"The Return Of The King\",\"x\":0.5,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"showarrow\":false},{\"text\":\"The Two Towers\",\"x\":0.843333333333333,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"showarrow\":false}],\"shapes\":[],\"images\":[],\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"hovermode\":\"closest\",\"showlegend\":false},\"attrs\":{\"1c7a12c838a5\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"histogram\",\"inherit\":true},\"1c7a16fee245\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"histogram\",\"inherit\":true},\"1c7a37b92bce\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"histogram\",\"inherit\":true}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\".hideLegend\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}  Facetting with ggplot2 You can also create general facetting with ggplot2 and use the ggplotly() function to preserve those facets. For example, we can recreate a similar plot with the histograms for each movie as above with the following code. One nice feature of the subplots, is that if you zoom in on one facet, the view is automatically updated on subsequent facets.\nlotr_hist \u0026lt;- ggplot(lotr, aes(x = Words, fill = Film)) + geom_histogram(bins = 20) + facet_wrap(~ Film) + theme_bw() + theme(legend.position = \u0026#39;none\u0026#39;) ggplotly(lotr_hist)  {\"x\":{\"data\":[{\"orientation\":\"v\",\"width\":[28.4210526315789,28.421052631579,28.4210526315789,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579],\"base\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"x\":[0,28.4210526315789,56.8421052631579,85.2631578947368,113.684210526316,142.105263157895,170.526315789474,198.947368421053,227.368421052632,255.789473684211,284.210526315789,312.631578947368,341.052631578947,369.473684210526,397.894736842105,426.315789473684,454.736842105263,483.157894736842,511.578947368421,540],\"y\":[75,65,33,15,7,6,3,3,3,1,1,1,2,0,0,0,1,0,0,1],\"text\":[\"count: 75\nWords: 0.00000\nFilm: The Fellowship Of The Ring\",\"count: 65\nWords: 28.42105\nFilm: The Fellowship Of The Ring\",\"count: 33\nWords: 56.84211\nFilm: The Fellowship Of The Ring\",\"count: 15\nWords: 85.26316\nFilm: The Fellowship Of The Ring\",\"count: 7\nWords: 113.68421\nFilm: The Fellowship Of The Ring\",\"count: 6\nWords: 142.10526\nFilm: The Fellowship Of The Ring\",\"count: 3\nWords: 170.52632\nFilm: The Fellowship Of The Ring\",\"count: 3\nWords: 198.94737\nFilm: The Fellowship Of The Ring\",\"count: 3\nWords: 227.36842\nFilm: The Fellowship Of The Ring\",\"count: 1\nWords: 255.78947\nFilm: The Fellowship Of The Ring\",\"count: 1\nWords: 284.21053\nFilm: The Fellowship Of The Ring\",\"count: 1\nWords: 312.63158\nFilm: The Fellowship Of The Ring\",\"count: 2\nWords: 341.05263\nFilm: The Fellowship Of The Ring\",\"count: 0\nWords: 369.47368\nFilm: The Fellowship Of The Ring\",\"count: 0\nWords: 397.89474\nFilm: The Fellowship Of The Ring\",\"count: 0\nWords: 426.31579\nFilm: The Fellowship Of The Ring\",\"count: 1\nWords: 454.73684\nFilm: The Fellowship Of The Ring\",\"count: 0\nWords: 483.15789\nFilm: The Fellowship Of The Ring\",\"count: 0\nWords: 511.57895\nFilm: The Fellowship Of The Ring\",\"count: 1\nWords: 540.00000\nFilm: The Fellowship Of The Ring\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(248,118,109,1)\",\"line\":{\"width\":1.88976377952756,\"color\":\"transparent\"}},\"name\":\"The Fellowship Of The Ring\",\"legendgroup\":\"The Fellowship Of The Ring\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[28.4210526315789,28.421052631579,28.4210526315789,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579],\"base\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"x\":[0,28.4210526315789,56.8421052631579,85.2631578947368,113.684210526316,142.105263157895,170.526315789474,198.947368421053,227.368421052632,255.789473684211,284.210526315789,312.631578947368,341.052631578947,369.473684210526,397.894736842105,426.315789473684,454.736842105263,483.157894736842,511.578947368421,540],\"y\":[95,83,34,18,7,3,3,1,0,2,0,1,0,0,0,0,0,0,0,0],\"text\":[\"count: 95\nWords: 0.00000\nFilm: The Return Of The King\",\"count: 83\nWords: 28.42105\nFilm: The Return Of The King\",\"count: 34\nWords: 56.84211\nFilm: The Return Of The King\",\"count: 18\nWords: 85.26316\nFilm: The Return Of The King\",\"count: 7\nWords: 113.68421\nFilm: The Return Of The King\",\"count: 3\nWords: 142.10526\nFilm: The Return Of The King\",\"count: 3\nWords: 170.52632\nFilm: The Return Of The King\",\"count: 1\nWords: 198.94737\nFilm: The Return Of The King\",\"count: 0\nWords: 227.36842\nFilm: The Return Of The King\",\"count: 2\nWords: 255.78947\nFilm: The Return Of The King\",\"count: 0\nWords: 284.21053\nFilm: The Return Of The King\",\"count: 1\nWords: 312.63158\nFilm: The Return Of The King\",\"count: 0\nWords: 341.05263\nFilm: The Return Of The King\",\"count: 0\nWords: 369.47368\nFilm: The Return Of The King\",\"count: 0\nWords: 397.89474\nFilm: The Return Of The King\",\"count: 0\nWords: 426.31579\nFilm: The Return Of The King\",\"count: 0\nWords: 454.73684\nFilm: The Return Of The King\",\"count: 0\nWords: 483.15789\nFilm: The Return Of The King\",\"count: 0\nWords: 511.57895\nFilm: The Return Of The King\",\"count: 0\nWords: 540.00000\nFilm: The Return Of The King\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,186,56,1)\",\"line\":{\"width\":1.88976377952756,\"color\":\"transparent\"}},\"name\":\"The Return Of The King\",\"legendgroup\":\"The Return Of The King\",\"showlegend\":true,\"xaxis\":\"x2\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":[28.4210526315789,28.421052631579,28.4210526315789,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579,28.421052631579],\"base\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"x\":[0,28.4210526315789,56.8421052631579,85.2631578947368,113.684210526316,142.105263157895,170.526315789474,198.947368421053,227.368421052632,255.789473684211,284.210526315789,312.631578947368,341.052631578947,369.473684210526,397.894736842105,426.315789473684,454.736842105263,483.157894736842,511.578947368421,540],\"y\":[75,65,43,17,3,4,3,5,1,1,1,0,0,0,0,0,0,0,0,0],\"text\":[\"count: 75\nWords: 0.00000\nFilm: The Two Towers\",\"count: 65\nWords: 28.42105\nFilm: The Two Towers\",\"count: 43\nWords: 56.84211\nFilm: The Two Towers\",\"count: 17\nWords: 85.26316\nFilm: The Two Towers\",\"count: 3\nWords: 113.68421\nFilm: The Two Towers\",\"count: 4\nWords: 142.10526\nFilm: The Two Towers\",\"count: 3\nWords: 170.52632\nFilm: The Two Towers\",\"count: 5\nWords: 198.94737\nFilm: The Two Towers\",\"count: 1\nWords: 227.36842\nFilm: The Two Towers\",\"count: 1\nWords: 255.78947\nFilm: The Two Towers\",\"count: 1\nWords: 284.21053\nFilm: The Two Towers\",\"count: 0\nWords: 312.63158\nFilm: The Two Towers\",\"count: 0\nWords: 341.05263\nFilm: The Two Towers\",\"count: 0\nWords: 369.47368\nFilm: The Two Towers\",\"count: 0\nWords: 397.89474\nFilm: The Two Towers\",\"count: 0\nWords: 426.31579\nFilm: The Two Towers\",\"count: 0\nWords: 454.73684\nFilm: The Two Towers\",\"count: 0\nWords: 483.15789\nFilm: The Two Towers\",\"count: 0\nWords: 511.57895\nFilm: The Two Towers\",\"count: 0\nWords: 540.00000\nFilm: The Two Towers\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(97,156,255,1)\",\"line\":{\"width\":1.88976377952756,\"color\":\"transparent\"}},\"name\":\"The Two Towers\",\"legendgroup\":\"The Two Towers\",\"showlegend\":true,\"xaxis\":\"x3\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":37.9178082191781,\"r\":7.30593607305936,\"b\":40.1826484018265,\"l\":37.2602739726027},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xaxis\":{\"domain\":[0,0.322461404653185],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-42.6315789473684,582.631578947368],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"200\",\"400\"],\"tickvals\":[7.105427357601e-15,200,400],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"200\",\"400\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":\"\",\"hoverformat\":\".2f\"},\"annotations\":[{\"text\":\"Words\",\"x\":0.5,\"y\":0,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-0,\"xanchor\":\"center\",\"yanchor\":\"top\",\"annotationType\":\"axis\",\"yshift\":-21.9178082191781},{\"text\":\"count\",\"x\":0,\"y\":0.5,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-90,\"xanchor\":\"right\",\"yanchor\":\"center\",\"annotationType\":\"axis\",\"xshift\":-21.9178082191781},{\"text\":\"The Fellowship Of The Ring\",\"x\":0.161230702326593,\"y\":1,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(26,26,26,1)\",\"family\":\"\",\"size\":11.689497716895},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-0,\"xanchor\":\"center\",\"yanchor\":\"bottom\"},{\"text\":\"The Return Of The King\",\"x\":0.5,\"y\":1,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(26,26,26,1)\",\"family\":\"\",\"size\":11.689497716895},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-0,\"xanchor\":\"center\",\"yanchor\":\"bottom\"},{\"text\":\"The Two Towers\",\"x\":0.838769297673407,\"y\":1,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(26,26,26,1)\",\"family\":\"\",\"size\":11.689497716895},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-0,\"xanchor\":\"center\",\"yanchor\":\"bottom\"}],\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-4.75,99.75],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"25\",\"50\",\"75\"],\"tickvals\":[0,25,50,75],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"25\",\"50\",\"75\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.322461404653185,\"y0\":0,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":\"rgba(217,217,217,1)\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.322461404653185,\"y0\":0,\"y1\":23.37899543379,\"yanchor\":1,\"ysizemode\":\"pixel\"},{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.344205262013481,\"x1\":0.655794737986519,\"y0\":0,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":\"rgba(217,217,217,1)\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.344205262013481,\"x1\":0.655794737986519,\"y0\":0,\"y1\":23.37899543379,\"yanchor\":1,\"ysizemode\":\"pixel\"},{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.677538595346814,\"x1\":1,\"y0\":0,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":\"rgba(217,217,217,1)\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.677538595346814,\"x1\":1,\"y0\":0,\"y1\":23.37899543379,\"yanchor\":1,\"ysizemode\":\"pixel\"}],\"xaxis2\":{\"type\":\"linear\",\"autorange\":false,\"range\":[-42.6315789473684,582.631578947368],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"200\",\"400\"],\"tickvals\":[7.105427357601e-15,200,400],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"200\",\"400\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"domain\":[0.344205262013481,0.655794737986519],\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":\"\",\"hoverformat\":\".2f\"},\"xaxis3\":{\"type\":\"linear\",\"autorange\":false,\"range\":[-42.6315789473684,582.631578947368],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"200\",\"400\"],\"tickvals\":[7.105427357601e-15,200,400],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"200\",\"400\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"domain\":[0.677538595346814,1],\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":\"\",\"hoverformat\":\".2f\"},\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1c7a10a390c9\":{\"x\":{},\"fill\":{},\"type\":\"bar\"}},\"cur_data\":\"1c7a10a390c9\",\"visdat\":{\"1c7a10a390c9\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}    Leaflet Example I want to go through a few alternative ways to visualize data in an interactive framework. One of these is using the leaflet package which allows one to create interactive visualizations of map data. Using the storms data about tropical storms, I first filter that data to only include two well known tropical storms that occured over the past 20 years, Katrina and Ike. The leaflet() function is used to initialize the map, the add_tiles() adds the map overlay using OpenStreetMap by default. Then the add_circles() function is used to add circles for each latitude/longitude location of the tropical storms in the data. The circles are sized based on the wind speed using the radius argument and the name of the tropical storm is added via the popup argument. This will allow one to click on a circle and the name will be shown. You could customize this further by creating a new variable that would represent the name and the wind speed or other information by pasting multiple data sources together.\nlibrary(leaflet) storms %\u0026gt;% filter(name %in% c(\u0026#39;Ike\u0026#39;, \u0026#39;Katrina\u0026#39;), year \u0026gt; 2000) %\u0026gt;% leaflet() %\u0026gt;% addTiles() %\u0026gt;% addCircles(lng = ~long, lat = ~lat, popup = ~name, weight = 1, radius = ~wind*1000)  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"\u0026copy; OpenStreetMap contributors, CC-BY-SA\"}]},{\"method\":\"addCircles\",\"args\":[[23.1,23.4,23.8,24.5,25.4,26,26.1,26.2,26.2,26,25.9,25.4,25.1,24.9,24.6,24.4,24.4,24.5,24.8,25.2,25.7,26.3,27.2,28.2,29.3,29.5,30.2,31.1,32.6,34.1,35.6,37,17.2,17.3,17.5,17.8,18.2,18.7,19.3,19.8,20.2,20.6,21.1,21.8,22.4,23,23.4,23.6,23.6,23.5,23.2,22.8,22.4,21.9,21.5,21.2,21.1,21,21,21,21.1,21.1,21.1,21.1,21.2,21.5,22,22.4,22.6,22.7,23.1,23.4,23.8,24.2,24.7,25.1,25.5,25.8,26.1,26.4,26.9,27.5,28.3,29.1,29.3,30.3,31.7,33.5,35.5],[-75.1,-75.7,-76.2,-76.5,-76.9,-77.7,-78.4,-79,-79.6,-80.1,-80.3,-81.3,-82,-82.6,-83.3,-84,-84.7,-85.3,-85.9,-86.7,-87.7,-88.6,-89.2,-89.6,-89.6,-89.6,-89.6,-89.6,-89.1,-88.6,-88,-87,-37,-38.4,-39.9,-41.3,-42.8,-44.3,-45.8,-47.3,-48.8,-50.3,-51.9,-53.5,-55,-56.4,-57.7,-59,-60.4,-61.9,-63.4,-64.9,-66.3,-67.7,-69,-70.3,-71.6,-72.8,-73.2,-74,-75.2,-75.7,-76.5,-77.8,-79.1,-80.3,-81.4,-82.4,-82.9,-83.3,-84,-84.6,-85.2,-85.8,-86.4,-87.1,-88,-88.9,-90,-91.1,-92.2,-93.2,-94,-94.6,-94.7,-95.2,-95.3,-94.9,-93.7],[30000,30000,30000,35000,40000,45000,50000,55000,60000,70000,70000,65000,75000,85000,90000,95000,100000,100000,100000,125000,145000,150000,140000,125000,110000,110000,105000,80000,50000,40000,30000,30000,30000,35000,45000,45000,45000,50000,55000,55000,55000,60000,75000,105000,125000,120000,115000,115000,115000,105000,100000,100000,100000,95000,115000,115000,115000,110000,110000,105000,115000,115000,100000,85000,75000,70000,70000,70000,70000,65000,65000,70000,80000,85000,85000,85000,85000,85000,85000,90000,95000,95000,95000,95000,95000,85000,50000,35000,35000],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Katrina\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\",\"Ike\"],null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]}],\"limits\":{\"lat\":[17.2,37],\"lng\":[-95.3,-37]}},\"evals\":[],\"jsHooks\":[]} gganimate The gganimate package is a way to add animation to static images. The figures can then be converted to gifs to be used within many different presentation modes including pdf, html, or others.\nI’m going to use the gapminder data to visualize some of these (you’ll likely need to install the gapminder package if you are following along). When using gganimate, you start first with a static graphic.\nlibrary(gapminder) ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + scale_x_log10() + facet_wrap(~continent) gganimate pieces First, make sure the gganimate and gifski packages are installed.\ninstall.packages(c(\u0026quot;gganimate\u0026quot;, \u0026quot;gifski\u0026quot;)) We can then show movement over time instead of lumping all the different years into a single figure. This is done with transition_time() function and specifying how we want the transition to move with the ease_aes() function. In addition, a label at the top of the figure is used to show the year in which the data are for, starting with 1952 and moving to 2007 in increments of 5 years (i.e. there is data available every 5 years). Finally, I used the anim_save() function to save the animation with default encodings due to having difficulties getting the image to show up in the R notebook without saving.\nlibrary(gganimate) anim \u0026lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + scale_x_log10() + facet_wrap(~continent) + # Here comes the gganimate specific bits labs(title = \u0026#39;Year: {frame_time}\u0026#39;, x = \u0026#39;GDP per capita\u0026#39;, y = \u0026#39;life expectancy\u0026#39;) + transition_time(year) + ease_aes(\u0026#39;linear\u0026#39;) anim_save(filename = \u0026quot;/Users/brandonlebeau/OneDrive - University of Iowa/Courses/Uiowa/Comp/Syntax/R/v2/gapminder.gif\u0026quot;, animation = anim)    Additional Resources  plotly for R book: https://plotly-book.cpsievert.me/ plotly: https://plot.ly/ htmlwidgets: https://www.htmlwidgets.org/ gganimate: https://gganimate.com/   ","date":1616976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616976000,"objectID":"0494d69a456b2d9736b437284b15df44","permalink":"https://psqf6250.brandonlebeau.org/rcode/interactive-graphics/","publishdate":"2021-03-29T00:00:00Z","relpermalink":"/rcode/interactive-graphics/","section":"rcode","summary":"Interactive Graphics","tags":null,"title":"Interactive Graphics","type":"book"},{"authors":null,"categories":null,"content":"Quiz 2 can be taken on ICON, due February 6th, 2022. The quiz covers content from Week 1.\nQuiz 2 Link\n","date":1643673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643673600,"objectID":"89e911fba74fe6a1dc69de07ae2db619","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz2/","publishdate":"2022-02-01T00:00:00Z","relpermalink":"/assignments/quizzes/quiz2/","section":"assignments","summary":"Quiz 2 can be taken on ICON, due February 6th, 2022. The quiz covers content from Week 1.\nQuiz 2 Link","tags":null,"title":"Quiz 2","type":"book"},{"authors":null,"categories":null,"content":"   When to create a function Functions can be particularly useful when you are duplicating significant portions of your code. For example, perhaps you want to standardize various quantitative variables by subtracting each variable by the mean and dividing by the standard deviation. Below is the mathematics behind this operation.\n\\[ standardizedvar = \\frac{var - mean(var)}{sd(var)} \\]\nLet’s use the midwest data that comes with the tidyverse to explore what code like this would look like.\nlibrary(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() midwest ## # A tibble: 437 × 28 ## PID county state area poptotal popdensity popwhite popblack popamerindian ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 561 ADAMS IL 0.052 66090 1271. 63917 1702 98 ## 2 562 ALEXAN… IL 0.014 10626 759 7054 3496 19 ## 3 563 BOND IL 0.022 14991 681. 14477 429 35 ## 4 564 BOONE IL 0.017 30806 1812. 29344 127 46 ## 5 565 BROWN IL 0.018 5836 324. 5264 547 14 ## 6 566 BUREAU IL 0.05 35688 714. 35157 50 65 ## 7 567 CALHOUN IL 0.017 5322 313. 5298 1 8 ## 8 568 CARROLL IL 0.027 16805 622. 16519 111 30 ## 9 569 CASS IL 0.024 13437 560. 13384 16 8 ## 10 570 CHAMPA… IL 0.058 173025 2983. 146506 16559 331 ## # … with 427 more rows, and 19 more variables: popasian \u0026lt;int\u0026gt;, popother \u0026lt;int\u0026gt;, ## # percwhite \u0026lt;dbl\u0026gt;, percblack \u0026lt;dbl\u0026gt;, percamerindan \u0026lt;dbl\u0026gt;, percasian \u0026lt;dbl\u0026gt;, ## # percother \u0026lt;dbl\u0026gt;, popadults \u0026lt;int\u0026gt;, perchsd \u0026lt;dbl\u0026gt;, percollege \u0026lt;dbl\u0026gt;, ## # percprof \u0026lt;dbl\u0026gt;, poppovertyknown \u0026lt;int\u0026gt;, percpovertyknown \u0026lt;dbl\u0026gt;, ## # percbelowpoverty \u0026lt;dbl\u0026gt;, percchildbelowpovert \u0026lt;dbl\u0026gt;, percadultpoverty \u0026lt;dbl\u0026gt;, ## # percelderlypoverty \u0026lt;dbl\u0026gt;, inmetro \u0026lt;int\u0026gt;, category \u0026lt;chr\u0026gt; Suppose we wanted to standardize using the above equation, for the variables, poptotal, popdensity, popadults, and perccollege. Let’s do the computation for the variable poptotal first.\nmidwest %\u0026gt;% mutate(stand_poptotal = (poptotal - mean(poptotal)) / sd(poptotal)) %\u0026gt;% select(poptotal, stand_poptotal) ## # A tibble: 437 × 2 ## poptotal stand_poptotal ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; ## 1 66090 -0.101 ## 2 10626 -0.287 ## 3 14991 -0.272 ## 4 30806 -0.219 ## 5 5836 -0.303 ## 6 35688 -0.203 ## 7 5322 -0.305 ## 8 16805 -0.266 ## 9 13437 -0.277 ## 10 173025 0.258 ## # … with 427 more rows How would we move alter the code to do the computation for subsequent columns? You could rewrite the code, but I would likely copy and paste the code and adapt the pieces to the new column. Here I did it for the additional three variables.\nmidwest %\u0026gt;% mutate(stand_poptotal = (poptotal - mean(poptotal)) / sd(poptotal), stand_popdensity = (popdensity - mean(popdensity)) / sd(popdensity), stand_popadults = (popadults - mean(popadults)) / sd(popadults), stand_percollege = (percollege - mean(poptotal)) / sd(percollege)) %\u0026gt;% select(poptotal, popdensity, popadults, percollege, stand_poptotal, stand_popdensity, stand_popadults, stand_percollege) ## # A tibble: 437 × 8 ## poptotal popdensity popadults percollege stand_poptotal stand_popdensity ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 66090 1271. 43298 19.6 -0.101 -0.238 ## 2 10626 759 6724 11.2 -0.287 -0.305 ## 3 14991 681. 9669 17.0 -0.272 -0.315 ## 4 30806 1812. 19272 17.3 -0.219 -0.168 ## 5 5836 324. 3979 14.5 -0.303 -0.362 ## 6 35688 714. 23444 18.9 -0.203 -0.311 ## 7 5322 313. 3583 11.9 -0.305 -0.363 ## 8 16805 622. 11323 16.2 -0.266 -0.323 ## 9 13437 560. 8825 14.1 -0.277 -0.331 ## 10 173025 2983. 95971 41.3 0.258 -0.0149 ## # … with 427 more rows, and 2 more variables: stand_popadults \u0026lt;dbl\u0026gt;, ## # stand_percollege \u0026lt;dbl\u0026gt; Explore the code, notice any problems? When I copied and pasted, I missed changing the mean calculation for the percollege variable. This issue can be particularly difficult to debug given that there are no errors in the code. We could save some code duplication by writing our own function. This can save on errors in copy and pasting or errors on data entry. Let’s write a function that implements this, focusing less on function specifics as that will come later.\nstandardize \u0026lt;- function(x) { mean_var \u0026lt;- mean(x) sd_var \u0026lt;- sd(x) (x - mean_var) / sd_var } We could then use this function, standardize() inside of the mutate() function.\nmidwest %\u0026gt;% mutate(stand_poptotal = standardize(poptotal), stand_popdensity = standardize(popdensity), stand_popadults = standardize(popadults), stand_percollege = standardize(percollege)) %\u0026gt;% select(poptotal, popdensity, popadults, percollege, stand_poptotal, stand_popdensity, stand_popadults, stand_percollege) ## # A tibble: 437 × 8 ## poptotal popdensity popadults percollege stand_poptotal stand_popdensity ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 66090 1271. 43298 19.6 -0.101 -0.238 ## 2 10626 759 6724 11.2 -0.287 -0.305 ## 3 14991 681. 9669 17.0 -0.272 -0.315 ## 4 30806 1812. 19272 17.3 -0.219 -0.168 ## 5 5836 324. 3979 14.5 -0.303 -0.362 ## 6 35688 714. 23444 18.9 -0.203 -0.311 ## 7 5322 313. 3583 11.9 -0.305 -0.363 ## 8 16805 622. 11323 16.2 -0.266 -0.323 ## 9 13437 560. 8825 14.1 -0.277 -0.331 ## 10 173025 2983. 95971 41.3 0.258 -0.0149 ## # … with 427 more rows, and 2 more variables: stand_popadults \u0026lt;dbl\u0026gt;, ## # stand_percollege \u0026lt;dbl\u0026gt; Notice now we remove some, but not all of the duplication. Next week we will explore iteration in more detail that can remove this level of duplication.\nYour Turn There is an R function, scale(), that does this standardization. Use this to recreate the standardization above. Will the standardize() function above work when there are missing values? How could the function be adapted to work with missing values?   Conditional summarise() or mutate() statements One thing I want to show briefly is if you are attempting to apply a particular function for data verification and there is a function already defined in R, summarise_if() or mutate_if() can be particularly useful. Take an example of wanting to calculate the mean of each numeric column, but the data has a mix of numeric and categorical variables. You could write multiple computations within mutate() or summarise(), but summarise_if() and mutate_if() can be particularly useful. Below is an example of this strategy with the mpg data from dplyr.\nmpg ## # A tibble: 234 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… ## 8 audi a4 quattro 1.8 1999 4 manu… 4 18 26 p comp… ## 9 audi a4 quattro 1.8 1999 4 auto… 4 16 25 p comp… ## 10 audi a4 quattro 2 2008 4 manu… 4 20 28 p comp… ## # … with 224 more rows Let’s calculate the mean of each numeric column with summarise_if().\nsummarise_if(mpg, is.numeric, mean, na.rm = TRUE) ## # A tibble: 1 × 5 ## displ year cyl cty hwy ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 3.47 2004. 5.89 16.9 23.4 The mutate_if() function could be used if these values wanted to be saved to the data. Additional level of detail could be added by using summarise_if() and group_by() in tandem.\nmpg %\u0026gt;% group_by(manufacturer) %\u0026gt;% summarise_if(is.numeric, mean, na.rm = TRUE) ## # A tibble: 15 × 6 ## manufacturer displ year cyl cty hwy ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 audi 2.54 2004. 5.22 17.6 26.4 ## 2 chevrolet 5.06 2005. 7.26 15 21.9 ## 3 dodge 4.38 2004. 7.08 13.1 17.9 ## 4 ford 4.54 2003. 7.2 14 19.4 ## 5 honda 1.71 2003 4 24.4 32.6 ## 6 hyundai 2.43 2004. 4.86 18.6 26.9 ## 7 jeep 4.58 2006. 7.25 13.5 17.6 ## 8 land rover 4.3 2004. 8 11.5 16.5 ## 9 lincoln 5.4 2002 8 11.3 17 ## 10 mercury 4.4 2004. 7 13.2 18 ## 11 nissan 3.27 2004. 5.54 18.1 24.6 ## 12 pontiac 3.96 2003. 6.4 17 26.4 ## 13 subaru 2.46 2004. 4 19.3 25.6 ## 14 toyota 2.95 2003. 5.12 18.5 24.9 ## 15 volkswagen 2.26 2003. 4.59 20.9 29.2 These can be great, simple ways to explore the data at a first inspection.\n  Function basics Every function has three basic components, a function name, a function definition (i.e. arguments), and the function specifics/computations or function body. The following code chunk attempts to show these basics.\nfunction_name \u0026lt;- function(argument1, argument2) { function_body } The function() function is used to define a new function. Inside the parentheses of this are where the function arguments are defined. The arguments can contain default values or can be unspecified, more details on this later. The function body is where the details of what the function is going to do is contained. From the previous function we created, the computation to standardize a variable was perfomed within the function body. Finally, the function name is specified just like naming any other object.\nPicking a Function Name Functions names are an important step to think about for a bit at the beginning. A few general heuristics are useful to keep in mind when thinking about a function name.\nDo not use a name from a function already defined within R. For example, avoid things like: mean, c, t.test, etc. Create a semi-descriptive name that isn’t too detailed. For example, function names like f, s, tr, etc are not descriptive enough to be useful. Also, better to avoid particularly long names like standardize_variable. If you define multiple functions, be consistent in their naming convention. If you use underscores, use them for all of your function names. If you like dots or titleCase be consistent.   Function Arguments Function arguments need to be named and I would recommend using similar heuristics to picking a function name. The only element that can be ignored is the first, you are able to reuse function arguments across functions. This would actually be encouraged across functions that are similar to ensure that the function arguments work similarly across the function.\nArguments with Default Values Arguments in R can either have default values or can be left without default values. The big distinction to keep in mind when thinking about this is whether it is an argument that users should explicitly specify everytime (i.e. major user argument) or is an argument that users may only change on occasion and there is an obvious default that makes sense. For the former situation, I would only define the argument name with no default compared to the latter I would typically define a default value.\nConsider the standardize() function we defined previously.\nstandardize \u0026lt;- function(x) { mean_var \u0026lt;- mean(x) sd_var \u0026lt;- sd(x) (x - mean_var) / sd_var } Notice that the function argument, x here is just named it does not have a default value. This was the case where this argument was specified to be the variable to be standardized, therefore having a default value did not make sense. The first function arguments are commonly do not have default values.\nIn a “Your Turn” section earlier, it was asked if this function would work with missing data. The short answer, is it would not, because the mean and sd would not be able to be calculated with missing values. For example, using the nycflights13 package used earlier, we could show that when missing data are present, the function breaks (i.e. produces NA values).\nlibrary(nycflights13) flights %\u0026gt;% mutate(stand_arr_delay = standardize(arr_delay)) %\u0026gt;% select(arr_delay, stand_arr_delay) ## # A tibble: 336,776 × 2 ## arr_delay stand_arr_delay ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 11 NA ## 2 20 NA ## 3 33 NA ## 4 -18 NA ## 5 -25 NA ## 6 12 NA ## 7 19 NA ## 8 -14 NA ## 9 -8 NA ## 10 8 NA ## # … with 336,766 more rows We could adapt this to include another function argument, that deals with how missing data should be handled.\nstandardize \u0026lt;- function(x, na.rm = TRUE) { mean_var \u0026lt;- mean(x, na.rm = na.rm) sd_var \u0026lt;- sd(x, na.rm = na.rm) (x - mean_var) / sd_var } flights %\u0026gt;% mutate(stand_arr_delay = standardize(arr_delay)) %\u0026gt;% select(arr_delay, stand_arr_delay) ## # A tibble: 336,776 × 2 ## arr_delay stand_arr_delay ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 11 0.0920 ## 2 20 0.294 ## 3 33 0.585 ## 4 -18 -0.558 ## 5 -25 -0.715 ## 6 12 0.114 ## 7 19 0.271 ## 8 -14 -0.468 ## 9 -8 -0.334 ## 10 8 0.0247 ## # … with 336,766 more rows This function can now handle missing values through the argument, na.rm, which defaults to the value of TRUE and since the default value is TRUE, the missing data are automatically removed when computing the mean and sd. We could change the default value explicitly when we call the function.\nflights %\u0026gt;% mutate(stand_arr_delay = standardize(arr_delay, na.rm = FALSE)) %\u0026gt;% select(arr_delay, stand_arr_delay) ## # A tibble: 336,776 × 2 ## arr_delay stand_arr_delay ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 11 NA ## 2 20 NA ## 3 33 NA ## 4 -18 NA ## 5 -25 NA ## 6 12 NA ## 7 19 NA ## 8 -14 NA ## 9 -8 NA ## 10 8 NA ## # … with 336,766 more rows Note here I used the same argument name, na.rm, as is found within the mean and sd functions by default. This was to ensure that they are familiar to many users already comfortable with these function names.\nFunction arguments can also be specified as text strings, that will be discussed in more detail in the next section.\n   Conditional Functions Conditional branching in functions are common, particularly when the functions attempt to do a few different things based on what the input values are. The general format for creating functions that use conditional logic are as follows:\nif(some_condition) { # do something } else { # do something else } This is an example of a branch with two different computations. For example, we could create a function that first calculates the skewness of a variable, if it is skewed returns the median otherwise computes the mean.\nlibrary(e1071) mean_median \u0026lt;- function(variable, na.rm = TRUE) { var_skew \u0026lt;- skewness(variable, na.rm = na.rm) if(abs(var_skew) \u0026gt; 2) { descriptive \u0026lt;- median(variable, na.rm = na.rm) } else { descriptive \u0026lt;- mean(variable, na.rm = na.rm) } data.frame(skewness = var_skew, descriptive = descriptive) } We could then use this function to calculate the statistic of interest for a few different variables.\nmean_median(flights$arr_delay) ## skewness descriptive ## 1 3.716783 -5 mean_median(gss_cat$tvhours) ## skewness descriptive ## 1 2.915875 2 mean_median(diamonds$price) ## skewness descriptive ## 1 1.618305 3932.8 Note here, that you need to name the variable explicitly, you can’t just do the following:\nmean_median(arr_delay) This is happening because the function is unable to find the variable, arr_delay as it does not know to look in the flights data. To rectify this you need to use the $ notation shown above or other ways of telling the function which data to use to find the correct variable (e.g., with() would also be an option).\nConditionals based on function arguments You can also control flow of a function based on the arguments. For example, we could rewrite the mean_median() function to include another argument that lets users specify whether they want the mean or median computed rather than basing this decision on the skewness. This may look as follows.\nmean_median_arg \u0026lt;- function(variable, statistic = \u0026#39;mean\u0026#39;, na.rm = TRUE, skewness = FALSE) { if(statistic == \u0026#39;mean\u0026#39;) { descriptive \u0026lt;- mean(variable, na.rm = na.rm) } else { descriptive \u0026lt;- median(variable, na.rm = na.rm) } if(skewness) { skewness_stat \u0026lt;- skewness(variable, na.rm = na.rm) } else { skewness_stat \u0026lt;- NA } data.frame(skewness_stat, descriptive) } This function can now be tested using the variables we defined before:\nmean_median_arg(flights$arr_delay) ## skewness_stat descriptive ## 1 NA 6.895377 Notice by default, the skewness is not calculated as it is set to FALSE by default. The skewness could be returned by setting skewness = TRUE. The mean is also calculated by default, due to the default value of setting statistic = 'mean'. If we wanted the median instead, we can add this argument.\nmean_median_arg(flights$arr_delay, statistic = \u0026#39;median\u0026#39;, skewness = TRUE) ## skewness_stat descriptive ## 1 3.716783 -5 Note, the way the function was written, specifying anything other than statistic = 'mean' would compute the median.\nmean_median_arg(flights$arr_delay, statistic = \u0026#39;anything\u0026#39;, skewness = TRUE) ## skewness_stat descriptive ## 1 3.716783 -5 This behavior is not ideal, but may be okay for simple functions. If it would be a problem, some additional structure inside the function to test for the specific arguments that are possible could be defined and an error could be returned if the arguments specified are not appropriate.\n Larger conditional branching Conditinoal branching can take on more than two levels as well. The general structure using nested if statements would look like the following.\nif(some_condition) { # do something computationally } else if (another_condition) { # do another computation } else if (yet_another_condition) { # do yet another computation } else { # final computation } In the example above, there are four different paths that the function can take depending on the function input. Commonly, this behavior would use a function argument defined as a character string to navigate through the different branches.\nFor example, explore the following function.\ndesc_stats \u0026lt;- function(variable, statistic = c(\u0026#39;sd\u0026#39;, \u0026#39;mean\u0026#39;, \u0026#39;median\u0026#39;, \u0026#39;quantile\u0026#39;)) { if(statistic == \u0026#39;sd\u0026#39;) { sd(variable, na.rm = TRUE) } else if(statistic == \u0026#39;mean\u0026#39;) { mean(variable, na.rm = TRUE) } else if(statistic == \u0026#39;median\u0026#39;) { median(variable, na.rm = TRUE) } else { quantile(variable, na.rm = TRUE) } } We can then see what is returned for this function with different arguments.\ndesc_stats(flights$arr_delay, statistic = \u0026#39;sd\u0026#39;) ## [1] 44.63329 desc_stats(flights$arr_delay, statistic = \u0026#39;mean\u0026#39;) ## [1] 6.895377 desc_stats(flights$arr_delay, statistic = \u0026#39;median\u0026#39;) ## [1] -5 desc_stats(flights$arr_delay, statistic = \u0026#39;quantile\u0026#39;) ## 0% 25% 50% 75% 100% ## -86 -17 -5 14 1272 Note, when defined this way, the statistic argument must always be specified, but when including the argument values in the function definition, the function can be more specific.\nUsing switch() function This behavior can make functions difficult to read and debug, therefore using the switch() function can be a nice alternative if there are many different values for a function and each just calls a single function. We can redefine the previous function using switch(). For the switch() function, the argument name is passed as the first argument and subsequent arguments to switch() are function calls based on the text of the arguments (shown before the equal sign) followed by the function or computation to perform.\ndesc_stats_sw \u0026lt;- function(variable, statistic = c(\u0026#39;sd\u0026#39;, \u0026#39;mean\u0026#39;, \u0026#39;median\u0026#39;, \u0026#39;quantile\u0026#39;)) { switch(statistic, sd = sd(variable, na.rm = TRUE), mean = mean(variable, na.rm = TRUE), median = median(variable, na.rm = TRUE), quantile = quantile(variable, na.rm = TRUE), stop(\u0026quot;Unknown statistics argument\u0026quot;)) } Then to test the function.\ndesc_stats_sw(flights$arr_delay, statistic = \u0026#39;sd\u0026#39;) ## [1] 44.63329 desc_stats_sw(flights$arr_delay, statistic = \u0026#39;mean\u0026#39;) ## [1] 6.895377 desc_stats_sw(flights$arr_delay, statistic = \u0026#39;median\u0026#39;) ## [1] -5 desc_stats_sw(flights$arr_delay, statistic = \u0026#39;quantile\u0026#39;) ## 0% 25% 50% 75% 100% ## -86 -17 -5 14 1272 desc_stats_sw(flights$arr_delay, statistic = \u0026#39;variance\u0026#39;) ## Error in desc_stats_sw(flights$arr_delay, statistic = \u0026quot;variance\u0026quot;): Unknown statistics argument Notice that now I also flagged the function to throw an error if an argument name does not match the statistic argument definition.\n   Thinking about Returned Values I only want to touch briefly on return values. These are commonly found at the end of the function and I usually just print them out to the console. Here I show the first function, standardize() for reference. Notice that the last line of the function is the resulting statistic being printed. That is, the (x - mean_var) / sd_var was not saved to an object therefore would print directly to the console. This is the return value for the function.\nstandardize \u0026lt;- function(x) { mean_var \u0026lt;- mean(x) sd_var \u0026lt;- sd(x) (x - mean_var) / sd_var } The return() function The return() function is useful to be explicit about the value that is returned from the function. I use it when I have more than one returned value that occur at different points in the function definition. If the value I return is the last line of code, I don’t explicitly use return, however if there is another value earlier in the function that gets returned, I’m more likely to use return().\nHere is an example of what explicit return functions would look like using a function we have already used and defined.\ndesc_stats \u0026lt;- function(variable, statistic = c(\u0026#39;sd\u0026#39;, \u0026#39;mean\u0026#39;, \u0026#39;median\u0026#39;, \u0026#39;quantile\u0026#39;)) { if(statistic == \u0026#39;sd\u0026#39;) { return(sd(variable, na.rm = TRUE)) } else if(statistic == \u0026#39;mean\u0026#39;) { return(mean(variable, na.rm = TRUE)) } else if(statistic == \u0026#39;median\u0026#39;) { return(median(variable, na.rm = TRUE)) } else { return(quantile(variable, na.rm = TRUE)) } } The function would behave the same as before, just now the values that could be returned are wrapped in the return() function. I leave it to you to test the function to ensure that the values are indeed the same.\n  ","date":1616976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616976000,"objectID":"1f15ad26684875633c91e93318178c12","permalink":"https://psqf6250.brandonlebeau.org/rcode/user-functions/","publishdate":"2021-03-29T00:00:00Z","relpermalink":"/rcode/user-functions/","section":"rcode","summary":"User Created Functions","tags":null,"title":"User Created Functions","type":"book"},{"authors":null,"categories":null,"content":"Quiz 3 can be taken on ICON, due February 20th, 2022. The quiz covers content from Week 4.\nQuiz 3 Link\n","date":1644364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644364800,"objectID":"ffe02f7f4b85dd056013551821b59d03","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz3/","publishdate":"2022-02-09T00:00:00Z","relpermalink":"/assignments/quizzes/quiz3/","section":"assignments","summary":"Quiz 3 can be taken on ICON, due February 20th, 2022. The quiz covers content from Week 4.\nQuiz 3 Link","tags":null,"title":"Quiz 3","type":"book"},{"authors":null,"categories":null,"content":"Quiz 4 can be taken on ICON, due March 13th, 2022. The quiz covers content from Week 5 and Week 6.\nQuiz 4 Link\n","date":1646006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646006400,"objectID":"c160bc7b80914ff7c52bbe5d6dff1a09","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz4/","publishdate":"2022-02-28T00:00:00Z","relpermalink":"/assignments/quizzes/quiz4/","section":"assignments","summary":"Quiz 4 can be taken on ICON, due March 13th, 2022. The quiz covers content from Week 5 and Week 6.\nQuiz 4 Link","tags":null,"title":"Quiz 4","type":"book"},{"authors":null,"categories":null,"content":"Quiz 5 can be taken on ICON, due March 13th, 2022. The quiz covers content from Week 7 and Week 8.\nQuiz 5 Link\n","date":1646006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646006400,"objectID":"cda06e7833bad261249d58564bf0c9c1","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz5/","publishdate":"2022-02-28T00:00:00Z","relpermalink":"/assignments/quizzes/quiz5/","section":"assignments","summary":"Quiz 5 can be taken on ICON, due March 13th, 2022. The quiz covers content from Week 7 and Week 8.\nQuiz 5 Link","tags":null,"title":"Quiz 5","type":"book"},{"authors":null,"categories":null,"content":"Quiz 6 can be taken on ICON, due April 10th, 2022. The quiz covers content from Week 9 and Week 10.\nQuiz 6 Link\n","date":1648425600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648425600,"objectID":"b9c34714991f0282a19cd5d3a42d282a","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz6/","publishdate":"2022-03-28T00:00:00Z","relpermalink":"/assignments/quizzes/quiz6/","section":"assignments","summary":"Quiz 6 can be taken on ICON, due April 10th, 2022. The quiz covers content from Week 9 and Week 10.\nQuiz 6 Link","tags":null,"title":"Quiz 6","type":"book"},{"authors":null,"categories":null,"content":"Quiz 7 can be taken on ICON, due April 17th, 2022. The quiz covers content from Week 11.\nQuiz 7 Link\n","date":1649721600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649721600,"objectID":"ec4ec95d4d7d6867324ec59356db3f84","permalink":"https://psqf6250.brandonlebeau.org/assignments/quizzes/quiz7/","publishdate":"2022-04-12T00:00:00Z","relpermalink":"/assignments/quizzes/quiz7/","section":"assignments","summary":"Quiz 7 can be taken on ICON, due April 17th, 2022. The quiz covers content from Week 11.\nQuiz 7 Link","tags":null,"title":"Quiz 7","type":"book"},{"authors":null,"categories":null,"content":"Course Project Proposal - 5 pts Due April 3rd, by 11:59 pm\nA short, one page at most, description of the project you intend to complete for this course. This project proposal should include the following aspects:\n Brief discussion of the data used Statement of research question(s) to explore The type of model used Rationale for the model (i.e. why will this model help answer the research questions?)  Although not necessary, it is encouraged to discuss your project with the instructor prior to submission.\nPlease also reference the project requirements as you plan the project proposal.\n","date":1643673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643673600,"objectID":"33e546dddf65d9f08ab4f73b7d6e74b1","permalink":"https://psqf6250.brandonlebeau.org/assignments/project/project-proposal/","publishdate":"2022-02-01T00:00:00Z","relpermalink":"/assignments/project/project-proposal/","section":"assignments","summary":"Course Project Proposal - 5 pts Due April 3rd, by 11:59 pm\nA short, one page at most, description of the project you intend to complete for this course. This project proposal should include the following aspects:","tags":null,"title":"Course Project Proposal","type":"book"},{"authors":null,"categories":null,"content":"Course Project - 25 pts Due May 12th by 11:59 pm\nProject Details The goal of this project is to do an analysis from start to finish. The study can come from data/project you are already working on (for a thesis or project) or you can design a brand new analysis on a topic that you are interested in. For this project, you will find some data you are interested in, analyze the data, and do a short write-up of the methods and results. The main prerequisite is that the analysis should be conducted in R.\nProject Length The length of these will likely vary, but I envision this to be in the 3 to 8 page range.\nStatistical Output Do NOT include raw output from R in the final paper (e.g. do not include output directly from summary()). Rather, include statistics or figures you wish to include in formatted tables or directly in the text. Raw statistical output from R will result in a 10 point grade reduction.\nThings to include Below is a list of things to include in your write-up:\n  Brief literature review \u0026ndash; discuss why this topic interests you and any gaps in the literature. This is not intended to be a true literature review, I\u0026rsquo;m envisioning a few paragraphs giving a very broad overview, paying more attention to gaps in knowledge.\n  State your research question(s)\n  Plan out the methods to answer the research question(s). Talk about the dependent and independent variables, the analysis you are going to conduct, the sample and population, and hypotheses you are testing.\n  Report descriptive statistics (graphical and/or summary statistics). Talk about the distribution of the variables and interesting observations that came about from a descriptive analysis. For example, there may be discussion of missing data, extreme values that needed to be removed, variation across groups, or descriptive differences in location across groups.\n  Now perform your analysis. Make sure to talk about assumptions and if they were met for the method you performed. Report the results of the test in statistical terms.\n  Include at least one graphic summarizing the results of the inferential method you used to answer the research question.\n  Lastly, discuss the research conclusions. This may include how the results may impact practice, policy, or basic knowledge on the topic generally. Think about any limitations this study may have had and how this study may benefit the knowledge of the topic you are studying.\n  Please include a write up document (e.g. Word, HTML, PDF) and also include your analysis scripts (e.g. R script or Rmd) when uploading the final assignment to ICON.\n  ","date":1643673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643673600,"objectID":"f5829e95fdc9745658527f73484a7d6c","permalink":"https://psqf6250.brandonlebeau.org/assignments/project/project/","publishdate":"2022-02-01T00:00:00Z","relpermalink":"/assignments/project/project/","section":"assignments","summary":"Course Project - 25 pts Due May 12th by 11:59 pm\nProject Details The goal of this project is to do an analysis from start to finish. The study can come from data/project you are already working on (for a thesis or project) or you can design a brand new analysis on a topic that you are interested in.","tags":null,"title":"Course Project","type":"book"}]