<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Syntax | PSQF 6250</title>
    <link>https://psqf6250.brandonlebeau.org/rcode/</link>
      <atom:link href="https://psqf6250.brandonlebeau.org/rcode/index.xml" rel="self" type="application/rss+xml" />
    <description>R Syntax</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 13 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://psqf6250.brandonlebeau.org/media/blue-balloon.jpg</url>
      <title>R Syntax</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/</link>
    </image>
    
    <item>
      <title>Graphics</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/graphics/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/graphics/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;We are going to start by exploring graphics with R using the &lt;code&gt;midwest&lt;/code&gt; data. To access this data, run the following commands:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we were interested in exploring the question: How does population density influence the percentage of the population with at least a college degree? Let’s explore these data closer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;midwest&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 437 × 28
##      PID county  state  area poptotal popdensity popwhite popblack popamerindian
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;         &amp;lt;int&amp;gt;
##  1   561 ADAMS   IL    0.052    66090      1271.    63917     1702            98
##  2   562 ALEXAN… IL    0.014    10626       759      7054     3496            19
##  3   563 BOND    IL    0.022    14991       681.    14477      429            35
##  4   564 BOONE   IL    0.017    30806      1812.    29344      127            46
##  5   565 BROWN   IL    0.018     5836       324.     5264      547            14
##  6   566 BUREAU  IL    0.05     35688       714.    35157       50            65
##  7   567 CALHOUN IL    0.017     5322       313.     5298        1             8
##  8   568 CARROLL IL    0.027    16805       622.    16519      111            30
##  9   569 CASS    IL    0.024    13437       560.    13384       16             8
## 10   570 CHAMPA… IL    0.058   173025      2983.   146506    16559           331
## # … with 427 more rows, and 19 more variables: popasian &amp;lt;int&amp;gt;, popother &amp;lt;int&amp;gt;,
## #   percwhite &amp;lt;dbl&amp;gt;, percblack &amp;lt;dbl&amp;gt;, percamerindan &amp;lt;dbl&amp;gt;, percasian &amp;lt;dbl&amp;gt;,
## #   percother &amp;lt;dbl&amp;gt;, popadults &amp;lt;int&amp;gt;, perchsd &amp;lt;dbl&amp;gt;, percollege &amp;lt;dbl&amp;gt;,
## #   percprof &amp;lt;dbl&amp;gt;, poppovertyknown &amp;lt;int&amp;gt;, percpovertyknown &amp;lt;dbl&amp;gt;,
## #   percbelowpoverty &amp;lt;dbl&amp;gt;, percchildbelowpovert &amp;lt;dbl&amp;gt;, percadultpoverty &amp;lt;dbl&amp;gt;,
## #   percelderlypoverty &amp;lt;dbl&amp;gt;, inmetro &amp;lt;int&amp;gt;, category &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will bring up the first 10 rows of the data (hiding the additional 8,592) rows. A first common step to explore our research question is to plot the data. To do this we are going to use the R package, &lt;code&gt;ggplot2&lt;/code&gt;, which was installed when running the &lt;code&gt;install.packages&lt;/code&gt; command above. You can explore the &lt;code&gt;midwest&lt;/code&gt; data by calling up the help file as well with &lt;code&gt;?midwest&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;create-a-ggplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a ggplot&lt;/h2&gt;
&lt;p&gt;To plot these two variables from the &lt;code&gt;midwest&lt;/code&gt; data, we will use the function &lt;code&gt;ggplot&lt;/code&gt; and &lt;code&gt;geom_point&lt;/code&gt; to add a layer of points. We will treat &lt;code&gt;popdensity&lt;/code&gt; as the x variable and &lt;code&gt;percollege&lt;/code&gt; as the y variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/plot1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;examples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Try plotting &lt;code&gt;popdensity&lt;/code&gt; by &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Try plotting &lt;code&gt;county&lt;/code&gt; by &lt;code&gt;state&lt;/code&gt;. Does this plot work?&lt;/li&gt;
&lt;li&gt;Bonus: Try just using the &lt;code&gt;ggplot(data = midwest)&lt;/code&gt; from above. What do you get? Does this make sense?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: You should be able to modify the structure of the code above to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;add-aesthetics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Aesthetics&lt;/h2&gt;
&lt;p&gt;Aesthetics are a way to explore more complex interactions within the data. Particularly, from the above example, lets add in the state variable to the plot via an aesthetic.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege, color = state))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/aesthetic-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we simply colored the points by the state they belong in. Does there appear to be a trend?&lt;/p&gt;
&lt;div id=&#34;examples-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using the same aesthetic structure as above, instead of using colors, make the shape of the points different for each state.&lt;/li&gt;
&lt;li&gt;Instead of color, use &lt;code&gt;alpha&lt;/code&gt; instead. What does this do to the plot?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;global-aesthetics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Global Aesthetics&lt;/h2&gt;
&lt;p&gt;Above, we specified a variable to an aesthetic, which is a common use of aesthetics. However, the aesthetics can also be assigned globally. Here are two examples using the first scatterplot created.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege), color = &amp;#39;pink&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/global_aes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege), shape = 15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/global_aes2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These two plots changed the aesthetics for all of the points. Notice, the suttle difference between the code for these plots and that for the plot above. The placement of the aesthetic is crucial, if it is within the parentheses for &lt;code&gt;aes()&lt;/code&gt; then it should be assigned a variable. If it is outside, as in the last two examples, it will define the aesthetic for all the data.&lt;/p&gt;
&lt;div id=&#34;examples-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Try the following command: &lt;code&gt;colors()&lt;/code&gt;. This will print a vector of all the color names within R, try a few to find your favorites.&lt;/li&gt;
&lt;li&gt;What happens if you use the following code:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) + 
  geom_point(mapping = aes(x = popdensity, y = percollege, color = &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is the problem?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;facets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Facets&lt;/h2&gt;
&lt;p&gt;Instead of defining an aesthetic to change the color or shape of points by a third variable, we can also plot each groups data in a single plot and combine them. The process is easy with &lt;code&gt;ggplot2&lt;/code&gt; by using facets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege)) + 
  facet_grid(. ~ state)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/facets-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;facet_wrap&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege)) + 
  facet_wrap(~ state)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/facet_wrap-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;examples-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Can you facet with a continuous variable? Try it!&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;geoms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Geoms&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; uses a grammar of graphics which makes it easy to switch different plot types (called geoms) once you are comfortable with the basic syntax. For example, how does the following plot differ from the scatterplot first generated above? What is similar?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_smooth(mapping = aes(x = popdensity, y = percollege))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/smooth-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also do this plot by states&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_smooth(mapping = aes(x = popdensity, y = percollege, linetype = state), 
              se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/smooth_states-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What about the code above gave me the different lines for each state? Note, I also removed the standard error shading from the plot as well.&lt;/p&gt;
&lt;div id=&#34;examples-4&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;It is possible to combine geoms, which we will do next, but try it first. Try to recreate this plot.
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/combine-1.png&#34; width=&#34;672&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-multiple-geoms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combining multiple geoms&lt;/h2&gt;
&lt;p&gt;Combining more than one geom into a single plot is relatively straightforward, but a few considerations are important. Essentially to do the task, we just simply need to combine the two geoms we have used:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest) +
  geom_point(aes(x = popdensity, y = percollege, color = state)) +
  geom_smooth(mapping = aes(x = popdensity, y = percollege, color = state), 
              se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/combine_geoms-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A couple points about combining geoms, first, the order matters. In the above example, we called &lt;code&gt;geom_point&lt;/code&gt; first, then &lt;code&gt;geom_smooth&lt;/code&gt;. When plotting these data, the points will then be plotted first followed by the lines. Try flipping the order of the two geoms to see how the plot differs.&lt;/p&gt;
&lt;p&gt;We can also simplify this code to not duplicate typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() +
  geom_smooth(se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/two_geoms-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;examples-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Can you recreate the following figure?
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/differ_aes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-geom-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other geom examples&lt;/h2&gt;
&lt;p&gt;There are many other geoms available to use. To see them all, visit &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/index.html&#34; class=&#34;uri&#34;&gt;https://ggplot2.tidyverse.org/reference/index.html&lt;/a&gt; which gives examples of all the possibilities. This is a handy resource that I keep going back to.&lt;/p&gt;
&lt;div id=&#34;geoms-for-single-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Geoms for single variables&lt;/h3&gt;
&lt;p&gt;The introduction to plotting has been with two variables, but lets take a step back and focus on one variable with a bar chart.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/bar-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also easily add aesthetics this base plot as shown before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar(aes(fill = factor(inmetro)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/bar_fill-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A few additions can help interpretation of this plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar(aes(fill = factor(inmetro)), position = &amp;#39;fill&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/bar_fill2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = state)) + 
  geom_bar(aes(fill = factor(inmetro)), position = &amp;#39;dodge&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to do a histrogram of a quantitative variable:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity)) + 
  geom_histogram()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/histogram-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can adjust the binwidth directly:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity)) + 
  geom_histogram(binwidth = 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/binwidth-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-6&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;With more than two groups, histograms are difficult to interpret due to overlap. Instead, use the &lt;code&gt;geom_density&lt;/code&gt; to create a density plot for &lt;code&gt;popdensity&lt;/code&gt; for each state. The final plot should look similar to this:
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/density-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;geom_boxplot&lt;/code&gt;, create boxplots with &lt;code&gt;popdensity&lt;/code&gt; as the y variable and &lt;code&gt;state&lt;/code&gt; as the x variable. Bonus: facet this plot by the variable &lt;code&gt;inmetro&lt;/code&gt;.
&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/boxplot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-customization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Customization&lt;/h2&gt;
&lt;p&gt;There are many many ways to adjust the look of the plot, I will discuss a few that are common.&lt;/p&gt;
&lt;div id=&#34;change-axes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Change axes&lt;/h3&gt;
&lt;p&gt;Axes are something that are commonly altered, particularly to give them a good name and also to alter the values shown on the axes. These are generally done with &lt;code&gt;scale_x_*&lt;/code&gt; and &lt;code&gt;scale_y_*&lt;/code&gt; where &lt;code&gt;*&lt;/code&gt; is a filler based on the type of variable on the axes.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/axes_labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To change the legend title, the &lt;code&gt;scale_color_discrete&lt;/code&gt; command can be used to adjust the color aesthetic and the variable is discrete.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/aes_labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;we can also alter the breaks showing on the x-axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;, breaks = seq(0, 80000, 20000)) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/breaks_x-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;zoom-in-on-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Zoom in on plot&lt;/h2&gt;
&lt;p&gt;You’ll notice that there are outliers in this scatterplot due to larger population density values for some counties. It may be of interest to zoom in on the plot. The plot can be zoomed in by using the &lt;code&gt;coord_cartesian&lt;/code&gt; command as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;) + 
  coord_cartesian(xlim = c(0, 15000))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/zoom-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note: This can also be achieved using the &lt;code&gt;xlim&lt;/code&gt; argument to &lt;code&gt;scale_x_continuous&lt;/code&gt; above, however this will cause some points to not be plotted. In this case it would not be a huge deal, however, if we plotted the smooth lines from before you can see the difference.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  geom_smooth(se = FALSE) +
  scale_x_continuous(&amp;quot;Population Density&amp;quot;) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;) + 
  coord_cartesian(xlim = c(0, 15000))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/zoom2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = midwest, mapping = aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  geom_smooth(se = FALSE) +
  scale_x_continuous(&amp;quot;Population Density&amp;quot;, limits = c(0, 15000)) + 
  scale_y_continuous(&amp;quot;Percent College Graduates&amp;quot;) + 
  scale_color_discrete(&amp;quot;State&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 16 rows containing non-finite values (stat_smooth).&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 16 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics_files/figure-html/zoom3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Basics</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/r-basics/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/r-basics/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;In an attempt to get you “doing things” in R quickly, I’ve omitted a lot of discussion surrounding internal R workings. R is an object oriented language, this is much different than many other software languages.&lt;/p&gt;
&lt;div id=&#34;r-works-as-a-calculator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R works as a calculator&lt;/h2&gt;
&lt;p&gt;R can be used as a calculator to do any type of addition, subtraction, multiplication, or division (among other things).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1 + 2 - 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;5 * 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2/1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sqrt(4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2^2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Being an object oriented system, values can directly saved within an object to be used later. As an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1 + 3
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can then be used later in other calculations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x * 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This simplistic example is a bit too simple to show all the benefits of this approach, but will become more apparent when we start reading in data and doing more complicated data munging type tasks.&lt;/p&gt;
&lt;div id=&#34;naming-conventions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Naming conventions&lt;/h3&gt;
&lt;p&gt;This is a topic in which you will not get a single answer, but rather a different answer for everyone you ask. I prefer something called &lt;strong&gt;snake_case&lt;/strong&gt; using underscores to separate words in an object. Others use &lt;strong&gt;titleCase&lt;/strong&gt; as a way to distinguish words others yet use &lt;strong&gt;period.to.separate&lt;/strong&gt; words in object names.&lt;/p&gt;
&lt;p&gt;The most important thing is to be consistent. Pick a convention that works for you and stick with it through out. Avoiding this &lt;strong&gt;Mixed.TypeOf_conventions&lt;/strong&gt; at all costs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-is-case-sensitive&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R is case sensitive&lt;/h2&gt;
&lt;p&gt;This can cause problems and make debugging a bit more difficult. Be careful with typos and with case. Here is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;case_sensitive &amp;lt;- 10
Case_sensitive&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in eval(expr, envir, enclos) : object &amp;#39;Case_sensitive&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;We have already been using functions when working through creating graphics with R. A function consists of at least two parts, the &lt;em&gt;function name&lt;/em&gt; and the &lt;em&gt;arguments&lt;/em&gt; as follows: &lt;code&gt;function_name(arg1 = num, arg2 = num)&lt;/code&gt;. The arguments are always inside of parentheses, take on some value, and are always named. To call a function, use the &lt;code&gt;function_name&lt;/code&gt; followed by parentheses with the arguments inside the parentheses. For example, using the &lt;code&gt;rnorm&lt;/code&gt; function to generate values from a random normal distribution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rnorm(n = 10, mean = 0, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
##  [7]  0.4874291  0.7383247  0.5757814 -0.3053884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice I called the arguments by name directly, this is good practice, however, this code will generate the same values (the values are the same because I’m using &lt;code&gt;set.seed&lt;/code&gt; here):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rnorm(10, 0, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
##  [7]  0.4874291  0.7383247  0.5757814 -0.3053884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key when arguments are not called via their names is the order of the arguments. Look at &lt;code&gt;?rnorm&lt;/code&gt; to see that the first three arguments are indeed &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, and &lt;code&gt;sd&lt;/code&gt;. When you name arguments, they can be specified in any order (generally bad practice).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
rnorm(sd = 1, n = 10, mean = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
##  [7]  0.4874291  0.7383247  0.5757814 -0.3053884&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can save this result to an object to be used later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
norm_values &amp;lt;- rnorm(n = 10, mean = 0, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the result is no longer printed to the screen, but rather is saved to the object &lt;code&gt;norm_values&lt;/code&gt;. To see the result, you could just type &lt;code&gt;norm_values&lt;/code&gt; in the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;errors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Errors&lt;/h2&gt;
&lt;p&gt;Lastly, I want to discuss errors. Errors are going to happen. Even the best programmers encounter errors that they did not anticipate and debugging needs to happen. If you encounter an error I recommend doing the following few things first:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;?function_name&lt;/code&gt; to explore the details of the function. The examples at the bottom of every R help page can be especially helpful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If this does not help, copy and paste the error and search on the internet. Chances are someone else has had this error and has asked how to fix it. This is how I fix most errors I am unable to figure out with the R help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If these two steps still do not help, feel free to email me, but take the time to do steps 1 and 2. If you do email me, please include the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The error message directly given from R&lt;/li&gt;
&lt;li&gt;A reproducible example of the code. The reproducible example is one in which I can run the code directly with no modifications. Without this, it is much more difficult if not impossible for me to help without asking for more information.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2 extensions</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;ggplot2&lt;/em&gt; package has a robust ecosystem of many other packages that extend the functionality of &lt;em&gt;ggplot2&lt;/em&gt;. This week, we are going to explore some of these packages in more detail, highlighting a few packages that give you additional ways to create stunning visualizations. You can see all of the extensions packages in the following &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34;&gt;&lt;em&gt;ggplot2&lt;/em&gt; extension website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to spend some time with the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ggrepel.slowkow.com/&#34;&gt;&lt;em&gt;ggrepel&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggforce.data-imaginist.com/&#34;&gt;&lt;em&gt;ggforce&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/&#34;&gt;&lt;em&gt;patchwork&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also plan to discuss, &lt;a href=&#34;https://gganimate.com/&#34;&gt;&lt;em&gt;gganimate&lt;/em&gt;&lt;/a&gt;, but we are going to come back to this later in the course when talking about interactive graphics.&lt;/p&gt;
&lt;p&gt;All of these packages are on CRAN and you can install with the following command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(c(&amp;quot;ggrepel&amp;quot;, &amp;quot;ggforce&amp;quot;, &amp;quot;patchwork&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;ggrepel&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;ggrepel&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Let’s start by exploring the &lt;em&gt;ggrepel&lt;/em&gt; package. This package is particularly useful when working with text labels and provides some algorithms to help with text label placement automatically. One challenge when placing text labels in a figure is that they often overlap and they also often are placed on top of the data too. &lt;em&gt;ggrepel&lt;/em&gt; helps to solve this problem.&lt;/p&gt;
&lt;p&gt;To show a motivating example, we are going to use data in this section based on penguins. To do this, we first need to install this data package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;palmerpenguins&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data include three different species of penguins originally collected by Dr. Kristen Gorman at the Palmer Station in Antarctica. There are a total of 344 penguins collected from 3 islands in Antarctica and include information about the species, which island, penguin measurements, and the sex of the penguin. More information about the data including artwork about the species and penguin measurements are on this &lt;a href=&#34;https://github.com/allisonhorst/palmerpenguins&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the penguin &lt;a href=&#34;https://github.com/allisonhorst/palmerpenguins/blob/master/man/figures/lter_penguins.png&#34;&gt;species&lt;/a&gt; and what the &lt;a href=&#34;https://github.com/allisonhorst/palmerpenguins/blob/master/man/figures/culmen_depth.png&#34;&gt;measurements mean&lt;/a&gt;, “artwork by &lt;span class=&#34;citation&#34;&gt;@allison_horst&lt;/span&gt;”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(palmerpenguins)
library(ggplot2)

penguins&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 8
##    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
##    &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;
##  1 Adelie  Torgersen           39.1          18.7               181        3750
##  2 Adelie  Torgersen           39.5          17.4               186        3800
##  3 Adelie  Torgersen           40.3          18                 195        3250
##  4 Adelie  Torgersen           NA            NA                  NA          NA
##  5 Adelie  Torgersen           36.7          19.3               193        3450
##  6 Adelie  Torgersen           39.3          20.6               190        3650
##  7 Adelie  Torgersen           38.9          17.8               181        3625
##  8 Adelie  Torgersen           39.2          19.6               195        4675
##  9 Adelie  Torgersen           34.1          18.1               193        3475
## 10 Adelie  Torgersen           42            20.2               190        4250
## # … with 334 more rows, and 2 more variables: sex &amp;lt;fct&amp;gt;, year &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we wanted to explore the bill length and flipper length with a scatter plot. We can do that with &lt;em&gt;ggplot2&lt;/em&gt; using the &lt;code&gt;geom_point()&lt;/code&gt; function. I’m also using the &lt;code&gt;theme_set()&lt;/code&gt; function to set the theme to be &lt;code&gt;theme_bw()&lt;/code&gt; for the remainder of the notebook. I’ve also altered the theme settings by increasing the base font size from 12 to 16 so hopefully it is a bit easier to read the figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme_set(theme_bw(base_size = 16))

ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/length-depth-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Suppose we wished to add the species to this figure. More specifically, we want to add the species information to the points in the figure to label which points below to each penguin species. There are a few ways we could do this, we could do this by color, shape, or both.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/penguin-color-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another potential option would be to add the text labels directly to the figure and not use color. Adding text to a figure is typically done with the &lt;code&gt;geom_text()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(shape = species)) + 
  geom_text(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/text-labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice how the text labels overlap and the word is centered with the data point? This makes the plot unusable. We could fiddle with some settings to the &lt;code&gt;geom_text()&lt;/code&gt; function, but the &lt;em&gt;ggrepel&lt;/em&gt; package helps to fix this issue for us without having to guess and test. The primary difference in the code below is to use &lt;code&gt;geom_text_repel()&lt;/code&gt; instead of &lt;code&gt;geom_text()&lt;/code&gt;. Note, I shrunk the data point slightly in the following figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggrepel)

ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/ggrepel-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This isn’t actually better, but you can see the points were moved away. The issue here is that there are too many text labels to show in a single plot. I’m going to plot only 30 points, 10 from each species.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
set.seed(100)

penguins %&amp;gt;% 
  group_by(species) %&amp;gt;% 
  sample_n(10) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/ggrepel-one-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To see exactly what was done, I’m going to generate the same figure using &lt;code&gt;geom_text()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(100)

penguins %&amp;gt;% 
  group_by(species) %&amp;gt;% 
  sample_n(10) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/text-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;geom_label_repel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;geom_label_repel()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;ggrepel&lt;/em&gt; package only has two functions, the first we saw, &lt;code&gt;geom_text_repel()&lt;/code&gt;. The second is &lt;code&gt;geom_label_repel()&lt;/code&gt;. This works the same as &lt;code&gt;geom_text_repel()&lt;/code&gt;, but creates a box around the text attribute.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(100)

penguins %&amp;gt;% 
  group_by(species) %&amp;gt;% 
  sample_n(10) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_label_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/label-repel-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ggforce&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;em&gt;ggforce&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;ggforce&lt;/em&gt; package has a few powerful additions. One of these helps to solve the problem of too many text labels when using the entire penguin data and is the problem I’d like to start with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species)) + 
  geom_text_repel(aes(label = species)) +
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/ggrepel-toomany-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Way too many text labels and for this example, there would be too many duplicate text labels. Since there are only three species, other ways of showing the text and groups would be helpful. &lt;em&gt;ggforce&lt;/em&gt; helps with this problem using a series of functions that enclose data within different shapes. These functions are &lt;code&gt;geom_mark_rect()&lt;/code&gt;, &lt;code&gt;geom_mark_circle()&lt;/code&gt;, &lt;code&gt;geom_mark_ellipse()&lt;/code&gt;, and &lt;code&gt;geom_mark_hull()&lt;/code&gt; for rectangle, circle, ellipse, and hulls respectively. For an example, let’s try &lt;code&gt;geom_mark_ellipse()&lt;/code&gt; instead of the text labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggforce)
library(tidyr)

penguins %&amp;gt;%
  drop_na(flipper_length_mm, bill_length_mm) %&amp;gt;%
ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_mark_ellipse(aes(fill = species)) +
  geom_point(size = 3, aes(shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/ggforce-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To take this one step further, we can add a text label to this figure by setting a label aesthetic to &lt;code&gt;geom_mark_ellipse()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;%
  drop_na(flipper_length_mm, bill_length_mm) %&amp;gt;%
  ggplot(., aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_mark_ellipse(aes(fill = species, label = species)) +
  geom_point(size = 3, aes(shape = species)) + 
  scale_x_continuous(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  scale_y_continuous(&amp;quot;Penguin Bill Length (in mm)&amp;quot;, 
                     limits = c(25, 70))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/ggforce-label-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another cool feature of &lt;em&gt;ggforce&lt;/em&gt; is the ability to use something called facet zoom. Essentially, this will create a zoomed in element of a portion of your figure. For example, suppose we wanted to zoom in on the Gentoo penguins to explore their relationship between bill length and flipper length. This creates a picture in picture plotting effect.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 3, aes(shape = species, color = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;) + 
  facet_zoom(x = species == &amp;#39;Gentoo&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/facet-zoom-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;patchwork&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;em&gt;patchwork&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;patchwork&lt;/em&gt; package is particularly helpful to combine multiple &lt;em&gt;ggplot2&lt;/em&gt; figures into a single figure, but you don’t want to facet. This can be useful to show multiple different relationships of attributes and combine these into a single figure element to include in a document to share.&lt;/p&gt;
&lt;p&gt;To combine figure elements, basic math notation is used, including &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, or &lt;code&gt;|&lt;/code&gt;. There are other operators as well, but these are the primary ones we will explore and will also use parentheses to group plots together.&lt;/p&gt;
&lt;p&gt;First, let’s create a few plots that we may want to combine.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;)

p1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork-plots-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2 &amp;lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_depth_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Depth (in mm)&amp;quot;)
p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we will start by using the &lt;code&gt;+&lt;/code&gt; operator to combine plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(patchwork)

p1 + p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork-combine-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the plots are combined directly as generated. In the above example, we’d likely want to only have one legend instead of two. We can do this by modifying the first figure to remove the legend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) + 
  geom_point(size = 4, aes(color = species, shape = species)) + 
  xlab(&amp;quot;Penguin Flipper Length (in mm)&amp;quot;) +
  ylab(&amp;quot;Penguin Bill Length (in mm)&amp;quot;) + 
  theme(legend.position = &amp;#39;none&amp;#39;)

p1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/no-legend-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 + p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/combine-nolegend-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;/&lt;/code&gt; operator to stack plots into multiple rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 / p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork-ontop-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator has one issue with it, it tries to keep things in a square grid, similar to how &lt;code&gt;facet_wrap()&lt;/code&gt; works. For more advanced layout, the &lt;code&gt;|&lt;/code&gt; operator separates columns whereas we saw above that the &lt;code&gt;/&lt;/code&gt; operator will stack plots. Combined with parentheses, you can get more advanced layouts. First, let’s add one more figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 &amp;lt;- ggplot(drop_na(penguins, sex), 
             aes(x = sex, y = body_mass_g)) + 
  geom_violin(aes(fill = species), draw_quantiles = c(0.1, .5, 0.9)) + 
  xlab(&amp;quot;Penguin Sex&amp;quot;) + 
  ylab(&amp;quot;Penguin Body Mass (in g)&amp;quot;) + 
  theme(legend.position = &amp;#39;none&amp;#39;)

p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patch-box-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 | (p1 / p2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork-combined-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note, without parentheses, the figures may not turn out as you want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 | p2 / p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork-error-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(p1 + p2) / p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/ggplot2_extensions_files/figure-html/patchwork-correct-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphics Tips</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/graphics-tips/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/graphics-tips/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;div id=&#34;graphics-basics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Graphics Basics&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;What is the story you want to tell?&lt;/li&gt;
&lt;li&gt;Is the figure misleading?&lt;/li&gt;
&lt;li&gt;Could other figure types be more effective?&lt;/li&gt;
&lt;li&gt;Does the figure show variation?&lt;/li&gt;
&lt;li&gt;Is the figure self-contained?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;misleading-graphs&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Misleading Graphs&lt;/h1&gt;
&lt;p&gt;Data visualization is hard and it is easy to mislead, intentionally or unintentionally.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/mislead-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;better-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Better Approach&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/better-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Axis Labels&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Axis labels are often placed on the x-axis, but for long labels this can be less effective.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/Axis-labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Axis Labels 2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Often, the labels are rotated. Works, but is ugly and difficult to read in my opinion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/labels-rotate-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-labels-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Axis Labels 3&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The solution, flip x and y axis using &lt;code&gt;coord_flip()&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/flip-axes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;showing-variation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Showing Variation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Figures depicting statistics, should show variation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/mean-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;showing-variation-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Showing Variation 2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There are multiple values for each major category, the mean is useful, but simplifies too much and could mislead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/graphics-tips_files/figure-html/violin-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Manipulation</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/data_munging/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/data_munging/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;Data munging (i.e. data transformations, variable creation, filtering) is a common task that is often overlooked in traditional statistics textbooks and courses. Even though it is omitted, the task of cleaning and organizing the data (coming in week 5 of the course)&lt;/p&gt;
&lt;p&gt;Data from the &lt;code&gt;fivethirtyeight&lt;/code&gt; package is used in this set of notes to show the use of the &lt;code&gt;dplyr&lt;/code&gt; verbs for data munging. This package can be installed with the following command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;fivethirtyeight&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get started with this set of notes, you will need the following packages loaded:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(fivethirtyeight)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to explore the &lt;code&gt;congress_age&lt;/code&gt; data set in more detail. Take a few minutes to familiarize yourself with the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;View(congress_age)
?congress_age&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;congress_age&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 13
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 18,625 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;using-dplyr-for-data-munging&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using &lt;code&gt;dplyr&lt;/code&gt; for data munging&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;dplyr&lt;/code&gt; package uses verbs for common data manipulation tasks. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarise()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The great aspect of these verbs are that they all take a similar data structure, the first argument is always the data, the other arguments are unquoted column names. These functions also always return a data frame in which the rows are observations and the columns are variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-with-filter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples with &lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function selects rows that match a specified condition(s). For example, suppose we wanted to select only the rows in the data that are a part of the 80th congress. The following code will do this action:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(congress_age, congress == 80)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 555 × 13
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 545 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice from above two things, first, the function returned a new data frame. Therefore, if this subsetted data is to be saved, we need to save it to an object, for example, as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;congress_80 &amp;lt;- filter(congress_age, congress == 80)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice now that the data were not automatically printed, instead it was saved into the object called &lt;code&gt;congress_80&lt;/code&gt;. If you wish to preview the data and save it to an object in a single step, you need to wrap the command above in parentheses. Take a second to try this yourself.&lt;/p&gt;
&lt;p&gt;Secondly, notice from the above commands that equality in R is done with &lt;code&gt;==&lt;/code&gt; not just a single &lt;code&gt;=&lt;/code&gt;. The single &lt;code&gt;=&lt;/code&gt; is used for named arguments, therefore when testing for equality you need to be sure to use &lt;code&gt;==&lt;/code&gt;, this is a common frustration and source of bugs when getting started with R.&lt;/p&gt;
&lt;p&gt;Selecting values based on a character vector are similar to numeric values. For example, suppose we wanted to select only those rows pertaining to those from the senate. The following code will do that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;senate &amp;lt;- filter(congress_age, chamber == &amp;#39;senate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;combining-logical-operations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining Logical Operations&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function becomes much more useful with more complex operations. For example, suppose we were interested in selecting the rows that belong to the 80th senate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(congress_age, congress == 80, chamber == &amp;#39;senate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 102 × 13
##    congress chamber bioguide firstname middlename lastname suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 senate  C000133  Arthur    &amp;lt;NA&amp;gt;       Capper   &amp;lt;NA&amp;gt;   1865-07-14
##  2       80 senate  G000418  Theodore  Francis    Green    &amp;lt;NA&amp;gt;   1867-10-02
##  3       80 senate  M000499  Kenneth   Douglas    McKellar &amp;lt;NA&amp;gt;   1869-01-29
##  4       80 senate  R000112  Clyde     Martin     Reed     &amp;lt;NA&amp;gt;   1871-10-19
##  5       80 senate  M000895  Edward    Hall       Moore    &amp;lt;NA&amp;gt;   1871-11-19
##  6       80 senate  O000146  John      Holmes     Overton  &amp;lt;NA&amp;gt;   1875-09-17
##  7       80 senate  M001108  James     Edward     Murray   &amp;lt;NA&amp;gt;   1876-05-03
##  8       80 senate  M000308  Patrick   Anthony    McCarran &amp;lt;NA&amp;gt;   1876-08-08
##  9       80 senate  T000165  Elmer     &amp;lt;NA&amp;gt;       Thomas   &amp;lt;NA&amp;gt;   1876-09-08
## 10       80 senate  W000021  Robert    Ferdinand  Wagner   &amp;lt;NA&amp;gt;   1877-06-08
## # … with 92 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the &lt;code&gt;filter&lt;/code&gt; function uses AND when combining multiple arguments. Therefore, the above command returned only the 102 rows belonging to senators from the 80th congress. The figure on &lt;a href=&#34;https://r4ds.had.co.nz/transform.html#logical-operators&#34;&gt;section 5.2.2&lt;/a&gt; of R for Data Science shows all the possible boolean operators.&lt;/p&gt;
&lt;p&gt;Using an example of the OR operator using &lt;code&gt;|&lt;/code&gt; to select the 80th and 81st congress:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(congress_age, congress == 80 | congress == 81)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,112 × 13
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 1,102 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that to do the OR operator, you need to name the variable twice. When selecting multiple values in the same variable, a handy shortcut is &lt;code&gt;%in%&lt;/code&gt;. The same command can be run with the following shorthand: handy shortcut is &lt;code&gt;%in%&lt;/code&gt;. The same command can be run with the following shorthard&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(congress_age, congress %in% c(80, 81))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,112 × 13
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 1,102 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;not-operator&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Not Operator&lt;/h3&gt;
&lt;p&gt;Another useful operator that deserves a bit more discussion is the not operator, &lt;code&gt;!&lt;/code&gt;. For example, suppose we wanted to omit the 80th congress:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(congress_age, congress != 80)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,080 × 13
##    congress chamber bioguide firstname middlename lastname suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       81 house   D000448  Robert    Lee        Doughton &amp;lt;NA&amp;gt;   1863-11-07
##  2       81 house   S000001  Adolph    Joachim    Sabath   &amp;lt;NA&amp;gt;   1866-04-04
##  3       81 house   E000023  Charles   Aubrey     Eaton    &amp;lt;NA&amp;gt;   1868-03-29
##  4       81 house   W000265  Richard   Joseph     Welch    &amp;lt;NA&amp;gt;   1869-02-13
##  5       81 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom    &amp;lt;NA&amp;gt;   1870-03-09
##  6       81 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull     &amp;lt;NA&amp;gt;   1870-12-18
##  7       81 house   B000545  Schuyler  Otis       Bland    &amp;lt;NA&amp;gt;   1872-05-04
##  8       81 house   K000138  John      Hosea      Kerr     &amp;lt;NA&amp;gt;   1873-12-31
##  9       81 house   C000932  Robert    &amp;lt;NA&amp;gt;       Crosser  &amp;lt;NA&amp;gt;   1874-06-07
## 10       81 house   K000039  John      &amp;lt;NA&amp;gt;       Kee      &amp;lt;NA&amp;gt;   1874-08-22
## # … with 18,070 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is also possible to do not with an AND operator as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(congress_age, congress == 80 &amp;amp; !chamber == &amp;#39;senate&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 453 × 13
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 443 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;exercises&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercises&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using the congress data, select the rows belonging to the democrats (party = D) from the senate of the 100th congress.&lt;/li&gt;
&lt;li&gt;Select all congress members who are older than 80 years old.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;note-on-missing-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Note on Missing Data&lt;/h3&gt;
&lt;p&gt;Missing data within R are represented with &lt;code&gt;NA&lt;/code&gt; which stands for not available.&lt;/p&gt;
&lt;p&gt;There are no missing data in the congress data, however, by default the &lt;code&gt;filter&lt;/code&gt; function will not return any missing values. In order to select missing data, you need to use the &lt;code&gt;is.na&lt;/code&gt; function.&lt;/p&gt;
&lt;div id=&#34;exercise&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercise&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Given the following simple vector, run one filter that selects all values greater than 100. Write a second filter command that selects all the rows greater than 100 and also the NA value.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(x = c(200, 30, NA, 45, 212))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-with-arrange&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples with &lt;code&gt;arrange()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;arrange&lt;/code&gt; function is used for ordering rows in the data. For example, suppose we wanted to order the rows in the congress data by the state the members of congress lived in. This can be done using the &lt;code&gt;arrange&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrange(congress_age, state)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 13
##    congress chamber bioguide firstname middlename lastname suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  2       81 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  3       82 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  4       83 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  5       84 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  6       85 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  7       86 house   R000282  Ralph     Julian     Rivers   &amp;lt;NA&amp;gt;   1903-05-23
##  8       86 senate  G000508  Ernest    &amp;lt;NA&amp;gt;       Gruening &amp;lt;NA&amp;gt;   1887-02-06
##  9       86 senate  B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
## 10       87 house   R000282  Ralph     Julian     Rivers   &amp;lt;NA&amp;gt;   1903-05-23
## # … with 18,625 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the filter function, additional arguments can be added to add more layers to the ordering. For example, if we were interested in ordering the rows by state and then by party affiliation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrange(congress_age, state, party)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 13
##    congress chamber bioguide firstname middlename lastname suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  2       81 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  3       82 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  4       83 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  5       84 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  6       85 house   B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
##  7       86 house   R000282  Ralph     Julian     Rivers   &amp;lt;NA&amp;gt;   1903-05-23
##  8       86 senate  G000508  Ernest    &amp;lt;NA&amp;gt;       Gruening &amp;lt;NA&amp;gt;   1887-02-06
##  9       86 senate  B000201  Edward    Lewis      Bartlett &amp;lt;NA&amp;gt;   1904-04-20
## 10       87 house   R000282  Ralph     Julian     Rivers   &amp;lt;NA&amp;gt;   1903-05-23
## # … with 18,625 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More variables can easily be added to the &lt;code&gt;arrange&lt;/code&gt; function. Notice from the above two commands that the ordering of the rows is in ascending order, if descending order is desired, the &lt;code&gt;desc&lt;/code&gt; function. For example, to order the data starting with the latest congress first:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrange(congress_age, desc(congress))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 13
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1      113 house   H000067  Ralph     M.         Hall      &amp;lt;NA&amp;gt;   1923-05-03
##  2      113 house   D000355  John      D.         Dingell   &amp;lt;NA&amp;gt;   1926-07-08
##  3      113 house   C000714  John      &amp;lt;NA&amp;gt;       Conyers   Jr.    1929-05-16
##  4      113 house   S000480  Louise    McIntosh   Slaughter &amp;lt;NA&amp;gt;   1929-08-14
##  5      113 house   R000053  Charles   B.         Rangel    &amp;lt;NA&amp;gt;   1930-06-11
##  6      113 house   J000174  Sam       Robert     Johnson   &amp;lt;NA&amp;gt;   1930-10-11
##  7      113 house   Y000031  C.        W. Bill    Young     &amp;lt;NA&amp;gt;   1930-12-16
##  8      113 house   C000556  Howard    &amp;lt;NA&amp;gt;       Coble     &amp;lt;NA&amp;gt;   1931-03-18
##  9      113 house   L000263  Sander    M.         Levin     &amp;lt;NA&amp;gt;   1931-09-06
## 10      113 house   Y000033  Don       E.         Young     &amp;lt;NA&amp;gt;   1933-06-09
## # … with 18,625 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-with-select&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples with &lt;code&gt;select()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; function is used to select columns (i.e. variables) from the data but keep all the rows. For example, maybe we only needed the congress number, the chamber, the party affiliation, and the age of the members of congress. We can reduce the data to just these variables using &lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(congress_age, congress, chamber, party, age)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 4
##    congress chamber party   age
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
##  1       80 house   D      85.9
##  2       80 house   D      83.2
##  3       80 house   D      80.7
##  4       80 house   R      78.8
##  5       80 house   R      78.3
##  6       80 house   R      78  
##  7       80 house   R      77.9
##  8       80 house   D      76.8
##  9       80 house   R      76  
## 10       80 house   R      75.8
## # … with 18,625 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the &lt;code&gt;arrange&lt;/code&gt; functions, the variables that you wish to keep are separated by commas and come after the data argument.&lt;/p&gt;
&lt;p&gt;For more complex selection, the &lt;code&gt;dplyr&lt;/code&gt; package has additional functions that are helpful for variable selection. These include:
- &lt;code&gt;starts_with()&lt;/code&gt;
- &lt;code&gt;ends_with()&lt;/code&gt;
- &lt;code&gt;contains()&lt;/code&gt;
- &lt;code&gt;matches()&lt;/code&gt;
- &lt;code&gt;num_range()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These helper functions can be useful for selecting many variables that match a specific pattern. For example, suppose we were interested in selecting all the name variables, this can be accomplished using the &lt;code&gt;contains&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(congress_age, contains(&amp;#39;name&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 3
##    firstname middlename lastname 
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    
##  1 Joseph    Jefferson  Mansfield
##  2 Robert    Lee        Doughton 
##  3 Adolph    Joachim    Sabath   
##  4 Charles   Aubrey     Eaton    
##  5 William   &amp;lt;NA&amp;gt;       Lewis    
##  6 James     A.         Gallagher
##  7 Richard   Joseph     Welch    
##  8 Sol       &amp;lt;NA&amp;gt;       Bloom    
##  9 Merlin    &amp;lt;NA&amp;gt;       Hull     
## 10 Charles   Laceille   Gifford  
## # … with 18,625 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful shorthand to select multiple columns in succession is the &lt;code&gt;:&lt;/code&gt; operator. For example, suppose we wanted to select all the variables between congress and bithday.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(congress_age, congress:birthday)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 8
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 18,625 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;rename-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rename variables&lt;/h3&gt;
&lt;p&gt;The select function does allow you to rename variables, however, using the select function to rename variables is not usually advised as you may end up missing a variable that you wish to keep during the renaming operation. Instead, using the &lt;code&gt;rename&lt;/code&gt; function is better practice.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rename(congress_age, first_name = firstname, last_name = lastname)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 13
##    congress chamber bioguide first_name middlename last_name suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph     Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert     Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph     Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles    Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William    &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James      A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard    Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol        &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin     &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles    Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 18,625 more rows, and 5 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the rename function will not save changes to the object, if you wish to save the name differences (very likely), be sure to save this new step to an object.&lt;/p&gt;
&lt;div id=&#34;exercises-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercises&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using the &lt;code&gt;dplyr&lt;/code&gt; helper functions, select all the variables that start with the letter ‘c’.&lt;/li&gt;
&lt;li&gt;Rename the first three variables in the congress data to ‘x1’, ‘x2’, ‘x3’.&lt;/li&gt;
&lt;li&gt;After renaming the first three variables, use this new data (ensure you saved the previous step to an object) to select these three variables with the &lt;code&gt;num_range&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-with-mutate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples with &lt;code&gt;mutate()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mutate&lt;/code&gt; is a useful verb that allows you to add new columns to the existing data set. Actions done with &lt;code&gt;mutate&lt;/code&gt; include adding a column of means, counts, or other transformations of existing variables. Suppose for example, we wished to convert the party affiliation of the members of congress into a dummy (indicator) variable. This may be useful to more easily compute a proportion or count for instance.&lt;/p&gt;
&lt;p&gt;This can be done with the &lt;code&gt;mutate&lt;/code&gt; function. Below, I’m first going to use &lt;code&gt;select&lt;/code&gt; to reduce the number of columns to make it easier to see the operation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;congress_red &amp;lt;- select(congress_age, congress, chamber, state, party)

mutate(congress_red, 
       democrat = ifelse(party == &amp;#39;D&amp;#39;, 1, 0),
       num_democrat = sum(democrat)
       )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 6
##    congress chamber state party democrat num_democrat
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
##  1       80 house   TX    D            1        10290
##  2       80 house   NC    D            1        10290
##  3       80 house   IL    D            1        10290
##  4       80 house   NJ    R            0        10290
##  5       80 house   KY    R            0        10290
##  6       80 house   PA    R            0        10290
##  7       80 house   CA    R            0        10290
##  8       80 house   NY    D            1        10290
##  9       80 house   WI    R            0        10290
## 10       80 house   MA    R            0        10290
## # … with 18,625 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that the number of rows in the data are the same (18635) as it was previously, but now the two new columns have been added to the data. One converted the party affiliation to a series of 0/1 values and the other variable counted up the number of democrats elected since the 80th congress. Notice how this last variable is simply repeated for all values in the data. The operation done here is not too exciting, however, we will learn another utility later that allows us to group the data to calculate different values for each group.&lt;/p&gt;
&lt;p&gt;Lastly, from the output above, notice that I was able to reference a variable that I created previously in the mutate command. This is unique to the &lt;code&gt;dplyr&lt;/code&gt; package and allows you to create a single &lt;code&gt;mutate&lt;/code&gt; command to add many variables, even those that depend on prior calculations. Obviously, if you need to reference a calculation in another calculation, they need to be done in the proper order.&lt;/p&gt;
&lt;div id=&#34;creation-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creation Functions&lt;/h3&gt;
&lt;p&gt;There are many useful operators to use when creating additional variables. The R for Data Science text has many examples shown in &lt;a href=&#34;http://r4ds.had.co.nz/transform.html&#34;&gt;section 5.5.1&lt;/a&gt;. In general useful operators include addition, subtraction, multiplication, division, descriptive statistics (we will talk more about these in week 4), ranks, logical comparisons, and many more. The exercises will have you explore some of these operations in more detail.&lt;/p&gt;
&lt;div id=&#34;exercises-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercises&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using the &lt;code&gt;diamonds&lt;/code&gt; data, use &lt;code&gt;?diamonds&lt;/code&gt; for more information on the data, use the &lt;code&gt;mutate&lt;/code&gt; function to calculate the price per carat. Hint, this operation would involve standardizing the price variable so that all are comparable at 1 carat.&lt;/li&gt;
&lt;li&gt;Calculate the rank of the original price variable and the new price variable calculated above using the &lt;code&gt;min_rank&lt;/code&gt; function. Are there differences in the ranking of the prices? Hint, it may be useful to test if the two ranks are equal to explore this.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;examples-with-summarise&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples with &lt;code&gt;summarise()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;summarise&lt;/code&gt; is very similar to the &lt;code&gt;mutate&lt;/code&gt; function, except instead of adding additional columns to the data, it collapses data down to a single row. For instance, doing the same operation as the example with &lt;code&gt;mutate&lt;/code&gt; above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;congress_2 &amp;lt;- mutate(congress_age, 
       democrat = ifelse(party == &amp;#39;D&amp;#39;, 1, 0)
       )

summarise(congress_2, 
          num_democrat = sum(democrat)
          )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 1
##   num_democrat
##          &amp;lt;dbl&amp;gt;
## 1        10290&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice now, instead of repeating the same value for all the rows as with &lt;code&gt;mutate&lt;/code&gt;, &lt;code&gt;summarise&lt;/code&gt; collapsed the data into a single numeric summary. Normally this is not a very interesting data activity, however, used in tandem with another function, &lt;code&gt;group_by&lt;/code&gt;, interesting summary statistics can be calculated.&lt;/p&gt;
&lt;p&gt;Suppose we were interested in calculating the number of democrats in each congress. This can be achieved with similar code to above, but first by grouping the data as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;congress_grp &amp;lt;- group_by(congress_2, congress)

summarise(congress_grp, 
          num_democrat = sum(democrat),
          total = n(),
          prop_democrat = num_democrat / total
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 × 4
##    congress num_democrat total prop_democrat
##       &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;
##  1       80          247   555         0.445
##  2       81          330   557         0.592
##  3       82          292   555         0.526
##  4       83          274   557         0.492
##  5       84          288   544         0.529
##  6       85          295   547         0.539
##  7       86          356   554         0.643
##  8       87          339   559         0.606
##  9       88          332   552         0.601
## 10       89          371   548         0.677
## # … with 24 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice above, the use of the &lt;code&gt;group_by&lt;/code&gt; function to group the data first by congress. Then this new grouped data is passed to the &lt;code&gt;summarise&lt;/code&gt; command. As you can see from the output, the operations performed with the &lt;code&gt;summarise&lt;/code&gt; function are done for each unique level of the congress variable. You could now easily plot these to see the trend in proportion of democrats has changed over time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
num_dem &amp;lt;- summarise(congress_grp, 
                     num_democrat = sum(democrat),
                     total = n(),
                     prop_democrat = num_democrat / total
)
ggplot(num_dem, aes(x = congress, y = prop_democrat)) + 
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://psqf6250.brandonlebeau.org/rcode/data_munging_files/figure-html/trend-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;exercises-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercises&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Suppose we wanted to calculate the number and proportion of republicans instead of democrats, assuming these are the only two parties, edit the &lt;code&gt;summarise&lt;/code&gt; command above to calculate these values.&lt;/li&gt;
&lt;li&gt;Suppose instead of using &lt;code&gt;sum(democrat)&lt;/code&gt; above, we used &lt;code&gt;mean(democrat)&lt;/code&gt;, what does this value return? Why does it return this value?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;extending-group_by-in-other-places&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extending &lt;code&gt;group_by()&lt;/code&gt; in other places&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;group_by&lt;/code&gt; function is also useful with the &lt;code&gt;mutate&lt;/code&gt; function and works in a similar way as &lt;code&gt;summarise&lt;/code&gt; above. For example, if we wanted to keep the values calculated above in the original data, we could use &lt;code&gt;mutate&lt;/code&gt; instead of &lt;code&gt;summarise&lt;/code&gt;. This would look like the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mutate(congress_grp, 
       num_democrat = sum(democrat),
       total = n(),
       prop_democrat = num_democrat / total
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,635 × 17
## # Groups:   congress [34]
##    congress chamber bioguide firstname middlename lastname  suffix birthday  
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;    
##  1       80 house   M000112  Joseph    Jefferson  Mansfield &amp;lt;NA&amp;gt;   1861-02-09
##  2       80 house   D000448  Robert    Lee        Doughton  &amp;lt;NA&amp;gt;   1863-11-07
##  3       80 house   S000001  Adolph    Joachim    Sabath    &amp;lt;NA&amp;gt;   1866-04-04
##  4       80 house   E000023  Charles   Aubrey     Eaton     &amp;lt;NA&amp;gt;   1868-03-29
##  5       80 house   L000296  William   &amp;lt;NA&amp;gt;       Lewis     &amp;lt;NA&amp;gt;   1868-09-22
##  6       80 house   G000017  James     A.         Gallagher &amp;lt;NA&amp;gt;   1869-01-16
##  7       80 house   W000265  Richard   Joseph     Welch     &amp;lt;NA&amp;gt;   1869-02-13
##  8       80 house   B000565  Sol       &amp;lt;NA&amp;gt;       Bloom     &amp;lt;NA&amp;gt;   1870-03-09
##  9       80 house   H000943  Merlin    &amp;lt;NA&amp;gt;       Hull      &amp;lt;NA&amp;gt;   1870-12-18
## 10       80 house   G000169  Charles   Laceille   Gifford   &amp;lt;NA&amp;gt;   1871-03-15
## # … with 18,625 more rows, and 9 more variables: state &amp;lt;chr&amp;gt;, party &amp;lt;chr&amp;gt;,
## #   incumbent &amp;lt;lgl&amp;gt;, termstart &amp;lt;date&amp;gt;, age &amp;lt;dbl&amp;gt;, democrat &amp;lt;dbl&amp;gt;,
## #   num_democrat &amp;lt;dbl&amp;gt;, total &amp;lt;int&amp;gt;, prop_democrat &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-summary-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Useful summary functions&lt;/h3&gt;
&lt;p&gt;There are many useful summary functions, many of which we will explore in more detail in week 4 of the course during exploratory data analysis (EDA). However, I want to show a few here with the &lt;code&gt;summarise&lt;/code&gt; function to ease you in. Suppose for instance we were interested in the knowing the youngest and oldest member of congress for each congress. There are actually two ways of doing this, one is using the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; functions on the grouped data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarise(congress_grp,
          youngest = min(age),
          oldest = max(age)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 × 3
##    congress youngest oldest
##       &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1       80     25.9   85.9
##  2       81     27.2   85.2
##  3       82     27.9   87.2
##  4       83     26.7   85.3
##  5       84     28.5   87.3
##  6       85     30.5   89.3
##  7       86     31     91.3
##  8       87     28.9   86  
##  9       88     29     85.3
## 10       89     25     87.3
## # … with 24 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This could also be done by using the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; functions after arranging the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarise(arrange(congress_grp, age),
          youngest = first(age),
          oldest = last(age)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 × 3
##    congress youngest oldest
##       &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1       80     25.9   85.9
##  2       81     27.2   85.2
##  3       82     27.9   87.2
##  4       83     26.7   85.3
##  5       84     28.5   87.3
##  6       85     30.5   89.3
##  7       86     31     91.3
##  8       87     28.9   86  
##  9       88     29     85.3
## 10       89     25     87.3
## # … with 24 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This goes to show that there are commonly many different ways to calculate descriptive statistics. I would argue two strong virtues when writing code is to make it as clear, expressive, and ensure accuracy. Speed and grace in writing code can come later.&lt;/p&gt;
&lt;div id=&#34;exercises-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercises&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For each congress, calculate a summary using the following command: &lt;code&gt;n_distinct(state)&lt;/code&gt;. What does this value return?&lt;/li&gt;
&lt;li&gt;What happens when you use a logical expression within a &lt;code&gt;sum&lt;/code&gt; function call? For example, what do you get in a summarise when you do: &lt;code&gt;sum(age &amp;gt; 75)&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What happens when you try to use &lt;code&gt;sum&lt;/code&gt; or &lt;code&gt;mean&lt;/code&gt; on the variable incumbent?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;chaining-together-multiple-operations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chaining together multiple operations&lt;/h2&gt;
&lt;p&gt;Now that you have seen all of the basic &lt;code&gt;dplyr&lt;/code&gt; data manipulation verbs, it is useful to chain these together to create more complex operations. So far, I have shown you how to do it by saving intermediate steps, for example, saving the grouped data after using the &lt;code&gt;group_by&lt;/code&gt; function. In many instances, these intermediate steps are not useful to us. In these cases you can chain operations together.&lt;/p&gt;
&lt;p&gt;Suppose we are interested in calculating the proportion of democrats for each chamber of congress, but only since the 100th congress? There are two ways to do this, the difficult to read and the easier to read. I first shown the difficult to read.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarise(
  group_by(
    mutate(
      filter(
        congress_age, congress &amp;gt;= 100
      ), 
      democrat = ifelse(party == &amp;#39;D&amp;#39;, 1, 0)
    ),
    congress, chamber
  ),
  num_democrat = sum(democrat),
  total = n(),
  prop_democrat = num_democrat / total
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;congress&amp;#39;. You can override using the `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 28 × 5
## # Groups:   congress [14]
##    congress chamber num_democrat total prop_democrat
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;
##  1      100 house            263   443         0.594
##  2      100 senate            55   101         0.545
##  3      101 house            266   445         0.598
##  4      101 senate            56   101         0.554
##  5      102 house            272   443         0.614
##  6      102 senate            59   104         0.567
##  7      103 house            261   443         0.589
##  8      103 senate            58   105         0.552
##  9      104 house            206   441         0.467
## 10      104 senate            47   103         0.456
## # … with 18 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How difficult do you find the code above to read? This is valid R code, but the first operation done is nested in the middle (it is the &lt;code&gt;filter&lt;/code&gt; function that is run first). This makes for difficult code to debug and write in my opinion. In my opinion, the better way to write code is through the pipe operator, &lt;code&gt;%&amp;gt;%&lt;/code&gt;. The same code above can be achieved with the following much easier to read code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;congress_age %&amp;gt;%
  filter(congress &amp;gt;= 100) %&amp;gt;%
  mutate(democrat = ifelse(party == &amp;#39;D&amp;#39;, 1, 0)) %&amp;gt;%
  group_by(congress, chamber) %&amp;gt;%
  summarise(
    num_democrat = sum(democrat),
    total = n(),
    prop_democrat = num_democrat / total
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;congress&amp;#39;. You can override using the `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 28 × 5
## # Groups:   congress [14]
##    congress chamber num_democrat total prop_democrat
##       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;
##  1      100 house            263   443         0.594
##  2      100 senate            55   101         0.545
##  3      101 house            266   445         0.598
##  4      101 senate            56   101         0.554
##  5      102 house            272   443         0.614
##  6      102 senate            59   104         0.567
##  7      103 house            261   443         0.589
##  8      103 senate            58   105         0.552
##  9      104 house            206   441         0.467
## 10      104 senate            47   103         0.456
## # … with 18 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pipe allows for more readable code by humans and progresses from top to bottom, left to right. The best word to substitute when translating the &lt;code&gt;%&amp;gt;%&lt;/code&gt; code above is ‘then’. So the code above says, using the &lt;code&gt;congress_age&lt;/code&gt; data, then &lt;code&gt;filter&lt;/code&gt;, then &lt;code&gt;mutate&lt;/code&gt;, then &lt;code&gt;group_by&lt;/code&gt;, then &lt;code&gt;summarise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is much easier to read and follow the chain of commands. I highly recommend using the pipe in your code. For more details on what is actually happening, the R for Data Science book has a good explanation in Section 5.6.1.&lt;/p&gt;
&lt;div id=&#34;exercises-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Exercises&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Look at the following nested code and determine what is being done. Then translate this code to use the pipe operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarise(
  group_by(
    mutate(
      filter(
        diamonds, 
        color %in% c(&amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;) &amp;amp; cut %in% c(&amp;#39;Fair&amp;#39;, &amp;#39;Good&amp;#39;, &amp;#39;Very Good&amp;#39;)
      ),
      f_color = ifelse(color == &amp;#39;F&amp;#39;, 1, 0),
      vg_cut = ifelse(cut == &amp;#39;Very Good&amp;#39;, 1, 0)
    ),
    clarity
  ),
  avg = mean(carat),
  sd = sd(carat),
  avg_p = mean(price),
  num = n(),
  summary_f_color = mean(f_color),
  summary_vg_cut = mean(vg_cut)
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Scripts</title>
      <link>https://psqf6250.brandonlebeau.org/rcode/r_scripts/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://psqf6250.brandonlebeau.org/rcode/r_scripts/</guid>
      <description>
&lt;script src=&#34;https://psqf6250.brandonlebeau.org/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;p&gt;I want to talk very briefly about R scripts. You may have been using these already within your workflow for this course, but these are best practice instead of simply running code in the console. Creating R scripts are a crucial step to ensure the data analyses are reproducible, the script will act as a log of all the things that are done to the data to go from data import to any outputs (model results, tables, figures, etc.).&lt;/p&gt;
&lt;p&gt;To create an R script with RStudio, the short cut is CTRL/CMD + SHIFT + N. You can also create a new script by going to File &amp;gt; New File &amp;gt; R Script. Both of these commands will open up a blank script window.&lt;/p&gt;
&lt;p&gt;In this script window, I would recommend loading any R packages first at the top of the file. Then proceed with the analysis. Commands can be sent to the console using CRTL/CMD + ENTER. By default RStudio will run any commands that span more than one line with a single CRTL/CMD + ENTER call.&lt;/p&gt;
&lt;p&gt;For more details about R Scripts, the R for Data Science text has detail with screenshots in &lt;a href=&#34;http://r4ds.had.co.nz/workflow-scripts.html&#34;&gt;Chapter 6&lt;/a&gt;. I recommend trying to create a simple script and sending these commands from the script to the console to be run with R.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
